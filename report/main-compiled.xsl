<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                 exclude-result-prefixes="#all"
                 version="3.0">
   <!-- the tested stylesheet -->
   <xsl:import href="file:/home/runner/work/xslTNG/xslTNG/build/xslt/xspec-driver.xsl"/>
   <!-- XSpec library modules providing tools -->
   <xsl:include href="file:/home/runner/work/xslTNG/xslTNG/build/xspec-2.2.4/src/common/runtime-utils.xsl"/>
   <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}stylesheet-uri"
                  as="Q{http://www.w3.org/2001/XMLSchema}anyURI">file:/home/runner/work/xslTNG/xslTNG/build/xslt/xspec-driver.xsl</xsl:variable>
   <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}xspec-uri"
                  as="Q{http://www.w3.org/2001/XMLSchema}anyURI">file:/home/runner/work/xslTNG/xslTNG/build/xspec/main.xspec</xsl:variable>
   <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}is-external"
                  as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                  select="false()"/>
   <xsl:variable xmlns:xs="http://www.w3.org/2001/XMLSchema"
                  name="Q{urn:x-xspec:compile:impl}thread-aware"
                  as="xs:boolean"
                  select="(system-property('Q{http://www.w3.org/1999/XSL/Transform}product-name') eq 'SAXON') and starts-with(system-property('Q{http://www.w3.org/1999/XSL/Transform}product-version'), 'EE ')"
                  static="yes"/>
   <xsl:variable name="Q{urn:x-xspec:compile:impl}logical-processor-count"
                  as="Q{http://www.w3.org/2001/XMLSchema}integer"
                  use-when="$Q{urn:x-xspec:compile:impl}thread-aware"
                  select="Q{java:java.lang.Runtime}getRuntime() =&gt; Q{java:java.lang.Runtime}availableProcessors()"/>
   <xsl:variable name="Q{urn:x-xspec:compile:impl}thread-count"
                  as="Q{http://www.w3.org/2001/XMLSchema}integer"
                  select="1"
                  use-when="$Q{urn:x-xspec:compile:impl}thread-aware =&gt; not()"/>
   <!-- the main template to run the suite -->
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}main"
                  as="empty-sequence()">
      <xsl:context-item use="absent"/>
      <!-- info message -->
      <xsl:message>
         <xsl:text>Testing with </xsl:text>
         <xsl:value-of select="system-property('Q{http://www.w3.org/1999/XSL/Transform}product-name')"/>
         <xsl:text> </xsl:text>
         <xsl:value-of select="system-property('Q{http://www.w3.org/1999/XSL/Transform}product-version')"/>
      </xsl:message>
      <!-- set up the result document (the report) -->
      <xsl:result-document format="Q{{http://www.jenitennison.com/xslt/xspec}}xml-report-serialization-parameters">
         <xsl:element name="report" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/main.xspec</xsl:attribute>
            <xsl:attribute name="stylesheet" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xslt/xspec-driver.xsl</xsl:attribute>
            <xsl:attribute name="date" namespace="" select="current-dateTime()"/>
            <!-- invoke each compiled top-level x:scenario -->
            <xsl:for-each select="1 to 83">
               <xsl:choose>
                  <xsl:when test=". eq 1">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario1"/>
                  </xsl:when>
                  <xsl:when test=". eq 2">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario2"/>
                  </xsl:when>
                  <xsl:when test=". eq 3">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario3"/>
                  </xsl:when>
                  <xsl:when test=". eq 4">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario4"/>
                  </xsl:when>
                  <xsl:when test=". eq 5">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario5"/>
                  </xsl:when>
                  <xsl:when test=". eq 6">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario6"/>
                  </xsl:when>
                  <xsl:when test=". eq 7">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario7"/>
                  </xsl:when>
                  <xsl:when test=". eq 8">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario8"/>
                  </xsl:when>
                  <xsl:when test=". eq 9">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario9"/>
                  </xsl:when>
                  <xsl:when test=". eq 10">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario10"/>
                  </xsl:when>
                  <xsl:when test=". eq 11">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario11"/>
                  </xsl:when>
                  <xsl:when test=". eq 12">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario12"/>
                  </xsl:when>
                  <xsl:when test=". eq 13">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario13"/>
                  </xsl:when>
                  <xsl:when test=". eq 14">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario14"/>
                  </xsl:when>
                  <xsl:when test=". eq 15">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario15"/>
                  </xsl:when>
                  <xsl:when test=". eq 16">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario16"/>
                  </xsl:when>
                  <xsl:when test=". eq 17">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario17"/>
                  </xsl:when>
                  <xsl:when test=". eq 18">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario18"/>
                  </xsl:when>
                  <xsl:when test=". eq 19">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario19"/>
                  </xsl:when>
                  <xsl:when test=". eq 20">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario20"/>
                  </xsl:when>
                  <xsl:when test=". eq 21">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario21"/>
                  </xsl:when>
                  <xsl:when test=". eq 22">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario22"/>
                  </xsl:when>
                  <xsl:when test=". eq 23">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario23"/>
                  </xsl:when>
                  <xsl:when test=". eq 24">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario24"/>
                  </xsl:when>
                  <xsl:when test=". eq 25">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario25"/>
                  </xsl:when>
                  <xsl:when test=". eq 26">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario26"/>
                  </xsl:when>
                  <xsl:when test=". eq 27">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario27"/>
                  </xsl:when>
                  <xsl:when test=". eq 28">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario28"/>
                  </xsl:when>
                  <xsl:when test=". eq 29">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario29"/>
                  </xsl:when>
                  <xsl:when test=". eq 30">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario30"/>
                  </xsl:when>
                  <xsl:when test=". eq 31">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario31"/>
                  </xsl:when>
                  <xsl:when test=". eq 32">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario32"/>
                  </xsl:when>
                  <xsl:when test=". eq 33">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario33"/>
                  </xsl:when>
                  <xsl:when test=". eq 34">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario34"/>
                  </xsl:when>
                  <xsl:when test=". eq 35">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario35"/>
                  </xsl:when>
                  <xsl:when test=". eq 36">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario36"/>
                  </xsl:when>
                  <xsl:when test=". eq 37">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario37"/>
                  </xsl:when>
                  <xsl:when test=". eq 38">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario38"/>
                  </xsl:when>
                  <xsl:when test=". eq 39">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario39"/>
                  </xsl:when>
                  <xsl:when test=". eq 40">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario40"/>
                  </xsl:when>
                  <xsl:when test=". eq 41">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario41"/>
                  </xsl:when>
                  <xsl:when test=". eq 42">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario42"/>
                  </xsl:when>
                  <xsl:when test=". eq 43">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario43"/>
                  </xsl:when>
                  <xsl:when test=". eq 44">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario44"/>
                  </xsl:when>
                  <xsl:when test=". eq 45">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario45"/>
                  </xsl:when>
                  <xsl:when test=". eq 46">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario46"/>
                  </xsl:when>
                  <xsl:when test=". eq 47">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario47"/>
                  </xsl:when>
                  <xsl:when test=". eq 48">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario48"/>
                  </xsl:when>
                  <xsl:when test=". eq 49">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario49"/>
                  </xsl:when>
                  <xsl:when test=". eq 50">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario50"/>
                  </xsl:when>
                  <xsl:when test=". eq 51">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario51"/>
                  </xsl:when>
                  <xsl:when test=". eq 52">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario52"/>
                  </xsl:when>
                  <xsl:when test=". eq 53">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario53"/>
                  </xsl:when>
                  <xsl:when test=". eq 54">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario54"/>
                  </xsl:when>
                  <xsl:when test=". eq 55">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario55"/>
                  </xsl:when>
                  <xsl:when test=". eq 56">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario56"/>
                  </xsl:when>
                  <xsl:when test=". eq 57">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario57"/>
                  </xsl:when>
                  <xsl:when test=". eq 58">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario58"/>
                  </xsl:when>
                  <xsl:when test=". eq 59">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario59"/>
                  </xsl:when>
                  <xsl:when test=". eq 60">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario60"/>
                  </xsl:when>
                  <xsl:when test=". eq 61">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario61"/>
                  </xsl:when>
                  <xsl:when test=". eq 62">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario62"/>
                  </xsl:when>
                  <xsl:when test=". eq 63">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario63"/>
                  </xsl:when>
                  <xsl:when test=". eq 64">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario64"/>
                  </xsl:when>
                  <xsl:when test=". eq 65">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario65"/>
                  </xsl:when>
                  <xsl:when test=". eq 66">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario66"/>
                  </xsl:when>
                  <xsl:when test=". eq 67">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario67"/>
                  </xsl:when>
                  <xsl:when test=". eq 68">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario68"/>
                  </xsl:when>
                  <xsl:when test=". eq 69">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario69"/>
                  </xsl:when>
                  <xsl:when test=". eq 70">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario70"/>
                  </xsl:when>
                  <xsl:when test=". eq 71">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario71"/>
                  </xsl:when>
                  <xsl:when test=". eq 72">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario72"/>
                  </xsl:when>
                  <xsl:when test=". eq 73">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario73"/>
                  </xsl:when>
                  <xsl:when test=". eq 74">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario74"/>
                  </xsl:when>
                  <xsl:when test=". eq 75">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario75"/>
                  </xsl:when>
                  <xsl:when test=". eq 76">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario76"/>
                  </xsl:when>
                  <xsl:when test=". eq 77">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario77"/>
                  </xsl:when>
                  <xsl:when test=". eq 78">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario78"/>
                  </xsl:when>
                  <xsl:when test=". eq 79">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario79"/>
                  </xsl:when>
                  <xsl:when test=". eq 80">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario80"/>
                  </xsl:when>
                  <xsl:when test=". eq 81">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario81"/>
                  </xsl:when>
                  <xsl:when test=". eq 82">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario82"/>
                  </xsl:when>
                  <xsl:when test=". eq 83">
                     <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario83"/>
                  </xsl:when>
                  <xsl:otherwise>
                     <xsl:message terminate="yes">ERROR: Unhandled scenario invocation</xsl:message>
                  </xsl:otherwise>
               </xsl:choose>
            </xsl:for-each>
         </xsl:element>
      </xsl:result-document>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>when formatting a single copyright year</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario1</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/copyright.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>when formatting a single copyright year</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
               <xsl:attribute name="function" namespace="">fp:collapse-years</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:attribute name="as" namespace="">element()+</xsl:attribute>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>1999</xsl:text>
                  </xsl:element>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable name="Q{urn:x-xspec:compile:impl}param-d145e1-doc" as="document-node()">
               <xsl:document>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>1999</xsl:text>
                  </xsl:element>
               </xsl:document>
            </xsl:variable>
            <xsl:variable xmlns:db="http://docbook.org/ns/docbook"
                           xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d145e1"
                           as="element()+"
                           select="$Q{urn:x-xspec:compile:impl}param-d145e1-doc ! ( node() )"/>
            <xsl:sequence xmlns:db="http://docbook.org/ns/docbook"
                           xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions/private}collapse-years($Q{urn:x-xspec:compile:impl}param-d145e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario1-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario1-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>a single year</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e9-doc"
                     as="document-node()">
         <xsl:document>
            <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
               <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
               <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
               <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                               xmlns:db="http://docbook.org/ns/docbook"
                               xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                               xmlns:x="http://www.jenitennison.com/xslt/xspec"
                               name="class"
                               namespace=""
                               select="'', ''"
                               separator="copyright-years"/>
               <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:db="http://docbook.org/ns/docbook"
                                  xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="year"/>
                  <xsl:text>1999</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:document>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e9"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e9-doc ! ( node() )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e9, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario1-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>a single year</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e9"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario2"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>when formatting a single copyright year range</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario2</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/copyright.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>when formatting a single copyright year range</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
               <xsl:attribute name="function" namespace="">fp:collapse-years</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:attribute name="as" namespace="">element()+</xsl:attribute>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>1999</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2000</xsl:text>
                  </xsl:element>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable name="Q{urn:x-xspec:compile:impl}param-d154e1-doc" as="document-node()">
               <xsl:document>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>1999</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2000</xsl:text>
                  </xsl:element>
               </xsl:document>
            </xsl:variable>
            <xsl:variable xmlns:db="http://docbook.org/ns/docbook"
                           xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d154e1"
                           as="element()+"
                           select="$Q{urn:x-xspec:compile:impl}param-d154e1-doc ! ( node() )"/>
            <xsl:sequence xmlns:db="http://docbook.org/ns/docbook"
                           xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions/private}collapse-years($Q{urn:x-xspec:compile:impl}param-d154e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario2-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario2-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>a single range</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e20-doc"
                     as="document-node()">
         <xsl:document>
            <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
               <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
               <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
               <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                               xmlns:db="http://docbook.org/ns/docbook"
                               xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                               xmlns:x="http://www.jenitennison.com/xslt/xspec"
                               name="class"
                               namespace=""
                               select="'', ''"
                               separator="copyright-years"/>
               <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:db="http://docbook.org/ns/docbook"
                                  xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="year"/>
                  <xsl:text>1999</xsl:text>
               </xsl:element>
               <xsl:text>–</xsl:text>
               <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:db="http://docbook.org/ns/docbook"
                                  xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="year"/>
                  <xsl:text>2000</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:document>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e20"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e20-doc ! ( node() )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e20, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario2-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>a single range</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e20"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario3"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>when formatting a year range and a non-range year</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario3</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/copyright.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>when formatting a year range and a non-range year</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
               <xsl:attribute name="function" namespace="">fp:collapse-years</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:attribute name="as" namespace="">element()+</xsl:attribute>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>1999</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2000</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2020</xsl:text>
                  </xsl:element>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable name="Q{urn:x-xspec:compile:impl}param-d163e1-doc" as="document-node()">
               <xsl:document>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>1999</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2000</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2020</xsl:text>
                  </xsl:element>
               </xsl:document>
            </xsl:variable>
            <xsl:variable xmlns:db="http://docbook.org/ns/docbook"
                           xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d163e1"
                           as="element()+"
                           select="$Q{urn:x-xspec:compile:impl}param-d163e1-doc ! ( node() )"/>
            <xsl:sequence xmlns:db="http://docbook.org/ns/docbook"
                           xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions/private}collapse-years($Q{urn:x-xspec:compile:impl}param-d163e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario3-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario3-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>a range and a year</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e36-doc"
                     as="document-node()">
         <xsl:document>
            <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
               <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
               <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
               <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                               xmlns:db="http://docbook.org/ns/docbook"
                               xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                               xmlns:x="http://www.jenitennison.com/xslt/xspec"
                               name="class"
                               namespace=""
                               select="'', ''"
                               separator="copyright-years"/>
               <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:db="http://docbook.org/ns/docbook"
                                  xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="year"/>
                  <xsl:text>1999</xsl:text>
               </xsl:element>
               <xsl:text>–</xsl:text>
               <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:db="http://docbook.org/ns/docbook"
                                  xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="year"/>
                  <xsl:text>2000</xsl:text>
               </xsl:element>
               <xsl:text>, </xsl:text>
               <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:db="http://docbook.org/ns/docbook"
                                  xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="year"/>
                  <xsl:text>2020</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:document>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e36"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e36-doc ! ( node() )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e36, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario3-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>a range and a year</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e36"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario4"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>when formatting two ranges</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario4</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/copyright.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>when formatting two ranges</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
               <xsl:attribute name="function" namespace="">fp:collapse-years</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:attribute name="as" namespace="">element()+</xsl:attribute>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>1999</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2000</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2001</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2002</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2015</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2016</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2017</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2018</xsl:text>
                  </xsl:element>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable name="Q{urn:x-xspec:compile:impl}param-d172e1-doc" as="document-node()">
               <xsl:document>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>1999</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2000</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2001</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2002</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2015</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2016</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2017</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2018</xsl:text>
                  </xsl:element>
               </xsl:document>
            </xsl:variable>
            <xsl:variable xmlns:db="http://docbook.org/ns/docbook"
                           xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d172e1"
                           as="element()+"
                           select="$Q{urn:x-xspec:compile:impl}param-d172e1-doc ! ( node() )"/>
            <xsl:sequence xmlns:db="http://docbook.org/ns/docbook"
                           xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions/private}collapse-years($Q{urn:x-xspec:compile:impl}param-d172e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario4-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario4-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>two ranges</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e65-doc"
                     as="document-node()">
         <xsl:document>
            <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
               <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
               <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
               <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                               xmlns:db="http://docbook.org/ns/docbook"
                               xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                               xmlns:x="http://www.jenitennison.com/xslt/xspec"
                               name="class"
                               namespace=""
                               select="'', ''"
                               separator="copyright-years"/>
               <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:db="http://docbook.org/ns/docbook"
                                  xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="year"/>
                  <xsl:text>1999</xsl:text>
               </xsl:element>
               <xsl:text>–</xsl:text>
               <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:db="http://docbook.org/ns/docbook"
                                  xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="year"/>
                  <xsl:text>2002</xsl:text>
               </xsl:element>
               <xsl:text>, </xsl:text>
               <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:db="http://docbook.org/ns/docbook"
                                  xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="year"/>
                  <xsl:text>2015</xsl:text>
               </xsl:element>
               <xsl:text>–</xsl:text>
               <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:db="http://docbook.org/ns/docbook"
                                  xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="year"/>
                  <xsl:text>2018</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:document>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e65"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e65-doc ! ( node() )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e65, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario4-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>two ranges</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e65"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario5"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>a range interrupted</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario5</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/copyright.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>a range interrupted</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
               <xsl:attribute name="function" namespace="">fp:collapse-years</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:attribute name="as" namespace="">element()+</xsl:attribute>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2000</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2001</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2002</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2003</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2004</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2006</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2007</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2008</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2009</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2010</xsl:text>
                  </xsl:element>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable name="Q{urn:x-xspec:compile:impl}param-d181e1-doc" as="document-node()">
               <xsl:document>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2000</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2001</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2002</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2003</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2004</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2006</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2007</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2008</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2009</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2010</xsl:text>
                  </xsl:element>
               </xsl:document>
            </xsl:variable>
            <xsl:variable xmlns:db="http://docbook.org/ns/docbook"
                           xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d181e1"
                           as="element()+"
                           select="$Q{urn:x-xspec:compile:impl}param-d181e1-doc ! ( node() )"/>
            <xsl:sequence xmlns:db="http://docbook.org/ns/docbook"
                           xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions/private}collapse-years($Q{urn:x-xspec:compile:impl}param-d181e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario5-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario5-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>two ranges</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e101-doc"
                     as="document-node()">
         <xsl:document>
            <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
               <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
               <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
               <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                               xmlns:db="http://docbook.org/ns/docbook"
                               xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                               xmlns:x="http://www.jenitennison.com/xslt/xspec"
                               name="class"
                               namespace=""
                               select="'', ''"
                               separator="copyright-years"/>
               <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:db="http://docbook.org/ns/docbook"
                                  xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="year"/>
                  <xsl:text>2000</xsl:text>
               </xsl:element>
               <xsl:text>–</xsl:text>
               <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:db="http://docbook.org/ns/docbook"
                                  xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="year"/>
                  <xsl:text>2004</xsl:text>
               </xsl:element>
               <xsl:text>, </xsl:text>
               <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:db="http://docbook.org/ns/docbook"
                                  xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="year"/>
                  <xsl:text>2006</xsl:text>
               </xsl:element>
               <xsl:text>–</xsl:text>
               <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:db="http://docbook.org/ns/docbook"
                                  xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="year"/>
                  <xsl:text>2010</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:document>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e101"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e101-doc ! ( node() )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e101, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario5-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>two ranges</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e101"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario6"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>a range interrupted by a non-numeric year</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario6</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/copyright.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>a range interrupted by a non-numeric year</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
               <xsl:attribute name="function" namespace="">fp:collapse-years</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:attribute name="as" namespace="">element()+</xsl:attribute>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2000</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2001</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2002</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2003</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2004</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>Spoon!</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2006</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2007</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2008</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2009</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2010</xsl:text>
                  </xsl:element>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable name="Q{urn:x-xspec:compile:impl}param-d190e1-doc" as="document-node()">
               <xsl:document>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2000</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2001</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2002</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2003</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2004</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>Spoon!</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2006</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2007</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2008</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2009</xsl:text>
                  </xsl:element>
                  <xsl:element name="db:year" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>2010</xsl:text>
                  </xsl:element>
               </xsl:document>
            </xsl:variable>
            <xsl:variable xmlns:db="http://docbook.org/ns/docbook"
                           xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d190e1"
                           as="element()+"
                           select="$Q{urn:x-xspec:compile:impl}param-d190e1-doc ! ( node() )"/>
            <xsl:sequence xmlns:db="http://docbook.org/ns/docbook"
                           xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions/private}collapse-years($Q{urn:x-xspec:compile:impl}param-d190e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario6-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario6-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>two ranges</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e139-doc"
                     as="document-node()">
         <xsl:document>
            <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
               <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
               <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
               <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                               xmlns:db="http://docbook.org/ns/docbook"
                               xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                               xmlns:x="http://www.jenitennison.com/xslt/xspec"
                               name="class"
                               namespace=""
                               select="'', ''"
                               separator="copyright-years"/>
               <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:db="http://docbook.org/ns/docbook"
                                  xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="year"/>
                  <xsl:text>2000</xsl:text>
               </xsl:element>
               <xsl:text>–</xsl:text>
               <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:db="http://docbook.org/ns/docbook"
                                  xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="year"/>
                  <xsl:text>2004</xsl:text>
               </xsl:element>
               <xsl:text>, </xsl:text>
               <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:db="http://docbook.org/ns/docbook"
                                  xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="year"/>
                  <xsl:text>Spoon!</xsl:text>
               </xsl:element>
               <xsl:text>, </xsl:text>
               <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:db="http://docbook.org/ns/docbook"
                                  xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="year"/>
                  <xsl:text>2006</xsl:text>
               </xsl:element>
               <xsl:text>–</xsl:text>
               <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="fp">http://docbook.org/ns/docbook/functions/private</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:db="http://docbook.org/ns/docbook"
                                  xmlns:fp="http://docbook.org/ns/docbook/functions/private"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="year"/>
                  <xsl:text>2010</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:document>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e139"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e139-doc ! ( node() )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e139, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario6-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>two ranges</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e139"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario7"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When transforming a date of 'today'</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario7</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/dates.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When transforming a date of 'today'</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="href" namespace="">file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/dates.001.xml</xsl:attribute>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:attribute name="select" namespace="">//db:para[@xml:id='today']/db:date</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d198e0-doc"
                        as="document-node()"
                        select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/dates.001.xml')"/>
         <xsl:variable xmlns="http://docbook.org/ns/docbook"
                        xmlns:db="http://docbook.org/ns/docbook"
                        xmlns:h="http://www.w3.org/1999/xhtml"
                        xmlns:m="http://docbook.org/ns/docbook/modes"
                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                        name="Q{urn:x-xspec:compile:impl}context-d198e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d198e0-doc ! ( //db:para[@xml:id='today']/db:date )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d198e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d198e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario7-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario7-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect a verbatim copy</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e161-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/dates.001.html')"/>
      <xsl:variable xmlns:db="http://docbook.org/ns/docbook"
                     xmlns:h="http://www.w3.org/1999/xhtml"
                     xmlns:m="http://docbook.org/ns/docbook/modes"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e161"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e161-doc ! ( //h:p[@id='today']/h:span )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e161, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario7-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect a verbatim copy</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e161"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario8"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When transforming an ISO 8601 date</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario8</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/dates.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When transforming an ISO 8601 date</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="href" namespace="">file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/dates.001.xml</xsl:attribute>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:attribute name="select" namespace="">//db:para[@xml:id='date']/db:date</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d206e0-doc"
                        as="document-node()"
                        select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/dates.001.xml')"/>
         <xsl:variable xmlns="http://docbook.org/ns/docbook"
                        xmlns:db="http://docbook.org/ns/docbook"
                        xmlns:h="http://www.w3.org/1999/xhtml"
                        xmlns:m="http://docbook.org/ns/docbook/modes"
                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                        name="Q{urn:x-xspec:compile:impl}context-d206e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d206e0-doc ! ( //db:para[@xml:id='date']/db:date )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d206e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d206e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario8-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario8-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect a formatted date</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e164-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/dates.001.html')"/>
      <xsl:variable xmlns:db="http://docbook.org/ns/docbook"
                     xmlns:h="http://www.w3.org/1999/xhtml"
                     xmlns:m="http://docbook.org/ns/docbook/modes"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e164"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e164-doc ! ( //h:p[@id='date']/h:span )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e164, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario8-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect a formatted date</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e164"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario9"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When transforming an ISO 8601 date time in the morning</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario9</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/dates.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When transforming an ISO 8601 date time in the morning</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="href" namespace="">file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/dates.001.xml</xsl:attribute>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:attribute name="select" namespace="">//db:para[@xml:id='amtime']/db:date</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d214e0-doc"
                        as="document-node()"
                        select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/dates.001.xml')"/>
         <xsl:variable xmlns="http://docbook.org/ns/docbook"
                        xmlns:db="http://docbook.org/ns/docbook"
                        xmlns:h="http://www.w3.org/1999/xhtml"
                        xmlns:m="http://docbook.org/ns/docbook/modes"
                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                        name="Q{urn:x-xspec:compile:impl}context-d214e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d214e0-doc ! ( //db:para[@xml:id='amtime']/db:date )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d214e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d214e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario9-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario9-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect formatted date time</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e167-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/dates.001.html')"/>
      <xsl:variable xmlns:db="http://docbook.org/ns/docbook"
                     xmlns:h="http://www.w3.org/1999/xhtml"
                     xmlns:m="http://docbook.org/ns/docbook/modes"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e167"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e167-doc ! ( //h:p[@id='amtime']/h:span )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e167, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario9-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect formatted date time</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e167"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario10"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When transforming an ISO 8601 date time in the afternoon</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario10</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/dates.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When transforming an ISO 8601 date time in the afternoon</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="href" namespace="">file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/dates.001.xml</xsl:attribute>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:attribute name="select" namespace="">//db:para[@xml:id='pmtime']/db:date</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d222e0-doc"
                        as="document-node()"
                        select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/dates.001.xml')"/>
         <xsl:variable xmlns="http://docbook.org/ns/docbook"
                        xmlns:db="http://docbook.org/ns/docbook"
                        xmlns:h="http://www.w3.org/1999/xhtml"
                        xmlns:m="http://docbook.org/ns/docbook/modes"
                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                        name="Q{urn:x-xspec:compile:impl}context-d222e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d222e0-doc ! ( //db:para[@xml:id='pmtime']/db:date )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d222e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d222e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario10-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario10-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect a formatted date time</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e170-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/dates.001.html')"/>
      <xsl:variable xmlns:db="http://docbook.org/ns/docbook"
                     xmlns:h="http://www.w3.org/1999/xhtml"
                     xmlns:m="http://docbook.org/ns/docbook/modes"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e170"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e170-doc ! ( //h:p[@id='pmtime']/h:span )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e170, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario10-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect a formatted date time</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e170"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario11"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When transforming a date time with a custom format</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario11</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/dates.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When transforming a date time with a custom format</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="href" namespace="">file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/dates.001.xml</xsl:attribute>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:attribute name="select" namespace="">//db:para[@xml:id='dtformat']/db:date</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d230e0-doc"
                        as="document-node()"
                        select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/dates.001.xml')"/>
         <xsl:variable xmlns="http://docbook.org/ns/docbook"
                        xmlns:db="http://docbook.org/ns/docbook"
                        xmlns:h="http://www.w3.org/1999/xhtml"
                        xmlns:m="http://docbook.org/ns/docbook/modes"
                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                        name="Q{urn:x-xspec:compile:impl}context-d230e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d230e0-doc ! ( //db:para[@xml:id='dtformat']/db:date )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d230e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d230e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario11-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario11-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect the custom format to be used</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e173-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/dates.001.html')"/>
      <xsl:variable xmlns:db="http://docbook.org/ns/docbook"
                     xmlns:h="http://www.w3.org/1999/xhtml"
                     xmlns:m="http://docbook.org/ns/docbook/modes"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e173"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e173-doc ! ( //h:p[@id='dtformat']/h:span )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e173, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario11-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect the custom format to be used</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e173"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario12"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When transforming a french date with a custom format</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario12</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/dates.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When transforming a french date with a custom format</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="href" namespace="">file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/dates.001.xml</xsl:attribute>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:attribute name="select" namespace="">//db:para[@xml:id='dtformat-fr']/db:date</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d238e0-doc"
                        as="document-node()"
                        select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/dates.001.xml')"/>
         <xsl:variable xmlns="http://docbook.org/ns/docbook"
                        xmlns:db="http://docbook.org/ns/docbook"
                        xmlns:h="http://www.w3.org/1999/xhtml"
                        xmlns:m="http://docbook.org/ns/docbook/modes"
                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                        name="Q{urn:x-xspec:compile:impl}context-d238e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d238e0-doc ! ( //db:para[@xml:id='dtformat-fr']/db:date )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d238e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d238e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario12-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario12-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect the result to be in French (maybe)</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e176" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:db="http://docbook.org/ns/docbook"
                                 xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="(starts-with(system-property('xsl:product-version'), 'HE')                    and string(.) = '4:49p.m. / Friday, May 8, 2020')                   or (string(.) = '4:49p.m. / Vendredi, Mai 8, 2020') "
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:db="http://docbook.org/ns/docbook"
                              xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="(starts-with(system-property('xsl:product-version'), 'HE')                    and string(.) = '4:49p.m. / Friday, May 8, 2020')                   or (string(.) = '4:49p.m. / Vendredi, Mai 8, 2020') "
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When transforming a french date with a custom format expect the result to be in French (maybe)'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario12-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect the result to be in French (maybe)</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="db">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">(starts-with(system-property('xsl:product-version'), 'HE')                    and string(.) = '4:49p.m. / Friday, May 8, 2020')                   or (string(.) = '4:49p.m. / Vendredi, Mai 8, 2020') </xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e176"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario13"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When transforming short funcsynopsis elements in ANSI mode</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario13</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/funcsynopsis.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When transforming short funcsynopsis elements in ANSI mode</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="href" namespace="">file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/funcsynopsis.001.xml</xsl:attribute>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:attribute name="select" namespace="">//*[@xml:id='ansi1']</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d251e0-doc"
                        as="document-node()"
                        select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/funcsynopsis.001.xml')"/>
         <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                        xmlns:m="http://docbook.org/ns/docbook/modes"
                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                        name="Q{urn:x-xspec:compile:impl}context-d251e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d251e0-doc ! ( //*[@xml:id='ansi1'] )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d251e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d251e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario13-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario13-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect non-tabular ANSI output</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e180-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/funcsynopsis.001.html')"/>
      <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                     xmlns:m="http://docbook.org/ns/docbook/modes"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e180"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e180-doc ! ( //h:div[@id='ansi1'] )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e180, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario13-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect non-tabular ANSI output</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e180"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario14"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When transforming longer funcsynopsis elements in ANSI mode</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario14</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/funcsynopsis.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When transforming longer funcsynopsis elements in ANSI mode</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="href" namespace="">file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/funcsynopsis.001.xml</xsl:attribute>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:attribute name="select" namespace="">//*[@xml:id='ansi2']</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d259e0-doc"
                        as="document-node()"
                        select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/funcsynopsis.001.xml')"/>
         <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                        xmlns:m="http://docbook.org/ns/docbook/modes"
                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                        name="Q{urn:x-xspec:compile:impl}context-d259e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d259e0-doc ! ( //*[@xml:id='ansi2'] )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d259e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d259e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario14-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario14-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect tabular ANSI output</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e183-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/funcsynopsis.001.html')"/>
      <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                     xmlns:m="http://docbook.org/ns/docbook/modes"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e183"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e183-doc ! ( //h:div[@id='ansi2'] )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e183, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario14-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect tabular ANSI output</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e183"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario15"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When transforming long funcsynopsis elements in ANSI mode</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario15</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/funcsynopsis.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When transforming long funcsynopsis elements in ANSI mode</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="href" namespace="">file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/funcsynopsis.001.xml</xsl:attribute>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:attribute name="select" namespace="">//*[@xml:id='ansi3']</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d267e0-doc"
                        as="document-node()"
                        select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/funcsynopsis.001.xml')"/>
         <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                        xmlns:m="http://docbook.org/ns/docbook/modes"
                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                        name="Q{urn:x-xspec:compile:impl}context-d267e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d267e0-doc ! ( //*[@xml:id='ansi3'] )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d267e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d267e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario15-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario15-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect tabular ANSI output</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e186-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/funcsynopsis.001.html')"/>
      <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                     xmlns:m="http://docbook.org/ns/docbook/modes"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e186"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e186-doc ! ( //h:div[@id='ansi3'] )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e186, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario15-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect tabular ANSI output</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e186"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario16"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When transforming short funcsynopsis elements in K&amp;R mode</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario16</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/funcsynopsis.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When transforming short funcsynopsis elements in K&amp;R mode</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="href" namespace="">file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/funcsynopsis.001.xml</xsl:attribute>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:attribute name="select" namespace="">//*[@xml:id='kr1']</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d275e0-doc"
                        as="document-node()"
                        select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/funcsynopsis.001.xml')"/>
         <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                        xmlns:m="http://docbook.org/ns/docbook/modes"
                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                        name="Q{urn:x-xspec:compile:impl}context-d275e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d275e0-doc ! ( //*[@xml:id='kr1'] )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d275e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d275e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario16-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario16-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect non-tabular K&amp;R output</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e189-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/funcsynopsis.001.html')"/>
      <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                     xmlns:m="http://docbook.org/ns/docbook/modes"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e189"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e189-doc ! ( //h:div[@id='kr1'] )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e189, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario16-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect non-tabular K&amp;R output</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e189"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario17"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When transforming longer funcsynopsis elements in K&amp;R mode</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario17</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/funcsynopsis.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When transforming longer funcsynopsis elements in K&amp;R mode</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="href" namespace="">file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/funcsynopsis.001.xml</xsl:attribute>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:attribute name="select" namespace="">//*[@xml:id='kr2']</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d283e0-doc"
                        as="document-node()"
                        select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/funcsynopsis.001.xml')"/>
         <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                        xmlns:m="http://docbook.org/ns/docbook/modes"
                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                        name="Q{urn:x-xspec:compile:impl}context-d283e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d283e0-doc ! ( //*[@xml:id='kr2'] )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d283e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d283e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario17-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario17-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect tabular K&amp;R output</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e193-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/funcsynopsis.001.html')"/>
      <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                     xmlns:m="http://docbook.org/ns/docbook/modes"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e193"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e193-doc ! ( //h:div[@id='kr2'] )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e193, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario17-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect tabular K&amp;R output</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e193"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario18"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When transforming long funcsynopsis elements in K&amp;R mode</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario18</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/funcsynopsis.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When transforming long funcsynopsis elements in K&amp;R mode</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="href" namespace="">file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/funcsynopsis.001.xml</xsl:attribute>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:attribute name="select" namespace="">//*[@xml:id='kr3']</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d291e0-doc"
                        as="document-node()"
                        select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/funcsynopsis.001.xml')"/>
         <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                        xmlns:m="http://docbook.org/ns/docbook/modes"
                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                        name="Q{urn:x-xspec:compile:impl}context-d291e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d291e0-doc ! ( //*[@xml:id='kr3'] )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d291e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d291e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario18-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario18-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect tabular K&amp;R output</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e196-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/funcsynopsis.001.html')"/>
      <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                     xmlns:m="http://docbook.org/ns/docbook/modes"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e196"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e196-doc ! ( //h:div[@id='kr3'] )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e196, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario18-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect tabular K&amp;R output</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e196"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario19"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>The empty sequence is the length</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario19</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/functions.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>The empty sequence is the length</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
               <xsl:attribute name="function" namespace="">f:spaces</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
                  <xsl:attribute name="select" namespace="">()</xsl:attribute>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d300e1"
                           select="()"/>
            <xsl:sequence xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions}spaces($Q{urn:x-xspec:compile:impl}param-d300e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario19-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario19-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect the empty sequence</xsl:message>
      <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e200"
                     select="()"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e200, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario19-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect the empty sequence</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e200"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario20"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>The length is zero</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario20</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/functions.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>The length is zero</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
               <xsl:attribute name="function" namespace="">f:spaces</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
                  <xsl:attribute name="select" namespace="">0</xsl:attribute>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d309e1"
                           select="0"/>
            <xsl:sequence xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions}spaces($Q{urn:x-xspec:compile:impl}param-d309e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario20-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario20-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect the empty string</xsl:message>
      <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e204"
                     select="''"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e204, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario20-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect the empty string</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e204"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario21"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>The length is negative</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario21</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/functions.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>The length is negative</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
               <xsl:attribute name="function" namespace="">f:spaces</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
                  <xsl:attribute name="select" namespace="">-3</xsl:attribute>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d318e1"
                           select="-3"/>
            <xsl:sequence xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions}spaces($Q{urn:x-xspec:compile:impl}param-d318e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario21-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario21-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect the empty sequence</xsl:message>
      <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e208"
                     select="()"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e208, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario21-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect the empty sequence</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e208"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario22"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>The length is a positive integer (1)</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario22</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/functions.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>The length is a positive integer (1)</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
               <xsl:attribute name="function" namespace="">f:spaces</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
                  <xsl:attribute name="select" namespace="">1</xsl:attribute>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d327e1"
                           select="1"/>
            <xsl:sequence xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions}spaces($Q{urn:x-xspec:compile:impl}param-d327e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario22-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario22-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect a string of that length</xsl:message>
      <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e212"
                     select="' '"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e212, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario22-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect a string of that length</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e212"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario23"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>The length is a positive integer (12)</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario23</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/functions.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>The length is a positive integer (12)</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
               <xsl:attribute name="function" namespace="">f:spaces</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
                  <xsl:attribute name="select" namespace="">12</xsl:attribute>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d336e1"
                           select="12"/>
            <xsl:sequence xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions}spaces($Q{urn:x-xspec:compile:impl}param-d336e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario23-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario23-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect a string of that length</xsl:message>
      <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e216"
                     select="'            '"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e216, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario23-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect a string of that length</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e216"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario24"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>The length is castable to a positive integer</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario24</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/functions.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>The length is castable to a positive integer</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
               <xsl:attribute name="function" namespace="">f:spaces</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
                  <xsl:attribute name="select" namespace="">'3'</xsl:attribute>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d345e1"
                           select="'3'"/>
            <xsl:sequence xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions}spaces($Q{urn:x-xspec:compile:impl}param-d345e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario24-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario24-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect a string of that length</xsl:message>
      <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e220"
                     select="'   '"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e220, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario24-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect a string of that length</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e220"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario25"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>The length isn't numeric'</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario25</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/functions.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>The length isn't numeric'</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
               <xsl:attribute name="function" namespace="">f:spaces</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
                  <xsl:attribute name="select" namespace="">'test'</xsl:attribute>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d354e1"
                           select="'test'"/>
            <xsl:sequence xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions}spaces($Q{urn:x-xspec:compile:impl}param-d354e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario25-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario25-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect a string equal in length to the length of the string value of the length argument</xsl:message>
      <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e224"
                     select="'    '"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e224, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario25-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect a string equal in length to the length of the string value of the length argument</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e224"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario26"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>The length is a sequence of several items'</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario26</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/functions.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>The length is a sequence of several items'</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
               <xsl:attribute name="function" namespace="">f:spaces</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
                  <xsl:attribute name="select" namespace="">('a', 'b', '3')</xsl:attribute>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d363e1"
                           select="('a', 'b', '3')"/>
            <xsl:sequence xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions}spaces($Q{urn:x-xspec:compile:impl}param-d363e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario26-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario26-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect them to be concatenated</xsl:message>
      <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e228"
                     select="'   '"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e228, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario26-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect them to be concatenated</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e228"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario27"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>The length is a sequence of several items'</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario27</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/functions.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>The length is a sequence of several items'</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
               <xsl:attribute name="function" namespace="">f:spaces</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
                  <xsl:attribute name="select" namespace="">('0', '1', '0')</xsl:attribute>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d372e1"
                           select="('0', '1', '0')"/>
            <xsl:sequence xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions}spaces($Q{urn:x-xspec:compile:impl}param-d372e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario27-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario27-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect them to be concatenated</xsl:message>
      <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e232"
                     select="'          '"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e232, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario27-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect them to be concatenated</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e232"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario28"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting an anchor element with an xml:id and roles</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario28</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/inlines.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting an anchor element with an xml:id and roles</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="anchor" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="xml:id"
                                  namespace="http://www.w3.org/XML/1998/namespace"
                                  select="'', ''"
                                  separator="d1e32"/>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="role"
                                  namespace=""
                                  select="'', ''"
                                  separator="a c b"/>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d380e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="anchor" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="xml:id"
                                  namespace="http://www.w3.org/XML/1998/namespace"
                                  select="'', ''"
                                  separator="d1e32"/>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="role"
                                  namespace=""
                                  select="'', ''"
                                  separator="a c b"/>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d380e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d380e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d380e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d380e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario28-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario28-expect2">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario28-expect3">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario28-expect4">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario28-expect5">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario28-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return a single a element</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e240" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="count(/*) = 1 and /h:span"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="count(/*) = 1 and /h:span"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting an anchor element with an xml:id and roles it should return a single a element'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario28-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return a single a element</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">count(/*) = 1 and /h:span</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e240"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario28-expect2"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the xml:id in the id</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e241" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="/h:span/@id = 'd1e32'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="/h:span/@id = 'd1e32'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting an anchor element with an xml:id and roles it should return the xml:id in the id'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario28-expect2</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the xml:id in the id</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">/h:span/@id = 'd1e32'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e241"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario28-expect3"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the roles as classes</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e242" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="/h:span/@class = 'a anchor b c'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="/h:span/@class = 'a anchor b c'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting an anchor element with an xml:id and roles it should return the roles as classes'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario28-expect3</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the roles as classes</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">/h:span/@class = 'a anchor b c'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e242"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario28-expect4"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should not return any other attributes</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e243" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="empty(/*/@* except (/*/@id | /*/@class))"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="empty(/*/@* except (/*/@id | /*/@class))"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting an anchor element with an xml:id and roles it should not return any other attributes'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario28-expect4</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should not return any other attributes</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">empty(/*/@* except (/*/@id | /*/@class))</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e243"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario28-expect5"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should be empty</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e244" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="empty(/*/node())"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="empty(/*/node())"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting an anchor element with an xml:id and roles it should be empty'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario28-expect5</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should be empty</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">empty(/*/node())</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e244"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario29"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting an emphasis element with a bold role</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario29</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/inlines.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting an emphasis element with a bold role</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="emphasis" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="role"
                                  namespace=""
                                  select="'', ''"
                                  separator="bold"/>
                  <xsl:text>This is strongly emphasized</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d421e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="emphasis" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="role"
                                  namespace=""
                                  select="'', ''"
                                  separator="bold"/>
                  <xsl:text>This is strongly emphasized</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d421e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d421e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d421e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d421e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario29-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario29-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return a strong element</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e249-doc"
                     as="document-node()">
         <xsl:document>
            <xsl:element name="strong" namespace="http://www.w3.org/1999/xhtml">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
               <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                               xmlns:h="http://www.w3.org/1999/xhtml"
                               xmlns:m="http://docbook.org/ns/docbook/modes"
                               xmlns:x="http://www.jenitennison.com/xslt/xspec"
                               name="class"
                               namespace=""
                               select="'', ''"
                               separator="bold"/>
               <xsl:text>This is strongly emphasized</xsl:text>
            </xsl:element>
         </xsl:document>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e249"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e249-doc ! ( node() )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e249, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario29-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return a strong element</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e249"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario30"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a code element</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario30</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/inlines.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a code element</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="code" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>This is a code element.</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d429e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="code" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>This is a code element.</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d429e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d429e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d429e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d429e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario30-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario30-expect2">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario30-expect3">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario30-expect4">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario30-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return a single code element</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e256" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="count(/*) = 1 and local-name(/*[1]) = 'code' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="count(/*) = 1 and local-name(/*[1]) = 'code' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a code element it should return a single code element'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario30-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return a single code element</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">count(/*) = 1 and local-name(/*[1]) = 'code' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e256"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario30-expect2"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>the name shouldn't become a class</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e257" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="empty(/*/@class)"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="empty(/*/@class)"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a code element the name shouldn't become a class'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario30-expect2</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>the name shouldn't become a class</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">empty(/*/@class)</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e257"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario30-expect3"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should not return any other attributes</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e258" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="empty(/*/@* except /*/@class)"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="empty(/*/@* except /*/@class)"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a code element it should not return any other attributes'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario30-expect3</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should not return any other attributes</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">empty(/*/@* except /*/@class)</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e258"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario30-expect4"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the correct text</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e259" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select=". = 'This is a code element.'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select=". = 'This is a code element.'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a code element it should return the correct text'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario30-expect4</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the correct text</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">. = 'This is a code element.'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e259"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario31"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a code element with an xml:id and roles</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario31</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/inlines.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a code element with an xml:id and roles</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="code" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="xml:id"
                                  namespace="http://www.w3.org/XML/1998/namespace"
                                  select="'', ''"
                                  separator="d15e0"/>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="role"
                                  namespace=""
                                  select="'', ''"
                                  separator="b a b c"/>
                  <xsl:text>This is a code element.</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d463e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="code" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="xml:id"
                                  namespace="http://www.w3.org/XML/1998/namespace"
                                  select="'', ''"
                                  separator="d15e0"/>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="role"
                                  namespace=""
                                  select="'', ''"
                                  separator="b a b c"/>
                  <xsl:text>This is a code element.</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d463e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d463e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d463e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d463e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario31-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario31-expect2">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario31-expect3">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario31-expect4">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario31-expect5">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario31-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return a single code element</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e264" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="count(/*) = 1 and local-name(/*[1]) = 'code' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="count(/*) = 1 and local-name(/*[1]) = 'code' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a code element with an xml:id and roles it should return a single code element'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario31-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return a single code element</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">count(/*) = 1 and local-name(/*[1]) = 'code' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e264"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario31-expect2"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the xml:id in the id</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e265" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="/*/@id = 'd15e0'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="/*/@id = 'd15e0'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a code element with an xml:id and roles it should return the xml:id in the id'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario31-expect2</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the xml:id in the id</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">/*/@id = 'd15e0'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e265"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario31-expect3"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the roles as classes</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e266" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="/*/@class = 'a b c'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="/*/@class = 'a b c'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a code element with an xml:id and roles it should return the roles as classes'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario31-expect3</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the roles as classes</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">/*/@class = 'a b c'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e266"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario31-expect4"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should not return any other attributes</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e267" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="empty(/*/@* except (/*/@id | /*/@class))"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="empty(/*/@* except (/*/@id | /*/@class))"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a code element with an xml:id and roles it should not return any other attributes'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario31-expect4</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should not return any other attributes</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">empty(/*/@* except (/*/@id | /*/@class))</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e267"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario31-expect5"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the correct text</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e268" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select=". = 'This is a code element.'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select=". = 'This is a code element.'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a code element with an xml:id and roles it should return the correct text'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario31-expect5</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the correct text</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">. = 'This is a code element.'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e268"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario32"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a quote element</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario32</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/inlines.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a quote element</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="quote" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>This is a quote element.</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d504e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="quote" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>This is a quote element.</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d504e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d504e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d504e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d504e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario32-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario32-expect2">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario32-expect3">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario32-expect4">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario32-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return a single q element</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e273" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="count(/*) = 1 and local-name(/*[1]) = 'q' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="count(/*) = 1 and local-name(/*[1]) = 'q' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a quote element it should return a single q element'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario32-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return a single q element</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">count(/*) = 1 and local-name(/*[1]) = 'q' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e273"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario32-expect2"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>the name shouldn't become a class</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e274" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="empty(/*/@class)"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="empty(/*/@class)"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a quote element the name shouldn't become a class'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario32-expect2</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>the name shouldn't become a class</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">empty(/*/@class)</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e274"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario32-expect3"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should not return any other attributes</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e275" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="empty(/*/@* except /*/@class)"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="empty(/*/@* except /*/@class)"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a quote element it should not return any other attributes'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario32-expect3</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should not return any other attributes</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">empty(/*/@* except /*/@class)</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e275"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario32-expect4"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the correct text</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e276" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select=". = 'This is a quote element.'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select=". = 'This is a quote element.'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a quote element it should return the correct text'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario32-expect4</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the correct text</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">. = 'This is a quote element.'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e276"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario33"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a quote element with an xml:id and roles</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario33</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/inlines.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a quote element with an xml:id and roles</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="quote" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="xml:id"
                                  namespace="http://www.w3.org/XML/1998/namespace"
                                  select="'', ''"
                                  separator="d80e0"/>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="role"
                                  namespace=""
                                  select="'', ''"
                                  separator="b a b c"/>
                  <xsl:text>This is a quote element.</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d538e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="quote" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="xml:id"
                                  namespace="http://www.w3.org/XML/1998/namespace"
                                  select="'', ''"
                                  separator="d80e0"/>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="role"
                                  namespace=""
                                  select="'', ''"
                                  separator="b a b c"/>
                  <xsl:text>This is a quote element.</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d538e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d538e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d538e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d538e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario33-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario33-expect2">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario33-expect3">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario33-expect4">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario33-expect5">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario33-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return a single q element</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e281" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="count(/*) = 1 and local-name(/*[1]) = 'q' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="count(/*) = 1 and local-name(/*[1]) = 'q' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a quote element with an xml:id and roles it should return a single q element'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario33-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return a single q element</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">count(/*) = 1 and local-name(/*[1]) = 'q' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e281"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario33-expect2"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the xml:id in the id</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e282" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="/*/@id = 'd80e0'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="/*/@id = 'd80e0'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a quote element with an xml:id and roles it should return the xml:id in the id'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario33-expect2</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the xml:id in the id</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">/*/@id = 'd80e0'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e282"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario33-expect3"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the roles as classes</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e283" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="/*/@class = 'a b c'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="/*/@class = 'a b c'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a quote element with an xml:id and roles it should return the roles as classes'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario33-expect3</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the roles as classes</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">/*/@class = 'a b c'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e283"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario33-expect4"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should not return any other attributes</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e284" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="empty(/*/@* except (/*/@id | /*/@class))"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="empty(/*/@* except (/*/@id | /*/@class))"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a quote element with an xml:id and roles it should not return any other attributes'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario33-expect4</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should not return any other attributes</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">empty(/*/@* except (/*/@id | /*/@class))</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e284"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario33-expect5"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the correct text</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e285" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select=". = 'This is a quote element.'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select=". = 'This is a quote element.'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a quote element with an xml:id and roles it should return the correct text'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario33-expect5</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the correct text</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">. = 'This is a quote element.'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e285"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario34"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a subscript element</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario34</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/inlines.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a subscript element</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="subscript" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>This is a subscript element.</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d579e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="subscript" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>This is a subscript element.</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d579e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d579e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d579e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d579e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario34-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario34-expect2">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario34-expect3">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario34-expect4">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario34-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return a single sub element</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e290" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="count(/*) = 1 and local-name(/*[1]) = 'sub' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="count(/*) = 1 and local-name(/*[1]) = 'sub' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a subscript element it should return a single sub element'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario34-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return a single sub element</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">count(/*) = 1 and local-name(/*[1]) = 'sub' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e290"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario34-expect2"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>the name shouldn't become a class</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e291" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="empty(/*/@class)"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="empty(/*/@class)"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a subscript element the name shouldn't become a class'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario34-expect2</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>the name shouldn't become a class</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">empty(/*/@class)</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e291"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario34-expect3"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should not return any other attributes</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e292" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="empty(/*/@* except /*/@class)"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="empty(/*/@* except /*/@class)"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a subscript element it should not return any other attributes'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario34-expect3</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should not return any other attributes</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">empty(/*/@* except /*/@class)</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e292"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario34-expect4"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the correct text</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e293" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select=". = 'This is a subscript element.'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select=". = 'This is a subscript element.'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a subscript element it should return the correct text'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario34-expect4</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the correct text</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">. = 'This is a subscript element.'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e293"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario35"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a subscript element with an xml:id and roles</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario35</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/inlines.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a subscript element with an xml:id and roles</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="subscript" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="xml:id"
                                  namespace="http://www.w3.org/XML/1998/namespace"
                                  select="'', ''"
                                  separator="d85e0"/>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="role"
                                  namespace=""
                                  select="'', ''"
                                  separator="b a b c"/>
                  <xsl:text>This is a subscript element.</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d613e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="subscript" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="xml:id"
                                  namespace="http://www.w3.org/XML/1998/namespace"
                                  select="'', ''"
                                  separator="d85e0"/>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="role"
                                  namespace=""
                                  select="'', ''"
                                  separator="b a b c"/>
                  <xsl:text>This is a subscript element.</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d613e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d613e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d613e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d613e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario35-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario35-expect2">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario35-expect3">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario35-expect4">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario35-expect5">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario35-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return a single sub element</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e298" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="count(/*) = 1 and local-name(/*[1]) = 'sub' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="count(/*) = 1 and local-name(/*[1]) = 'sub' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a subscript element with an xml:id and roles it should return a single sub element'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario35-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return a single sub element</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">count(/*) = 1 and local-name(/*[1]) = 'sub' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e298"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario35-expect2"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the xml:id in the id</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e299" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="/*/@id = 'd85e0'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="/*/@id = 'd85e0'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a subscript element with an xml:id and roles it should return the xml:id in the id'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario35-expect2</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the xml:id in the id</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">/*/@id = 'd85e0'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e299"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario35-expect3"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the roles as classes</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e300" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="/*/@class = 'a b c'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="/*/@class = 'a b c'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a subscript element with an xml:id and roles it should return the roles as classes'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario35-expect3</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the roles as classes</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">/*/@class = 'a b c'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e300"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario35-expect4"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should not return any other attributes</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e301" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="empty(/*/@* except (/*/@id | /*/@class))"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="empty(/*/@* except (/*/@id | /*/@class))"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a subscript element with an xml:id and roles it should not return any other attributes'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario35-expect4</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should not return any other attributes</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">empty(/*/@* except (/*/@id | /*/@class))</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e301"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario35-expect5"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the correct text</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e302" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select=". = 'This is a subscript element.'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select=". = 'This is a subscript element.'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a subscript element with an xml:id and roles it should return the correct text'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario35-expect5</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the correct text</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">. = 'This is a subscript element.'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e302"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario36"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a superscript element</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario36</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/inlines.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a superscript element</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="superscript" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>This is a superscript element.</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d654e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="superscript" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>This is a superscript element.</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d654e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d654e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d654e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d654e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario36-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario36-expect2">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario36-expect3">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario36-expect4">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario36-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return a single sup element</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e307" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="count(/*) = 1 and local-name(/*[1]) = 'sup' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="count(/*) = 1 and local-name(/*[1]) = 'sup' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a superscript element it should return a single sup element'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario36-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return a single sup element</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">count(/*) = 1 and local-name(/*[1]) = 'sup' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e307"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario36-expect2"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>the name shouldn't become a class</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e308" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="empty(/*/@class)"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="empty(/*/@class)"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a superscript element the name shouldn't become a class'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario36-expect2</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>the name shouldn't become a class</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">empty(/*/@class)</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e308"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario36-expect3"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should not return any other attributes</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e309" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="empty(/*/@* except /*/@class)"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="empty(/*/@* except /*/@class)"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a superscript element it should not return any other attributes'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario36-expect3</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should not return any other attributes</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">empty(/*/@* except /*/@class)</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e309"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario36-expect4"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the correct text</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e310" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select=". = 'This is a superscript element.'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select=". = 'This is a superscript element.'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a superscript element it should return the correct text'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario36-expect4</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the correct text</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">. = 'This is a superscript element.'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e310"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario37"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a superscript element with an xml:id and roles</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario37</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/inlines.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a superscript element with an xml:id and roles</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="superscript" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="xml:id"
                                  namespace="http://www.w3.org/XML/1998/namespace"
                                  select="'', ''"
                                  separator="d86e0"/>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="role"
                                  namespace=""
                                  select="'', ''"
                                  separator="b a b c"/>
                  <xsl:text>This is a superscript element.</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d688e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="superscript" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="xml:id"
                                  namespace="http://www.w3.org/XML/1998/namespace"
                                  select="'', ''"
                                  separator="d86e0"/>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="role"
                                  namespace=""
                                  select="'', ''"
                                  separator="b a b c"/>
                  <xsl:text>This is a superscript element.</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d688e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d688e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d688e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d688e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario37-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario37-expect2">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario37-expect3">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario37-expect4">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario37-expect5">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario37-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return a single sup element</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e315" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="count(/*) = 1 and local-name(/*[1]) = 'sup' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="count(/*) = 1 and local-name(/*[1]) = 'sup' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a superscript element with an xml:id and roles it should return a single sup element'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario37-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return a single sup element</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">count(/*) = 1 and local-name(/*[1]) = 'sup' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e315"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario37-expect2"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the xml:id in the id</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e316" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="/*/@id = 'd86e0'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="/*/@id = 'd86e0'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a superscript element with an xml:id and roles it should return the xml:id in the id'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario37-expect2</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the xml:id in the id</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">/*/@id = 'd86e0'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e316"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario37-expect3"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the roles as classes</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e317" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="/*/@class = 'a b c'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="/*/@class = 'a b c'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a superscript element with an xml:id and roles it should return the roles as classes'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario37-expect3</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the roles as classes</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">/*/@class = 'a b c'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e317"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario37-expect4"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should not return any other attributes</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e318" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="empty(/*/@* except (/*/@id | /*/@class))"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="empty(/*/@* except (/*/@id | /*/@class))"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a superscript element with an xml:id and roles it should not return any other attributes'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario37-expect4</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should not return any other attributes</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">empty(/*/@* except (/*/@id | /*/@class))</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e318"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario37-expect5"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the correct text</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e319" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select=". = 'This is a superscript element.'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select=". = 'This is a superscript element.'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a superscript element with an xml:id and roles it should return the correct text'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario37-expect5</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the correct text</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">. = 'This is a superscript element.'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e319"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario38"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a tag element</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario38</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/inlines.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a tag element</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="tag" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>This is a tag element.</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d729e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="tag" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>This is a tag element.</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d729e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d729e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d729e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d729e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario38-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario38-expect2">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario38-expect3">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario38-expect4">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario38-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return a single code element</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e324" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="count(/*) = 1 and local-name(/*[1]) = 'code' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="count(/*) = 1 and local-name(/*[1]) = 'code' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a tag element it should return a single code element'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario38-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return a single code element</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">count(/*) = 1 and local-name(/*[1]) = 'code' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e324"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario38-expect2"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the DocBook name as the class</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e325" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="/*/@class = 'tag tag-element'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="/*/@class = 'tag tag-element'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a tag element it should return the DocBook name as the class'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario38-expect2</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the DocBook name as the class</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">/*/@class = 'tag tag-element'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e325"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario38-expect3"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should not return any other attributes</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e326" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="empty(/*/@* except /*/@class)"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="empty(/*/@* except /*/@class)"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a tag element it should not return any other attributes'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario38-expect3</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should not return any other attributes</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">empty(/*/@* except /*/@class)</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e326"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario38-expect4"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the correct text</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e327" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select=". = 'This is a tag element.'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select=". = 'This is a tag element.'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a tag element it should return the correct text'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario38-expect4</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the correct text</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">. = 'This is a tag element.'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e327"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario39"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a tag element with an xml:id and roles</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario39</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/inlines.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a tag element with an xml:id and roles</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="tag" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="xml:id"
                                  namespace="http://www.w3.org/XML/1998/namespace"
                                  select="'', ''"
                                  separator="d84e0"/>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="role"
                                  namespace=""
                                  select="'', ''"
                                  separator="b a b c"/>
                  <xsl:text>This is a tag element.</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d763e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="tag" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="xml:id"
                                  namespace="http://www.w3.org/XML/1998/namespace"
                                  select="'', ''"
                                  separator="d84e0"/>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="role"
                                  namespace=""
                                  select="'', ''"
                                  separator="b a b c"/>
                  <xsl:text>This is a tag element.</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d763e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d763e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d763e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d763e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario39-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario39-expect2">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario39-expect3">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario39-expect4">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario39-expect5">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario39-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return a single code element</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e333" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="count(/*) = 1 and local-name(/*[1]) = 'code' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="count(/*) = 1 and local-name(/*[1]) = 'code' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a tag element with an xml:id and roles it should return a single code element'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario39-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return a single code element</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">count(/*) = 1 and local-name(/*[1]) = 'code' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e333"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario39-expect2"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the xml:id in the id</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e334" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="/*/@id = 'd84e0'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="/*/@id = 'd84e0'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a tag element with an xml:id and roles it should return the xml:id in the id'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario39-expect2</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the xml:id in the id</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">/*/@id = 'd84e0'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e334"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario39-expect3"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the roles as classes</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e335" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="/*/@class = 'a b c tag tag-element'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="/*/@class = 'a b c tag tag-element'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a tag element with an xml:id and roles it should return the roles as classes'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario39-expect3</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the roles as classes</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">/*/@class = 'a b c tag tag-element'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e335"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario39-expect4"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should not return any other attributes</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e336" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="empty(/*/@* except (/*/@id | /*/@class))"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="empty(/*/@* except (/*/@id | /*/@class))"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a tag element with an xml:id and roles it should not return any other attributes'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario39-expect4</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should not return any other attributes</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">empty(/*/@* except (/*/@id | /*/@class))</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e336"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario39-expect5"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the correct text</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e337" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select=". = 'This is a tag element.'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select=". = 'This is a tag element.'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a tag element with an xml:id and roles it should return the correct text'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario39-expect5</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the correct text</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">. = 'This is a tag element.'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e337"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario40"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a personname element</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario40</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/inlines.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a personname element</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="personname" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>This is a personname element.</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d804e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="personname" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>This is a personname element.</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d804e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d804e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d804e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d804e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario40-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario40-expect2">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario40-expect3">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario40-expect4">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario40-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return a single span element</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e342" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="count(/*) = 1 and local-name(/*[1]) = 'span' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="count(/*) = 1 and local-name(/*[1]) = 'span' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a personname element it should return a single span element'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario40-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return a single span element</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">count(/*) = 1 and local-name(/*[1]) = 'span' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e342"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario40-expect2"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the DocBook name as the class</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e343" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="/*/@class = 'first-last personname'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="/*/@class = 'first-last personname'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a personname element it should return the DocBook name as the class'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario40-expect2</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the DocBook name as the class</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">/*/@class = 'first-last personname'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e343"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario40-expect3"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should not return any other attributes</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e344" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="empty(/*/@* except /*/@class)"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="empty(/*/@* except /*/@class)"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a personname element it should not return any other attributes'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario40-expect3</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should not return any other attributes</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">empty(/*/@* except /*/@class)</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e344"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario40-expect4"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the correct text</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e345" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select=". = 'This is a personname element.'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select=". = 'This is a personname element.'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a personname element it should return the correct text'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario40-expect4</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the correct text</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">. = 'This is a personname element.'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e345"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario41"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a personname element with an xml:id and roles</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario41</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/inlines.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a personname element with an xml:id and roles</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="personname" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="xml:id"
                                  namespace="http://www.w3.org/XML/1998/namespace"
                                  select="'', ''"
                                  separator="d71e0"/>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="role"
                                  namespace=""
                                  select="'', ''"
                                  separator="b a b c"/>
                  <xsl:text>This is a personname element.</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d838e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="personname" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="xml:id"
                                  namespace="http://www.w3.org/XML/1998/namespace"
                                  select="'', ''"
                                  separator="d71e0"/>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="role"
                                  namespace=""
                                  select="'', ''"
                                  separator="b a b c"/>
                  <xsl:text>This is a personname element.</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d838e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d838e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d838e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d838e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario41-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario41-expect2">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario41-expect3">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario41-expect4">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario41-expect5">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario41-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return a single span element</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e350" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="count(/*) = 1 and local-name(/*[1]) = 'span' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="count(/*) = 1 and local-name(/*[1]) = 'span' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a personname element with an xml:id and roles it should return a single span element'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario41-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return a single span element</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">count(/*) = 1 and local-name(/*[1]) = 'span' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e350"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario41-expect2"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the xml:id in the id</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e351" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="/*/@id = 'd71e0'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="/*/@id = 'd71e0'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a personname element with an xml:id and roles it should return the xml:id in the id'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario41-expect2</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the xml:id in the id</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">/*/@id = 'd71e0'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e351"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario41-expect3"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the roles as classes</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e352" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="/*/@class = 'a b c first-last personname'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="/*/@class = 'a b c first-last personname'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a personname element with an xml:id and roles it should return the roles as classes'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario41-expect3</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the roles as classes</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">/*/@class = 'a b c first-last personname'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e352"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario41-expect4"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should not return any other attributes</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e353" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select="empty(/*/@* except (/*/@id | /*/@class))"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select="empty(/*/@* except (/*/@id | /*/@class))"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a personname element with an xml:id and roles it should not return any other attributes'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario41-expect4</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should not return any other attributes</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">empty(/*/@* except (/*/@id | /*/@class))</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e353"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario41-expect5"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>it should return the correct text</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e354" select="()"><!--expected result--></xsl:variable>
      <!-- wrap $x:result into a document node if possible -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
         <xsl:choose>
            <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
               <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
         <xsl:choose>
            <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
               <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                  <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                                 xmlns:m="http://docbook.org/ns/docbook/modes"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 select=". = 'This is a personname element.'"
                                 version="3"/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:sequence xmlns:h="http://www.w3.org/1999/xhtml"
                              xmlns:m="http://docbook.org/ns/docbook/modes"
                              xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              select=". = 'This is a personname element.'"
                              version="3"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
      <!-- did the test pass? -->
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean">
         <xsl:choose>
            <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
               <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:message terminate="yes">ERROR in x:expect ('When converting a personname element with an xml:id and roles it should return the correct text'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario41-expect5</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>it should return the correct text</xsl:text>
         </xsl:element>
         <xsl:element name="expect-test-wrap" namespace="">
            <xsl:element name="x:expect" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="test" namespace="">. = 'This is a personname element.'</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
            <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
               <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
               <xsl:with-param name="report-name" select="'result'"/>
            </xsl:call-template>
         </xsl:if>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e354"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario42"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When transforming classsynopsis.001</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario42</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/oosynopsis.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When transforming classsynopsis.001</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="href" namespace="">file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/classsynopsis.001.xml</xsl:attribute>
               <xsl:attribute name="select" namespace="">//*[@xml:id='class']</xsl:attribute>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d879e0-doc"
                        as="document-node()"
                        select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/classsynopsis.001.xml')"/>
         <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                        xmlns:m="http://docbook.org/ns/docbook/modes"
                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                        name="Q{urn:x-xspec:compile:impl}context-d879e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d879e0-doc ! ( //*[@xml:id='class'] )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d879e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d879e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario42-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario42-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect a class synopsis</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e358-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/classsynopsis.001.html')"/>
      <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                     xmlns:m="http://docbook.org/ns/docbook/modes"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e358"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e358-doc ! ( //h:*[@id='class'] )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e358, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario42-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect a class synopsis</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e358"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario43"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When transforming methodsynopsis.001</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario43</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/oosynopsis.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When transforming methodsynopsis.001</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="href" namespace="">file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/methodsynopsis.001.xml</xsl:attribute>
               <xsl:attribute name="select" namespace="">//*[@xml:id='class']</xsl:attribute>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d887e0-doc"
                        as="document-node()"
                        select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/methodsynopsis.001.xml')"/>
         <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                        xmlns:m="http://docbook.org/ns/docbook/modes"
                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                        name="Q{urn:x-xspec:compile:impl}context-d887e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d887e0-doc ! ( //*[@xml:id='class'] )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d887e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d887e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario43-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario43-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect a class synopsis</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e361-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/methodsynopsis.001.html')"/>
      <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                     xmlns:m="http://docbook.org/ns/docbook/modes"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e361"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e361-doc ! ( //h:*[@id='class'] )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e361, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario43-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect a class synopsis</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e361"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario44"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When transforming synopsisinfo.001</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario44</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/oosynopsis.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When transforming synopsisinfo.001</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="href" namespace="">file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/synopsisinfo.001.xml</xsl:attribute>
               <xsl:attribute name="select" namespace="">//*[@xml:id='class']</xsl:attribute>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d895e0-doc"
                        as="document-node()"
                        select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/synopsisinfo.001.xml')"/>
         <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                        xmlns:m="http://docbook.org/ns/docbook/modes"
                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                        name="Q{urn:x-xspec:compile:impl}context-d895e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d895e0-doc ! ( //*[@xml:id='class'] )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d895e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d895e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario44-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario44-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect synopses</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e364-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/synopsisinfo.001.html')"/>
      <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                     xmlns:m="http://docbook.org/ns/docbook/modes"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e364"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e364-doc ! ( //h:*[@id='class'] )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e364, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario44-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect synopses</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e364"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario45"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When transforming packagesynopsis.001</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario45</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/oosynopsis.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When transforming packagesynopsis.001</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="href" namespace="">file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/packagesynopsis.001.xml</xsl:attribute>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d903e0-doc"
                        as="document-node()"
                        select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/xml/packagesynopsis.001.xml')"/>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d903e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d903e0-doc ! ( . )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d903e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d903e0"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario45-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario45-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>expect a package synopsis</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e367-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/packagesynopsis.001.html')"/>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e367"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e367-doc ! ( . )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e367, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario45-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>expect a package synopsis</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e367"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario46"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When computing the length 1.0in</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario46</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/units.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When computing the length 1.0in</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
               <xsl:attribute name="function" namespace="">f:parse-length</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
                  <xsl:attribute name="select" namespace="">'1.0in'</xsl:attribute>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d912e1"
                           select="'1.0in'"/>
            <xsl:sequence xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions}parse-length($Q{urn:x-xspec:compile:impl}param-d912e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario46-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario46-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>return the correct parse</xsl:message>
      <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e371"
                     select="map { 'magnitude': 1.0, 'relative': 0.0, 'unit': 'in' }"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e371, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario46-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>return the correct parse</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e371"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario47"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When computing the length 1.0m</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario47</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/units.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When computing the length 1.0m</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
               <xsl:attribute name="function" namespace="">f:parse-length</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
                  <xsl:attribute name="select" namespace="">'1.0m'</xsl:attribute>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d921e1"
                           select="'1.0m'"/>
            <xsl:sequence xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions}parse-length($Q{urn:x-xspec:compile:impl}param-d921e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario47-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario47-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>return the correct parse</xsl:message>
      <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e375"
                     select="map { 'magnitude': 1.0, 'relative': 0.0, 'unit': 'm' }"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e375, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario47-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>return the correct parse</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e375"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario48"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When computing the length 1.0cm</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario48</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/units.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When computing the length 1.0cm</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
               <xsl:attribute name="function" namespace="">f:parse-length</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
                  <xsl:attribute name="select" namespace="">'1.0cm'</xsl:attribute>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d930e1"
                           select="'1.0cm'"/>
            <xsl:sequence xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions}parse-length($Q{urn:x-xspec:compile:impl}param-d930e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario48-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario48-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>return the correct parse</xsl:message>
      <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e379"
                     select="map { 'magnitude': 1.0, 'relative': 0.0, 'unit': 'cm' }"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e379, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario48-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>return the correct parse</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e379"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario49"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When computing the length 1.0mm</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario49</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/units.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When computing the length 1.0mm</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
               <xsl:attribute name="function" namespace="">f:parse-length</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
                  <xsl:attribute name="select" namespace="">'1.0mm'</xsl:attribute>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d939e1"
                           select="'1.0mm'"/>
            <xsl:sequence xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions}parse-length($Q{urn:x-xspec:compile:impl}param-d939e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario49-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario49-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>return the correct parse</xsl:message>
      <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e384"
                     select="map { 'magnitude': 1.0, 'relative': 0.0, 'unit': 'mm' }"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e384, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario49-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>return the correct parse</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e384"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario50"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When computing the length 1.0pc</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario50</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/units.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When computing the length 1.0pc</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
               <xsl:attribute name="function" namespace="">f:parse-length</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
                  <xsl:attribute name="select" namespace="">'1.0pc'</xsl:attribute>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d948e1"
                           select="'1.0pc'"/>
            <xsl:sequence xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions}parse-length($Q{urn:x-xspec:compile:impl}param-d948e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario50-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario50-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>return the correct parse</xsl:message>
      <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e388"
                     select="map { 'magnitude': 1.0, 'relative': 0.0, 'unit': 'pc' }"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e388, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario50-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>return the correct parse</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e388"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario51"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When computing the length 1.0pt</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario51</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/units.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When computing the length 1.0pt</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
               <xsl:attribute name="function" namespace="">f:parse-length</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
                  <xsl:attribute name="select" namespace="">'1.0pt'</xsl:attribute>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d957e1"
                           select="'1.0pt'"/>
            <xsl:sequence xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions}parse-length($Q{urn:x-xspec:compile:impl}param-d957e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario51-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario51-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>return the correct parse</xsl:message>
      <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e392"
                     select="map { 'magnitude': 1.0, 'relative': 0.0, 'unit': 'pt' }"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e392, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario51-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>return the correct parse</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e392"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario52"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When computing the length 3.14barleycorn</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario52</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/units.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When computing the length 3.14barleycorn</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
               <xsl:attribute name="function" namespace="">f:parse-length</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
                  <xsl:attribute name="select" namespace="">'3.14barleycorn'</xsl:attribute>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d966e1"
                           select="'3.14barleycorn'"/>
            <xsl:sequence xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions}parse-length($Q{urn:x-xspec:compile:impl}param-d966e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario52-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario52-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>return the correct parse</xsl:message>
      <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e396"
                     select="map { 'magnitude': 3.14, 'relative': 0.0, 'unit': 'barleycorn' }"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e396, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario52-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>return the correct parse</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e396"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario53"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When computing the length 1.0smoot</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario53</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/units.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When computing the length 1.0smoot</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
               <xsl:attribute name="function" namespace="">f:parse-length</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
                  <xsl:attribute name="select" namespace="">'1.0smoot'</xsl:attribute>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d975e1"
                           select="'1.0smoot'"/>
            <xsl:sequence xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions}parse-length($Q{urn:x-xspec:compile:impl}param-d975e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario53-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario53-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>return the correct parse</xsl:message>
      <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e400"
                     select="map { 'magnitude': $default-length-magnitude,                            'relative': 0.0,                             'unit': $default-length-unit }"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e400, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario53-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>return the correct parse</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e400"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario54"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When computing the length 25%</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario54</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/units.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When computing the length 25%</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
               <xsl:attribute name="function" namespace="">f:parse-length</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
                  <xsl:attribute name="select" namespace="">'25%'</xsl:attribute>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d984e1"
                           select="'25%'"/>
            <xsl:sequence xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions}parse-length($Q{urn:x-xspec:compile:impl}param-d984e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario54-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario54-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>return the correct parse</xsl:message>
      <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e404"
                     select="map { 'magnitude': 25.0, 'relative': 0.0, 'unit': '%' }"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e404, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario54-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>return the correct parse</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e404"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario55"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When computing the length 100%</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario55</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/units.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When computing the length 100%</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
               <xsl:attribute name="function" namespace="">f:parse-length</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
                  <xsl:attribute name="select" namespace="">'100%'</xsl:attribute>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d993e1"
                           select="'100%'"/>
            <xsl:sequence xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions}parse-length($Q{urn:x-xspec:compile:impl}param-d993e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario55-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario55-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>return the correct parse</xsl:message>
      <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e408"
                     select="map { 'magnitude': 100.0, 'relative': 0.0, 'unit': '%' }"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e408, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario55-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>return the correct parse</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e408"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario56"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When computing the length 125%</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario56</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/units.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When computing the length 125%</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
               <xsl:attribute name="function" namespace="">f:parse-length</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
                  <xsl:attribute name="select" namespace="">'125%'</xsl:attribute>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d1002e1"
                           select="'125%'"/>
            <xsl:sequence xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions}parse-length($Q{urn:x-xspec:compile:impl}param-d1002e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario56-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario56-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>return the correct parse</xsl:message>
      <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e412"
                     select="map { 'magnitude': 125.0, 'relative': 0.0, 'unit': '%' }"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e412, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario56-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>return the correct parse</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e412"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario57"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When computing the length 3*+0.5in</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario57</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/units.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When computing the length 3*+0.5in</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
               <xsl:attribute name="function" namespace="">f:parse-length</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
                  <xsl:attribute name="select" namespace="">'3*+0.5in'</xsl:attribute>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d1011e1"
                           select="'3*+0.5in'"/>
            <xsl:sequence xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions}parse-length($Q{urn:x-xspec:compile:impl}param-d1011e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario57-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario57-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>return the correct parse</xsl:message>
      <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e416"
                     select="map { 'magnitude': 0.5, 'unit': 'in', 'relative': 3.0 }"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e416, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario57-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>return the correct parse</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e416"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario58"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When computing the length 75</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario58</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/units.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When computing the length 75</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
               <xsl:attribute name="function" namespace="">f:parse-length</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
                  <xsl:attribute name="select" namespace="">'75'</xsl:attribute>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d1020e1"
                           select="'75'"/>
            <xsl:sequence xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions}parse-length($Q{urn:x-xspec:compile:impl}param-d1020e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario58-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario58-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>return the correct parse</xsl:message>
      <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e420"
                     select="map { 'magnitude': 75, 'relative': 0.0, 'unit': 'px' }"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e420, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario58-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>return the correct parse</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e420"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario59"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When computing the length 2.5*</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario59</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/units.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When computing the length 2.5*</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:call" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
               <xsl:attribute name="function" namespace="">f:parse-length</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="f">http://docbook.org/ns/docbook/functions</xsl:namespace>
                  <xsl:attribute name="select" namespace="">'2.5*'</xsl:attribute>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{urn:x-xspec:compile:impl}param-d1029e1"
                           select="'2.5*'"/>
            <xsl:sequence xmlns:f="http://docbook.org/ns/docbook/functions"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           select="Q{http://docbook.org/ns/docbook/functions}parse-length($Q{urn:x-xspec:compile:impl}param-d1029e1)"/>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario59-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario59-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>return the correct parse</xsl:message>
      <xsl:variable xmlns:f="http://docbook.org/ns/docbook/functions"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e424"
                     select="map { 'magnitude': 0, 'unit': 'px', 'relative': 2.5 }"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e424, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario59-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>return the correct parse</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e424"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario60"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting an address in the raw style</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario60</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting an address in the raw style</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'raw'</xsl:attribute>
               </xsl:element>
               <xsl:element name="address" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1037e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="address" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1037e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1037e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1037e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'raw'"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1037e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario60-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario60-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>you should get all the lines</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e434-doc"
                     as="document-node()">
         <xsl:document>
            <xsl:element name="div" namespace="http://www.w3.org/1999/xhtml">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
               <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                               xmlns:h="http://www.w3.org/1999/xhtml"
                               xmlns:m="http://docbook.org/ns/docbook/modes"
                               xmlns:x="http://www.jenitennison.com/xslt/xspec"
                               name="class"
                               namespace=""
                               select="'', ''"
                               separator="pre-wrap"/>
               <xsl:element name="pre" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="address verbatim"/>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:document>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e434"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e434-doc ! ( node() )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e434, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario60-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>you should get all the lines</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e434"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario61"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a literallayout in the raw style</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario61</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a literallayout in the raw style</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'raw'</xsl:attribute>
               </xsl:element>
               <xsl:element name="literallayout" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1045e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="literallayout" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1045e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1045e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1045e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'raw'"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1045e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario61-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario61-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>you should get all the lines</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e443-doc"
                     as="document-node()">
         <xsl:document>
            <xsl:element name="div" namespace="http://www.w3.org/1999/xhtml">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
               <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                               xmlns:h="http://www.w3.org/1999/xhtml"
                               xmlns:m="http://docbook.org/ns/docbook/modes"
                               xmlns:x="http://www.jenitennison.com/xslt/xspec"
                               name="class"
                               namespace=""
                               select="'', ''"
                               separator="pre-wrap"/>
               <xsl:element name="pre" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="literallayout verbatim"/>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:document>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e443"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e443-doc ! ( node() )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e443, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario61-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>you should get all the lines</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e443"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario62"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a programlisting in the raw style</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario62</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a programlisting in the raw style</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'raw'</xsl:attribute>
               </xsl:element>
               <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1053e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1053e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1053e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1053e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'raw'"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1053e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario62-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario62-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>you should get all the lines</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e452-doc"
                     as="document-node()">
         <xsl:document>
            <xsl:element name="div" namespace="http://www.w3.org/1999/xhtml">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
               <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                               xmlns:h="http://www.w3.org/1999/xhtml"
                               xmlns:m="http://docbook.org/ns/docbook/modes"
                               xmlns:x="http://www.jenitennison.com/xslt/xspec"
                               name="class"
                               namespace=""
                               select="'', ''"
                               separator="pre-wrap"/>
               <xsl:element name="pre" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="language-none numbered programlisting verbatim"/>
                  <xsl:element name="code" namespace="http://www.w3.org/1999/xhtml">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
                  </xsl:element>
               </xsl:element>
            </xsl:element>
         </xsl:document>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e452"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e452-doc ! ( node() )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e452, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario62-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>you should get all the lines</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e452"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario63"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a screen in the raw style</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario63</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a screen in the raw style</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'raw'</xsl:attribute>
               </xsl:element>
               <xsl:element name="screen" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1061e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="screen" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1061e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1061e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1061e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'raw'"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1061e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario63-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario63-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>you should get all the lines</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e462-doc"
                     as="document-node()">
         <xsl:document>
            <xsl:element name="div" namespace="http://www.w3.org/1999/xhtml">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
               <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                               xmlns:h="http://www.w3.org/1999/xhtml"
                               xmlns:m="http://docbook.org/ns/docbook/modes"
                               xmlns:x="http://www.jenitennison.com/xslt/xspec"
                               name="class"
                               namespace=""
                               select="'', ''"
                               separator="pre-wrap"/>
               <xsl:element name="pre" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="screen verbatim"/>
                  <xsl:element name="code" namespace="http://www.w3.org/1999/xhtml">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
                  </xsl:element>
               </xsl:element>
            </xsl:element>
         </xsl:document>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e462"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e462-doc ! ( node() )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e462, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario63-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>you should get all the lines</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e462"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario64"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a synopsis in the raw style</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario64</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a synopsis in the raw style</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'raw'</xsl:attribute>
               </xsl:element>
               <xsl:element name="synopsis" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1069e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="synopsis" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1069e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1069e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1069e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'raw'"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1069e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario64-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario64-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>you should get all the lines</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e472-doc"
                     as="document-node()">
         <xsl:document>
            <xsl:element name="div" namespace="http://www.w3.org/1999/xhtml">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
               <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                               xmlns:h="http://www.w3.org/1999/xhtml"
                               xmlns:m="http://docbook.org/ns/docbook/modes"
                               xmlns:x="http://www.jenitennison.com/xslt/xspec"
                               name="class"
                               namespace=""
                               select="'', ''"
                               separator="pre-wrap"/>
               <xsl:element name="pre" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="synopsis verbatim"/>
                  <xsl:element name="code" namespace="http://www.w3.org/1999/xhtml">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
                  </xsl:element>
               </xsl:element>
            </xsl:element>
         </xsl:document>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e472"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e472-doc ! ( node() )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e472, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario64-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>you should get all the lines</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e472"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario65"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a verbatim with inline markup in the raw style</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario65</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a verbatim with inline markup in the raw style</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'raw'</xsl:attribute>
               </xsl:element>
               <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line </xsl:text>
                  <xsl:element name="emphasis" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>two</xsl:text>
                  </xsl:element>
                  <xsl:text>
Line </xsl:text>
                  <xsl:element name="emphasis" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>end of three
start of four</xsl:text>
                  </xsl:element>
                  <xsl:text>
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1077e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line </xsl:text>
                  <xsl:element name="emphasis" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>two</xsl:text>
                  </xsl:element>
                  <xsl:text>
Line </xsl:text>
                  <xsl:element name="emphasis" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>end of three
start of four</xsl:text>
                  </xsl:element>
                  <xsl:text>
Line five</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1077e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1077e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1077e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'raw'"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1077e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario65-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario65-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>the inline markup should be transformed.</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e488-doc"
                     as="document-node()">
         <xsl:document>
            <xsl:element name="div" namespace="http://www.w3.org/1999/xhtml">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
               <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                               xmlns:h="http://www.w3.org/1999/xhtml"
                               xmlns:m="http://docbook.org/ns/docbook/modes"
                               xmlns:x="http://www.jenitennison.com/xslt/xspec"
                               name="class"
                               namespace=""
                               select="'', ''"
                               separator="pre-wrap"/>
               <xsl:element name="pre" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="language-none numbered programlisting verbatim"/>
                  <xsl:element name="code" namespace="http://www.w3.org/1999/xhtml">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>Line one
Line </xsl:text>
                     <xsl:element name="em" namespace="http://www.w3.org/1999/xhtml">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:text>two</xsl:text>
                     </xsl:element>
                     <xsl:text>
Line </xsl:text>
                     <xsl:element name="em" namespace="http://www.w3.org/1999/xhtml">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:text>end of three
start of four</xsl:text>
                     </xsl:element>
                     <xsl:text>
Line five</xsl:text>
                  </xsl:element>
               </xsl:element>
            </xsl:element>
         </xsl:document>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e488"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e488-doc ! ( node() )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e488, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario65-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>the inline markup should be transformed.</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e488"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario66"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting an address in the plain style</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario66</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting an address in the plain style</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'plain'</xsl:attribute>
               </xsl:element>
               <xsl:element name="address" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1085e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="address" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1085e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1085e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1085e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'plain'"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1085e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario66-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario66-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>you should get all the lines</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e505-doc"
                     as="document-node()">
         <xsl:document>
            <xsl:element name="div" namespace="http://www.w3.org/1999/xhtml">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
               <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                               xmlns:h="http://www.w3.org/1999/xhtml"
                               xmlns:m="http://docbook.org/ns/docbook/modes"
                               xmlns:x="http://www.jenitennison.com/xslt/xspec"
                               name="class"
                               namespace=""
                               select="'', ''"
                               separator="pre-wrap"/>
               <xsl:element name="pre" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="address verbatim"/>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:document>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e505"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e505-doc ! ( node() )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e505, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario66-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>you should get all the lines</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e505"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario67"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a literallayout in the plain style</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario67</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a literallayout in the plain style</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'plain'</xsl:attribute>
               </xsl:element>
               <xsl:element name="literallayout" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1093e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="literallayout" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1093e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1093e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1093e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'plain'"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1093e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario67-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario67-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>you should get all the lines</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e514-doc"
                     as="document-node()">
         <xsl:document>
            <xsl:element name="div" namespace="http://www.w3.org/1999/xhtml">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
               <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                               xmlns:h="http://www.w3.org/1999/xhtml"
                               xmlns:m="http://docbook.org/ns/docbook/modes"
                               xmlns:x="http://www.jenitennison.com/xslt/xspec"
                               name="class"
                               namespace=""
                               select="'', ''"
                               separator="pre-wrap"/>
               <xsl:element name="pre" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="literallayout verbatim"/>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:document>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e514"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e514-doc ! ( node() )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e514, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario67-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>you should get all the lines</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e514"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario68"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a programlisting in the plain style</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario68</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a programlisting in the plain style</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'plain'</xsl:attribute>
               </xsl:element>
               <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1101e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1101e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1101e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1101e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'plain'"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1101e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario68-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario68-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>you should get all the lines</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e523-doc"
                     as="document-node()">
         <xsl:document>
            <xsl:element name="div" namespace="http://www.w3.org/1999/xhtml">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
               <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                               xmlns:h="http://www.w3.org/1999/xhtml"
                               xmlns:m="http://docbook.org/ns/docbook/modes"
                               xmlns:x="http://www.jenitennison.com/xslt/xspec"
                               name="class"
                               namespace=""
                               select="'', ''"
                               separator="pre-wrap"/>
               <xsl:element name="pre" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="language-none numbered programlisting verbatim"/>
                  <xsl:element name="code" namespace="http://www.w3.org/1999/xhtml">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
                  </xsl:element>
               </xsl:element>
            </xsl:element>
         </xsl:document>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e523"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e523-doc ! ( node() )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e523, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario68-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>you should get all the lines</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e523"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario69"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a screen in the plain style</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario69</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a screen in the plain style</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'plain'</xsl:attribute>
               </xsl:element>
               <xsl:element name="screen" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1109e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="screen" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1109e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1109e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1109e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'plain'"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1109e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario69-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario69-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>you should get all the lines</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e533-doc"
                     as="document-node()">
         <xsl:document>
            <xsl:element name="div" namespace="http://www.w3.org/1999/xhtml">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
               <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                               xmlns:h="http://www.w3.org/1999/xhtml"
                               xmlns:m="http://docbook.org/ns/docbook/modes"
                               xmlns:x="http://www.jenitennison.com/xslt/xspec"
                               name="class"
                               namespace=""
                               select="'', ''"
                               separator="pre-wrap"/>
               <xsl:element name="pre" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="screen verbatim"/>
                  <xsl:element name="code" namespace="http://www.w3.org/1999/xhtml">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
                  </xsl:element>
               </xsl:element>
            </xsl:element>
         </xsl:document>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e533"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e533-doc ! ( node() )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e533, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario69-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>you should get all the lines</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e533"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario70"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a synopsis in the plain style</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario70</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a synopsis in the plain style</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'plain'</xsl:attribute>
               </xsl:element>
               <xsl:element name="synopsis" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1117e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="synopsis" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1117e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1117e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1117e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'plain'"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1117e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario70-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario70-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>you should get all the lines</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e544-doc"
                     as="document-node()">
         <xsl:document>
            <xsl:element name="div" namespace="http://www.w3.org/1999/xhtml">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
               <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                               xmlns:h="http://www.w3.org/1999/xhtml"
                               xmlns:m="http://docbook.org/ns/docbook/modes"
                               xmlns:x="http://www.jenitennison.com/xslt/xspec"
                               name="class"
                               namespace=""
                               select="'', ''"
                               separator="pre-wrap"/>
               <xsl:element name="pre" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="synopsis verbatim"/>
                  <xsl:element name="code" namespace="http://www.w3.org/1999/xhtml">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
                  </xsl:element>
               </xsl:element>
            </xsl:element>
         </xsl:document>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e544"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e544-doc ! ( node() )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e544, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario70-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>you should get all the lines</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e544"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario71"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a verbatim with inline markup in the plain style</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario71</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a verbatim with inline markup in the plain style</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="select" namespace="">/*/*</xsl:attribute>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'plain'</xsl:attribute>
               </xsl:element>
               <xsl:element name="div" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="xml:space"
                                  namespace="http://www.w3.org/XML/1998/namespace"
                                  select="'', ''"
                                  separator="preserve"/>
                  <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>Line one
Line </xsl:text>
                     <xsl:element name="emphasis" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:text>two</xsl:text>
                     </xsl:element>
                     <xsl:text>
Line </xsl:text>
                     <xsl:element name="emphasis" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:text>end of three
start of four</xsl:text>
                     </xsl:element>
                     <xsl:text>
Line five</xsl:text>
                  </xsl:element>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1125e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="div" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="xml:space"
                                  namespace="http://www.w3.org/XML/1998/namespace"
                                  select="'', ''"
                                  separator="preserve"/>
                  <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>Line one
Line </xsl:text>
                     <xsl:element name="emphasis" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:text>two</xsl:text>
                     </xsl:element>
                     <xsl:text>
Line </xsl:text>
                     <xsl:element name="emphasis" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:text>end of three
start of four</xsl:text>
                     </xsl:element>
                     <xsl:text>
Line five</xsl:text>
                  </xsl:element>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable xmlns="http://docbook.org/ns/docbook"
                        xmlns:h="http://www.w3.org/1999/xhtml"
                        xmlns:m="http://docbook.org/ns/docbook/modes"
                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                        name="Q{urn:x-xspec:compile:impl}context-d1125e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1125e0-doc ! ( /*/* )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1125e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'plain'"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1125e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario71-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario71-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>the inline markup should be transformed.</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e562-doc"
                     as="document-node()">
         <xsl:document>
            <xsl:element name="div" namespace="http://www.w3.org/1999/xhtml">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
               <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                               xmlns:h="http://www.w3.org/1999/xhtml"
                               xmlns:m="http://docbook.org/ns/docbook/modes"
                               xmlns:x="http://www.jenitennison.com/xslt/xspec"
                               name="class"
                               namespace=""
                               select="'', ''"
                               separator="pre-wrap"/>
               <xsl:element name="pre" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="language-none numbered programlisting verbatim"/>
                  <xsl:element name="code" namespace="http://www.w3.org/1999/xhtml">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>Line one
Line </xsl:text>
                     <xsl:element name="em" namespace="http://www.w3.org/1999/xhtml">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:text>two</xsl:text>
                     </xsl:element>
                     <xsl:text>
Line </xsl:text>
                     <xsl:element name="em" namespace="http://www.w3.org/1999/xhtml">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:text>end of three</xsl:text>
                     </xsl:element>
                     <xsl:text>
</xsl:text>
                     <xsl:element name="em" namespace="http://www.w3.org/1999/xhtml">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:text>start of four</xsl:text>
                     </xsl:element>
                     <xsl:text>
Line five</xsl:text>
                  </xsl:element>
               </xsl:element>
            </xsl:element>
         </xsl:document>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e562"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e562-doc ! ( node() )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e562, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario71-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>the inline markup should be transformed.</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e562"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario72"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting an address in the lines style</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario72</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting an address in the lines style</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'lines'</xsl:attribute>
               </xsl:element>
               <xsl:element name="address" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1133e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="address" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1133e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1133e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1133e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'lines'"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1133e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario72-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario72-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>you should get all the lines</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e582-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/verbatim-xspec-001.xml')"/>
      <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                     xmlns:m="http://docbook.org/ns/docbook/modes"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e582"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e582-doc ! ( /* )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e582, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario72-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>you should get all the lines</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e582"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario73"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a literallayout in the lines style</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario73</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a literallayout in the lines style</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'lines'</xsl:attribute>
               </xsl:element>
               <xsl:element name="literallayout" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1141e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="literallayout" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1141e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1141e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1141e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'lines'"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1141e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario73-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario73-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>you should get all the lines</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e588-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/verbatim-xspec-002.xml')"/>
      <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                     xmlns:m="http://docbook.org/ns/docbook/modes"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e588"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e588-doc ! ( /* )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e588, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario73-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>you should get all the lines</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e588"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario74"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a programlisting in the lines style</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario74</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a programlisting in the lines style</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'lines'</xsl:attribute>
               </xsl:element>
               <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1149e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1149e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1149e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1149e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'lines'"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1149e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario74-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario74-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>you should get all the lines</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e594-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/verbatim-xspec-003.xml')"/>
      <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                     xmlns:m="http://docbook.org/ns/docbook/modes"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e594"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e594-doc ! ( /* )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e594, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario74-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>you should get all the lines</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e594"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario75"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a screen in the lines style</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario75</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a screen in the lines style</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'lines'</xsl:attribute>
               </xsl:element>
               <xsl:element name="screen" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1157e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="screen" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1157e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1157e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1157e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'lines'"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1157e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario75-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario75-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>you should get all the lines</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e600-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/verbatim-xspec-004.xml')"/>
      <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                     xmlns:m="http://docbook.org/ns/docbook/modes"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e600"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e600-doc ! ( /* )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e600, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario75-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>you should get all the lines</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e600"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario76"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a synopsis in the lines style</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario76</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a synopsis in the lines style</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'lines'</xsl:attribute>
               </xsl:element>
               <xsl:element name="synopsis" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1165e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="synopsis" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1165e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1165e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1165e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'lines'"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1165e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario76-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario76-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>you should get all the lines</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e606-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/verbatim-xspec-005.xml')"/>
      <xsl:variable xmlns="http://www.w3.org/1999/xhtml"
                     xmlns:h="http://www.w3.org/1999/xhtml"
                     xmlns:m="http://docbook.org/ns/docbook/modes"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e606"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e606-doc ! ( /* )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e606, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario76-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>you should get all the lines</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e606"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario77"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a verbatim with inline markup in the lines style</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario77</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a verbatim with inline markup in the lines style</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'lines'</xsl:attribute>
               </xsl:element>
               <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line </xsl:text>
                  <xsl:element name="emphasis" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>two</xsl:text>
                  </xsl:element>
                  <xsl:text>
Line </xsl:text>
                  <xsl:element name="emphasis" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>end of three
Start of line</xsl:text>
                  </xsl:element>
                  <xsl:text> four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1173e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line </xsl:text>
                  <xsl:element name="emphasis" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>two</xsl:text>
                  </xsl:element>
                  <xsl:text>
Line </xsl:text>
                  <xsl:element name="emphasis" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:text>end of three
Start of line</xsl:text>
                  </xsl:element>
                  <xsl:text> four
Line five</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1173e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1173e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1173e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'lines'"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1173e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario77-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario77-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>the inline markup should not cross line boundaries.</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e618-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/verbatim-xspec-006.xml')"/>
      <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                     xmlns:m="http://docbook.org/ns/docbook/modes"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e618"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e618-doc ! ( /* )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e618, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario77-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>the inline markup should not cross line boundaries.</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e618"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario78"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When converting a verbatim with inline markup in the lines style</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario78</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When converting a verbatim with inline markup in the lines style</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'lines'</xsl:attribute>
               </xsl:element>
               <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line </xsl:text>
                  <xsl:element name="emphasis" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                     xmlns:h="http://www.w3.org/1999/xhtml"
                                     xmlns:m="http://docbook.org/ns/docbook/modes"
                                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                     name="xml:id"
                                     namespace="http://www.w3.org/XML/1998/namespace"
                                     select="'', ''"
                                     separator="two"/>
                     <xsl:text>two</xsl:text>
                  </xsl:element>
                  <xsl:text>
Line </xsl:text>
                  <xsl:element name="emphasis" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                     xmlns:h="http://www.w3.org/1999/xhtml"
                                     xmlns:m="http://docbook.org/ns/docbook/modes"
                                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                     name="xml:id"
                                     namespace="http://www.w3.org/XML/1998/namespace"
                                     select="'', ''"
                                     separator="three"/>
                     <xsl:text>end of three
Start of line</xsl:text>
                  </xsl:element>
                  <xsl:text> four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1181e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line </xsl:text>
                  <xsl:element name="emphasis" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                     xmlns:h="http://www.w3.org/1999/xhtml"
                                     xmlns:m="http://docbook.org/ns/docbook/modes"
                                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                     name="xml:id"
                                     namespace="http://www.w3.org/XML/1998/namespace"
                                     select="'', ''"
                                     separator="two"/>
                     <xsl:text>two</xsl:text>
                  </xsl:element>
                  <xsl:text>
Line </xsl:text>
                  <xsl:element name="emphasis" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                     xmlns:h="http://www.w3.org/1999/xhtml"
                                     xmlns:m="http://docbook.org/ns/docbook/modes"
                                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                     name="xml:id"
                                     namespace="http://www.w3.org/XML/1998/namespace"
                                     select="'', ''"
                                     separator="three"/>
                     <xsl:text>end of three
Start of line</xsl:text>
                  </xsl:element>
                  <xsl:text> four
Line five</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1181e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1181e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1181e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'lines'"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1181e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario78-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario78-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>ID attributes should not be repeated.</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e630-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/verbatim-xspec-007.xml')"/>
      <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                     xmlns:m="http://docbook.org/ns/docbook/modes"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e630"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e630-doc ! ( /* )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e630, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario78-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>ID attributes should not be repeated.</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e630"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario79"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When callouts are added to a verbatim element</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario79</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When callouts are added to a verbatim element</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'lines'</xsl:attribute>
               </xsl:element>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">inject</xsl:attribute>
                  <xsl:attribute name="as" namespace="">element()</xsl:attribute>
                  <xsl:element name="areaspec" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="1 1"/>
                        <xsl:text>①</xsl:text>
                     </xsl:element>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="2 5"/>
                        <xsl:text>②</xsl:text>
                     </xsl:element>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="3 20"/>
                        <xsl:text>③</xsl:text>
                     </xsl:element>
                  </xsl:element>
               </xsl:element>
               <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1189e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1189e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1189e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1189e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'lines'"/>
            <xsl:variable name="Q{urn:x-xspec:compile:impl}param-d1189e2-doc"
                           as="document-node()">
               <xsl:document>
                  <xsl:element name="areaspec" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="1 1"/>
                        <xsl:text>①</xsl:text>
                     </xsl:element>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="2 5"/>
                        <xsl:text>②</xsl:text>
                     </xsl:element>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="3 20"/>
                        <xsl:text>③</xsl:text>
                     </xsl:element>
                  </xsl:element>
               </xsl:document>
            </xsl:variable>
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}inject"
                           as="element()"
                           select="$Q{urn:x-xspec:compile:impl}param-d1189e2-doc ! ( node() )"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1189e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}inject"
                                select="$Q{}inject"
                                as="element()"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario79-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario79-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>they should appear in the output</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e644-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/verbatim-xspec-008.xml')"/>
      <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                     xmlns:m="http://docbook.org/ns/docbook/modes"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e644"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e644-doc ! ( /* )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e644, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario79-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>they should appear in the output</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e644"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario80"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When callouts are added to a verbatim element</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario80</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When callouts are added to a verbatim element</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'lines'</xsl:attribute>
               </xsl:element>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">inject</xsl:attribute>
                  <xsl:attribute name="as" namespace="">element()</xsl:attribute>
                  <xsl:element name="areaspec" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="1 1"/>
                        <xsl:text>①</xsl:text>
                     </xsl:element>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="2 5"/>
                        <xsl:text>②</xsl:text>
                     </xsl:element>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="8 8"/>
                        <xsl:text>③</xsl:text>
                     </xsl:element>
                  </xsl:element>
               </xsl:element>
               <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1197e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1197e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1197e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1197e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'lines'"/>
            <xsl:variable name="Q{urn:x-xspec:compile:impl}param-d1197e2-doc"
                           as="document-node()">
               <xsl:document>
                  <xsl:element name="areaspec" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="1 1"/>
                        <xsl:text>①</xsl:text>
                     </xsl:element>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="2 5"/>
                        <xsl:text>②</xsl:text>
                     </xsl:element>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="8 8"/>
                        <xsl:text>③</xsl:text>
                     </xsl:element>
                  </xsl:element>
               </xsl:document>
            </xsl:variable>
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}inject"
                           as="element()"
                           select="$Q{urn:x-xspec:compile:impl}param-d1197e2-doc ! ( node() )"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1197e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}inject"
                                select="$Q{}inject"
                                as="element()"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario80-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario80-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>they can extend the listing</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e659-doc"
                     as="document-node()"
                     select="doc('file:/home/runner/work/xslTNG/xslTNG/src/test/resources/expected/verbatim-xspec-009.xml')"/>
      <xsl:variable xmlns:h="http://www.w3.org/1999/xhtml"
                     xmlns:m="http://docbook.org/ns/docbook/modes"
                     xmlns:x="http://www.jenitennison.com/xslt/xspec"
                     name="Q{urn:x-xspec:compile:impl}expect-d142e659"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e659-doc ! ( /* )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e659, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario80-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>they can extend the listing</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e659"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario81"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When callouts are added to a verbatim element</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario81</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When callouts are added to a verbatim element</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'plain'</xsl:attribute>
               </xsl:element>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">inject</xsl:attribute>
                  <xsl:attribute name="as" namespace="">element()</xsl:attribute>
                  <xsl:element name="areaspec" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="1 1"/>
                        <xsl:text>①</xsl:text>
                     </xsl:element>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="2 5"/>
                        <xsl:text>②</xsl:text>
                     </xsl:element>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="3 20"/>
                        <xsl:text>③</xsl:text>
                     </xsl:element>
                  </xsl:element>
               </xsl:element>
               <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1205e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1205e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1205e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1205e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'plain'"/>
            <xsl:variable name="Q{urn:x-xspec:compile:impl}param-d1205e2-doc"
                           as="document-node()">
               <xsl:document>
                  <xsl:element name="areaspec" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="1 1"/>
                        <xsl:text>①</xsl:text>
                     </xsl:element>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="2 5"/>
                        <xsl:text>②</xsl:text>
                     </xsl:element>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="3 20"/>
                        <xsl:text>③</xsl:text>
                     </xsl:element>
                  </xsl:element>
               </xsl:document>
            </xsl:variable>
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}inject"
                           as="element()"
                           select="$Q{urn:x-xspec:compile:impl}param-d1205e2-doc ! ( node() )"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1205e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}inject"
                                select="$Q{}inject"
                                as="element()"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario81-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario81-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>plain mode also works</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e673-doc"
                     as="document-node()">
         <xsl:document>
            <xsl:element name="div" namespace="http://www.w3.org/1999/xhtml">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
               <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                               xmlns:h="http://www.w3.org/1999/xhtml"
                               xmlns:m="http://docbook.org/ns/docbook/modes"
                               xmlns:x="http://www.jenitennison.com/xslt/xspec"
                               name="class"
                               namespace=""
                               select="'', ''"
                               separator="pre-wrap"/>
               <xsl:element name="pre" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="language-none numbered programlisting verbatim"/>
                  <xsl:element name="code" namespace="http://www.w3.org/1999/xhtml">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:element name="a" namespace="http://www.w3.org/1999/xhtml">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="id"
                                        namespace=""
                                        select="'', ''"
                                        separator="R_area1"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="class"
                                        namespace=""
                                        select="'', ''"
                                        separator="callout-bug linecolumn"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="db-line"
                                        namespace=""
                                        select="'', ''"
                                        separator="1"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="db-column"
                                        namespace=""
                                        select="'', ''"
                                        separator="1"/>
                        <xsl:text>①</xsl:text>
                     </xsl:element>
                     <xsl:text>Line one
Line</xsl:text>
                     <xsl:element name="a" namespace="http://www.w3.org/1999/xhtml">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="id"
                                        namespace=""
                                        select="'', ''"
                                        separator="R_area2"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="class"
                                        namespace=""
                                        select="'', ''"
                                        separator="callout-bug linecolumn"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="db-line"
                                        namespace=""
                                        select="'', ''"
                                        separator="2"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="db-column"
                                        namespace=""
                                        select="'', ''"
                                        separator="5"/>
                        <xsl:text>②</xsl:text>
                     </xsl:element>
                     <xsl:text> two
Line three         </xsl:text>
                     <xsl:element name="a" namespace="http://www.w3.org/1999/xhtml">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="id"
                                        namespace=""
                                        select="'', ''"
                                        separator="R_area3"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="class"
                                        namespace=""
                                        select="'', ''"
                                        separator="callout-bug linecolumn"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="db-line"
                                        namespace=""
                                        select="'', ''"
                                        separator="3"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="db-column"
                                        namespace=""
                                        select="'', ''"
                                        separator="20"/>
                        <xsl:text>③</xsl:text>
                     </xsl:element>
                     <xsl:text>
Line four
Line five</xsl:text>
                  </xsl:element>
               </xsl:element>
            </xsl:element>
         </xsl:document>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e673"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e673-doc ! ( node() )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e673, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario81-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>plain mode also works</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e673"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario82"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When callouts are added to a verbatim element</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario82</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When callouts are added to a verbatim element</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'plain'</xsl:attribute>
               </xsl:element>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">inject</xsl:attribute>
                  <xsl:attribute name="as" namespace="">element()</xsl:attribute>
                  <xsl:element name="areaspec" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="1 1"/>
                        <xsl:element name="a" namespace="http://www.w3.org/1999/xhtml">
                           <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                           <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                           <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                           <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                           xmlns:h="http://www.w3.org/1999/xhtml"
                                           xmlns:m="http://docbook.org/ns/docbook/modes"
                                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                           name="name"
                                           namespace=""
                                           select="'', ''"
                                           separator="one"/>
                           <xsl:text>①</xsl:text>
                        </xsl:element>
                     </xsl:element>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="2 5"/>
                        <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
                           <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                           <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                           <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                           <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                           xmlns:h="http://www.w3.org/1999/xhtml"
                                           xmlns:m="http://docbook.org/ns/docbook/modes"
                                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                           name="id"
                                           namespace=""
                                           select="'', ''"
                                           separator="two"/>
                           <xsl:text>②</xsl:text>
                        </xsl:element>
                     </xsl:element>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="3 20"/>
                        <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
                           <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                           <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                           <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                           <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                           xmlns:h="http://www.w3.org/1999/xhtml"
                                           xmlns:m="http://docbook.org/ns/docbook/modes"
                                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                           name="id"
                                           namespace=""
                                           select="'', ''"
                                           separator="three"/>
                           <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                           xmlns:h="http://www.w3.org/1999/xhtml"
                                           xmlns:m="http://docbook.org/ns/docbook/modes"
                                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                           name="class"
                                           namespace=""
                                           select="'', ''"
                                           separator="callout"/>
                           <xsl:text>③</xsl:text>
                        </xsl:element>
                     </xsl:element>
                  </xsl:element>
               </xsl:element>
               <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1213e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:text>Line one
Line two
Line three
Line four
Line five</xsl:text>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1213e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1213e0-doc ! ( node() )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1213e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'plain'"/>
            <xsl:variable name="Q{urn:x-xspec:compile:impl}param-d1213e2-doc"
                           as="document-node()">
               <xsl:document>
                  <xsl:element name="areaspec" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="1 1"/>
                        <xsl:element name="a" namespace="http://www.w3.org/1999/xhtml">
                           <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                           <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                           <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                           <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                           xmlns:h="http://www.w3.org/1999/xhtml"
                                           xmlns:m="http://docbook.org/ns/docbook/modes"
                                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                           name="name"
                                           namespace=""
                                           select="'', ''"
                                           separator="one"/>
                           <xsl:text>①</xsl:text>
                        </xsl:element>
                     </xsl:element>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="2 5"/>
                        <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
                           <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                           <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                           <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                           <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                           xmlns:h="http://www.w3.org/1999/xhtml"
                                           xmlns:m="http://docbook.org/ns/docbook/modes"
                                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                           name="id"
                                           namespace=""
                                           select="'', ''"
                                           separator="two"/>
                           <xsl:text>②</xsl:text>
                        </xsl:element>
                     </xsl:element>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="3 20"/>
                        <xsl:element name="span" namespace="http://www.w3.org/1999/xhtml">
                           <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                           <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                           <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                           <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                           xmlns:h="http://www.w3.org/1999/xhtml"
                                           xmlns:m="http://docbook.org/ns/docbook/modes"
                                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                           name="id"
                                           namespace=""
                                           select="'', ''"
                                           separator="three"/>
                           <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                           xmlns:h="http://www.w3.org/1999/xhtml"
                                           xmlns:m="http://docbook.org/ns/docbook/modes"
                                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                           name="class"
                                           namespace=""
                                           select="'', ''"
                                           separator="callout"/>
                           <xsl:text>③</xsl:text>
                        </xsl:element>
                     </xsl:element>
                  </xsl:element>
               </xsl:document>
            </xsl:variable>
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}inject"
                           as="element()"
                           select="$Q{urn:x-xspec:compile:impl}param-d1213e2-doc ! ( node() )"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1213e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}inject"
                                select="$Q{}inject"
                                as="element()"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario82-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario82-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>markup can also be inserted</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e702-doc"
                     as="document-node()">
         <xsl:document>
            <xsl:element name="div" namespace="http://www.w3.org/1999/xhtml">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
               <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                               xmlns:h="http://www.w3.org/1999/xhtml"
                               xmlns:m="http://docbook.org/ns/docbook/modes"
                               xmlns:x="http://www.jenitennison.com/xslt/xspec"
                               name="class"
                               namespace=""
                               select="'', ''"
                               separator="pre-wrap"/>
               <xsl:element name="pre" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="language-none numbered programlisting verbatim"/>
                  <xsl:element name="code" namespace="http://www.w3.org/1999/xhtml">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:element name="a" namespace="http://www.w3.org/1999/xhtml">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="id"
                                        namespace=""
                                        select="'', ''"
                                        separator="R_area1"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="class"
                                        namespace=""
                                        select="'', ''"
                                        separator="callout-bug linecolumn"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="db-line"
                                        namespace=""
                                        select="'', ''"
                                        separator="1"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="db-column"
                                        namespace=""
                                        select="'', ''"
                                        separator="1"/>
                        <xsl:text>①</xsl:text>
                     </xsl:element>
                     <xsl:text>Line one
Line</xsl:text>
                     <xsl:element name="a" namespace="http://www.w3.org/1999/xhtml">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="id"
                                        namespace=""
                                        select="'', ''"
                                        separator="R_area2"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="class"
                                        namespace=""
                                        select="'', ''"
                                        separator="callout-bug linecolumn"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="db-line"
                                        namespace=""
                                        select="'', ''"
                                        separator="2"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="db-column"
                                        namespace=""
                                        select="'', ''"
                                        separator="5"/>
                        <xsl:text>②</xsl:text>
                     </xsl:element>
                     <xsl:text> two
Line three         </xsl:text>
                     <xsl:element name="a" namespace="http://www.w3.org/1999/xhtml">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="id"
                                        namespace=""
                                        select="'', ''"
                                        separator="R_area3"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="class"
                                        namespace=""
                                        select="'', ''"
                                        separator="callout-bug linecolumn"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="db-line"
                                        namespace=""
                                        select="'', ''"
                                        separator="3"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="db-column"
                                        namespace=""
                                        select="'', ''"
                                        separator="20"/>
                        <xsl:text>③</xsl:text>
                     </xsl:element>
                     <xsl:text>
Line four
Line five</xsl:text>
                  </xsl:element>
               </xsl:element>
            </xsl:element>
         </xsl:document>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e702"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e702-doc ! ( node() )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e702, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario82-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>markup can also be inserted</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e702"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario83"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
      <xsl:context-item use="absent"/>
      <xsl:message>When callouts are inserted into markup</xsl:message>
      <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario83</xsl:attribute>
         <xsl:attribute name="xspec" namespace="">file:/home/runner/work/xslTNG/xslTNG/build/xspec/verbatim.xspec</xsl:attribute>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>When callouts are inserted into markup</xsl:text>
         </xsl:element>
         <xsl:element name="input-wrap" namespace="">
            <xsl:element name="x:context" namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:attribute name="select" namespace="">/*/*</xsl:attribute>
               <xsl:attribute name="mode" namespace="">m:docbook</xsl:attribute>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">style</xsl:attribute>
                  <xsl:attribute name="select" namespace="">'plain'</xsl:attribute>
               </xsl:element>
               <xsl:element name="x:param" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:namespace name="">http://docbook.org/ns/docbook</xsl:namespace>
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:attribute name="name" namespace="">inject</xsl:attribute>
                  <xsl:attribute name="as" namespace="">element()</xsl:attribute>
                  <xsl:element name="areaspec" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="1 1"/>
                        <xsl:text>①</xsl:text>
                     </xsl:element>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="2 5"/>
                        <xsl:text>②</xsl:text>
                     </xsl:element>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="3 20"/>
                        <xsl:text>③</xsl:text>
                     </xsl:element>
                  </xsl:element>
               </xsl:element>
               <xsl:element name="div" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="xml:space"
                                  namespace="http://www.w3.org/XML/1998/namespace"
                                  select="'', ''"
                                  separator="preserve"/>
                  <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:element name="emphasis" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:text>Line one</xsl:text>
                     </xsl:element>
                     <xsl:text>
</xsl:text>
                     <xsl:element name="emphasis" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:text>Line two
Line three
Line four</xsl:text>
                     </xsl:element>
                     <xsl:text>
Line five</xsl:text>
                  </xsl:element>
               </xsl:element>
            </xsl:element>
         </xsl:element>
         <xsl:variable name="Q{urn:x-xspec:compile:impl}context-d1221e0-doc"
                        as="document-node()">
            <xsl:document>
               <xsl:element name="div" namespace="http://docbook.org/ns/docbook">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="xml:space"
                                  namespace="http://www.w3.org/XML/1998/namespace"
                                  select="'', ''"
                                  separator="preserve"/>
                  <xsl:element name="programlisting" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:element name="emphasis" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:text>Line one</xsl:text>
                     </xsl:element>
                     <xsl:text>
</xsl:text>
                     <xsl:element name="emphasis" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:text>Line two
Line three
Line four</xsl:text>
                     </xsl:element>
                     <xsl:text>
Line five</xsl:text>
                  </xsl:element>
               </xsl:element>
            </xsl:document>
         </xsl:variable>
         <xsl:variable xmlns="http://docbook.org/ns/docbook"
                        xmlns:h="http://www.w3.org/1999/xhtml"
                        xmlns:m="http://docbook.org/ns/docbook/modes"
                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                        name="Q{urn:x-xspec:compile:impl}context-d1221e0"
                        select="$Q{urn:x-xspec:compile:impl}context-d1221e0-doc ! ( /*/* )"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}context"
                        as="item()*"
                        select="$Q{urn:x-xspec:compile:impl}context-d1221e0"/>
         <xsl:variable name="Q{http://www.jenitennison.com/xslt/xspec}result" as="item()*">
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}style"
                           select="'plain'"/>
            <xsl:variable name="Q{urn:x-xspec:compile:impl}param-d1221e2-doc"
                           as="document-node()">
               <xsl:document>
                  <xsl:element name="areaspec" namespace="http://docbook.org/ns/docbook">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="1 1"/>
                        <xsl:text>①</xsl:text>
                     </xsl:element>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="2 5"/>
                        <xsl:text>②</xsl:text>
                     </xsl:element>
                     <xsl:element name="area" namespace="http://docbook.org/ns/docbook">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://docbook.org/ns/docbook"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="coords"
                                        namespace=""
                                        select="'', ''"
                                        separator="3 20"/>
                        <xsl:text>③</xsl:text>
                     </xsl:element>
                  </xsl:element>
               </xsl:document>
            </xsl:variable>
            <xsl:variable xmlns="http://docbook.org/ns/docbook"
                           xmlns:h="http://www.w3.org/1999/xhtml"
                           xmlns:m="http://docbook.org/ns/docbook/modes"
                           xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           name="Q{}inject"
                           as="element()"
                           select="$Q{urn:x-xspec:compile:impl}param-d1221e2-doc ! ( node() )"/>
            <xsl:apply-templates select="$Q{urn:x-xspec:compile:impl}context-d1221e0"
                                  mode="Q{http://docbook.org/ns/docbook/modes}docbook">
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}style"
                                select="$Q{}style"/>
               <xsl:with-param xmlns="http://docbook.org/ns/docbook"
                                xmlns:h="http://www.w3.org/1999/xhtml"
                                xmlns:m="http://docbook.org/ns/docbook/modes"
                                xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                name="Q{}inject"
                                select="$Q{}inject"
                                as="element()"/>
            </xsl:apply-templates>
         </xsl:variable>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
            <xsl:with-param name="report-name" select="'result'"/>
         </xsl:call-template>
         <!-- invoke each compiled x:expect -->
         <xsl:call-template name="Q{http://www.jenitennison.com/xslt/xspec}scenario83-expect1">
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}context"/>
            <xsl:with-param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                             select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
   <xsl:template name="Q{http://www.jenitennison.com/xslt/xspec}scenario83-expect1"
                  as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
      <xsl:context-item use="absent"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}context"
                  as="item()*"
                  required="yes"/>
      <xsl:param name="Q{http://www.jenitennison.com/xslt/xspec}result"
                  as="item()*"
                  required="yes"/>
      <xsl:message>they interrupt that markup</xsl:message>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e735-doc"
                     as="document-node()">
         <xsl:document>
            <xsl:element name="div" namespace="http://www.w3.org/1999/xhtml">
               <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
               <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
               <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
               <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                               xmlns:h="http://www.w3.org/1999/xhtml"
                               xmlns:m="http://docbook.org/ns/docbook/modes"
                               xmlns:x="http://www.jenitennison.com/xslt/xspec"
                               name="class"
                               namespace=""
                               select="'', ''"
                               separator="pre-wrap"/>
               <xsl:element name="pre" namespace="http://www.w3.org/1999/xhtml">
                  <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                  <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                  <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                  <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:h="http://www.w3.org/1999/xhtml"
                                  xmlns:m="http://docbook.org/ns/docbook/modes"
                                  xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                  name="class"
                                  namespace=""
                                  select="'', ''"
                                  separator="language-none numbered programlisting verbatim"/>
                  <xsl:element name="code" namespace="http://www.w3.org/1999/xhtml">
                     <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                     <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                     <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                     <xsl:element name="a" namespace="http://www.w3.org/1999/xhtml">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="id"
                                        namespace=""
                                        select="'', ''"
                                        separator="R_area1"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="class"
                                        namespace=""
                                        select="'', ''"
                                        separator="callout-bug linecolumn"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="db-line"
                                        namespace=""
                                        select="'', ''"
                                        separator="1"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="db-column"
                                        namespace=""
                                        select="'', ''"
                                        separator="1"/>
                        <xsl:text>①</xsl:text>
                     </xsl:element>
                     <xsl:element name="em" namespace="http://www.w3.org/1999/xhtml">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:text>Line one</xsl:text>
                     </xsl:element>
                     <xsl:text>
</xsl:text>
                     <xsl:element name="em" namespace="http://www.w3.org/1999/xhtml">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:text>Line</xsl:text>
                     </xsl:element>
                     <xsl:element name="a" namespace="http://www.w3.org/1999/xhtml">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="id"
                                        namespace=""
                                        select="'', ''"
                                        separator="R_area2"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="class"
                                        namespace=""
                                        select="'', ''"
                                        separator="callout-bug linecolumn"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="db-line"
                                        namespace=""
                                        select="'', ''"
                                        separator="2"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="db-column"
                                        namespace=""
                                        select="'', ''"
                                        separator="5"/>
                        <xsl:text>②</xsl:text>
                     </xsl:element>
                     <xsl:element name="em" namespace="http://www.w3.org/1999/xhtml">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:text> two</xsl:text>
                     </xsl:element>
                     <xsl:text>
</xsl:text>
                     <xsl:element name="em" namespace="http://www.w3.org/1999/xhtml">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:text>Line three</xsl:text>
                     </xsl:element>
                     <xsl:text>         </xsl:text>
                     <xsl:element name="a" namespace="http://www.w3.org/1999/xhtml">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="id"
                                        namespace=""
                                        select="'', ''"
                                        separator="R_area3"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="class"
                                        namespace=""
                                        select="'', ''"
                                        separator="callout-bug linecolumn"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="db-line"
                                        namespace=""
                                        select="'', ''"
                                        separator="3"/>
                        <xsl:attribute xmlns="http://www.w3.org/1999/xhtml"
                                        xmlns:h="http://www.w3.org/1999/xhtml"
                                        xmlns:m="http://docbook.org/ns/docbook/modes"
                                        xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                        name="db-column"
                                        namespace=""
                                        select="'', ''"
                                        separator="20"/>
                        <xsl:text>③</xsl:text>
                     </xsl:element>
                     <xsl:text>
</xsl:text>
                     <xsl:element name="em" namespace="http://www.w3.org/1999/xhtml">
                        <xsl:namespace name="h">http://www.w3.org/1999/xhtml</xsl:namespace>
                        <xsl:namespace name="m">http://docbook.org/ns/docbook/modes</xsl:namespace>
                        <xsl:namespace name="x">http://www.jenitennison.com/xslt/xspec</xsl:namespace>
                        <xsl:text>Line four</xsl:text>
                     </xsl:element>
                     <xsl:text>
Line five</xsl:text>
                  </xsl:element>
               </xsl:element>
            </xsl:element>
         </xsl:document>
      </xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d142e735"
                     select="$Q{urn:x-xspec:compile:impl}expect-d142e735-doc ! ( node() )"><!--expected result--></xsl:variable>
      <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                     as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                     select="Q{urn:x-xspec:common:deep-equal}deep-equal($Q{urn:x-xspec:compile:impl}expect-d142e735, $Q{http://www.jenitennison.com/xslt/xspec}result, '')"/>
      <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
         <xsl:message>      FAILED</xsl:message>
      </xsl:if>
      <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
         <xsl:attribute name="id" namespace="">scenario83-expect1</xsl:attribute>
         <xsl:attribute name="successful"
                         namespace=""
                         select="$Q{urn:x-xspec:compile:impl}successful"/>
         <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
            <xsl:text>they interrupt that markup</xsl:text>
         </xsl:element>
         <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
            <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d142e735"/>
            <xsl:with-param name="report-name" select="'expect'"/>
         </xsl:call-template>
      </xsl:element>
   </xsl:template>
</xsl:stylesheet>
