<?xml version="1.0" encoding="UTF-8"?>
<report xmlns="http://www.jenitennison.com/xslt/xspec"
        xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec"
        stylesheet="file:/home/runner/work/xslTNG/xslTNG/build/xspec-xslt/xspec-driver.xsl"
        date="2024-02-03T11:49:42.733457Z">
   <scenario id="scenario1"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an abbrev element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <abbrev>This is an abbrev element.</abbrev>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="abbrev">This is an abbrev element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario1-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario1-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'abbrev'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario1-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario1-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an abbrev element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario2"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an abbrev element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <abbrev xml:id="d2e0" role="b a b c">This is an abbrev element.</abbrev>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d2e0" class="a abbrev b c">This is an abbrev element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario2-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario2-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd2e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario2-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a abbrev b c'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario2-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario2-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an abbrev element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario3"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an accel element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <accel>This is an accel element.</accel>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="accel">This is an accel element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario3-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario3-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'accel'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario3-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario3-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an accel element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario4"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an accel element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <accel xml:id="d3e0" role="b a b c">This is an accel element.</accel>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d3e0" class="a accel b c">This is an accel element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario4-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario4-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd3e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario4-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a accel b c'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario4-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario4-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an accel element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario5"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an acronym element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <acronym>This is an acronym element.</acronym>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="acronym">This is an acronym element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario5-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario5-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'acronym'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario5-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario5-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an acronym element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario6"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an acronym element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <acronym xml:id="d4e0" role="b a b c">This is an acronym element.</acronym>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d4e0" class="a acronym b c">This is an acronym element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario6-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario6-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd4e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario6-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a acronym b c'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario6-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario6-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an acronym element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario7"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an application element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <application>This is an application element.</application>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="application">This is an application element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario7-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario7-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'application'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario7-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario7-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an application element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario8"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an application element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <application xml:id="d5e0" role="b a b c">This is an application element.</application>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d5e0" class="a application b c">This is an application element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario8-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario8-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd5e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario8-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a application b c'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario8-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario8-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an application element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario9"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a buildtarget element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <buildtarget>This is a buildtarget element.</buildtarget>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="buildtarget">This is a buildtarget element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario9-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario9-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'buildtarget'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario9-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario9-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a buildtarget element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario10"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a buildtarget element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <buildtarget xml:id="d6e0" role="b a b c">This is a buildtarget element.</buildtarget>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d6e0" class="a b buildtarget c">This is a buildtarget element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario10-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario10-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd6e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario10-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b buildtarget c'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario10-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario10-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a buildtarget element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario11"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a citation element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <citation>This is a citation element.</citation>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="citation">This is a citation element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario11-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario11-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'citation'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario11-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario11-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a citation element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario12"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a citation element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <citation xml:id="d7e0" role="b a b c">This is a citation element.</citation>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d7e0" class="a b c citation">This is a citation element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario12-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario12-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd7e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario12-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c citation'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario12-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario12-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a citation element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario13"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a citebiblioid element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <citebiblioid>This is a citebiblioid element.</citebiblioid>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="citebiblioid">This is a citebiblioid element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario13-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario13-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'citebiblioid'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario13-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario13-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a citebiblioid element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario14"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a citebiblioid element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <citebiblioid xml:id="d8e0" role="b a b c">This is a citebiblioid element.</citebiblioid>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d8e0" class="a b c citebiblioid">This is a citebiblioid element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario14-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario14-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd8e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario14-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c citebiblioid'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario14-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario14-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a citebiblioid element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario15"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a citerefentry element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <citerefentry>This is a citerefentry element.</citerefentry>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="citerefentry">This is a citerefentry element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario15-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario15-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'citerefentry'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario15-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario15-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a citerefentry element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario16"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a citerefentry element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <citerefentry xml:id="d9e0" role="b a b c">This is a citerefentry element.</citerefentry>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d9e0" class="a b c citerefentry">This is a citerefentry element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario16-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario16-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd9e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario16-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c citerefentry'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario16-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario16-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a citerefentry element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario17"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a citetitle element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <citetitle>This is a citetitle element.</citetitle>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <cite class="citetitle">This is a citetitle element.</cite>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario17-expect1" successful="true">
         <label>it should return a single cite element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'cite' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario17-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'citetitle'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario17-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario17-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a citetitle element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario18"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a citetitle element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <citetitle xml:id="d10e0" role="b a b c">This is a citetitle element.</citetitle>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <cite id="d10e0" class="a b c citetitle">This is a citetitle element.</cite>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario18-expect1" successful="true">
         <label>it should return a single cite element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'cite' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario18-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd10e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario18-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c citetitle'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario18-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario18-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a citetitle element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario19"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a classname element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <classname>This is a classname element.</classname>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="classname">This is a classname element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario19-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario19-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'classname'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario19-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario19-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a classname element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario20"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a classname element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <classname xml:id="d11e0" role="b a b c">This is a classname element.</classname>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d11e0" class="a b c classname">This is a classname element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario20-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario20-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd11e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario20-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c classname'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario20-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario20-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a classname element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario21"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a command element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <command>This is a command element.</command>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="command">This is a command element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario21-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario21-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'command'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario21-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario21-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a command element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario22"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a command element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <command xml:id="d12e0" role="b a b c">This is a command element.</command>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d12e0" class="a b c command">This is a command element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario22-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario22-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd12e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario22-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c command'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario22-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario22-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a command element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario23"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a computeroutput element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <computeroutput>This is a computeroutput element.</computeroutput>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="computeroutput">This is a computeroutput element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario23-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario23-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'computeroutput'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario23-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario23-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a computeroutput element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario24"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a computeroutput element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <computeroutput xml:id="d13e0" role="b a b c">This is a computeroutput element.</computeroutput>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d13e0" class="a b c computeroutput">This is a computeroutput element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario24-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario24-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd13e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario24-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c computeroutput'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario24-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario24-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a computeroutput element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario25"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a constant element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <constant>This is a constant element.</constant>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="constant">This is a constant element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario25-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario25-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'constant'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario25-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario25-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a constant element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario26"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a constant element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <constant xml:id="d14e0" role="b a b c">This is a constant element.</constant>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d14e0" class="a b c constant">This is a constant element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario26-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario26-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd14e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario26-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c constant'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario26-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario26-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a constant element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario27"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a database element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <database>This is a database element.</database>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="database">This is a database element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario27-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario27-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'database'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario27-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario27-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a database element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario28"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a database element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <database xml:id="d15e0" role="b a b c">This is a database element.</database>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d15e0" class="a b c database">This is a database element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario28-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario28-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd15e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario28-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c database'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario28-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario28-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a database element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario29"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a date element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <date>This is a date element.</date>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="date">This is a date element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario29-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario29-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'date'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario29-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario29-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a date element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario30"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a date element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <date xml:id="d16e0" role="b a b c">This is a date element.</date>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d16e0" class="a b c date">This is a date element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario30-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario30-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd16e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario30-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c date'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario30-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario30-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a date element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario31"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an editor element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <editor>This is an editor element.</editor>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="editor">This is an editor element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario31-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario31-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'editor'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario31-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario31-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an editor element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario32"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an editor element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <editor xml:id="d17e0" role="b a b c">This is an editor element.</editor>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d17e0" class="a b c editor">This is an editor element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario32-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario32-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd17e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario32-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c editor'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario32-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario32-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an editor element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario33"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an email element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <email>This is an email element.</email>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="email">This is an email element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario33-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario33-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'email'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario33-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario33-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an email element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario34"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an email element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <email xml:id="d18e0" role="b a b c">This is an email element.</email>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d18e0" class="a b c email">This is an email element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario34-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario34-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd18e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario34-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c email'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario34-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario34-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an email element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario35"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an enumidentifier element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <enumidentifier>This is an enumidentifier element.</enumidentifier>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="enumidentifier">This is an enumidentifier element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario35-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario35-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'enumidentifier'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario35-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario35-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an enumidentifier element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario36"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an enumidentifier element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <enumidentifier xml:id="d19e0" role="b a b c">This is an enumidentifier element.</enumidentifier>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d19e0" class="a b c enumidentifier">This is an enumidentifier element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario36-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario36-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd19e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario36-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c enumidentifier'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario36-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario36-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an enumidentifier element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario37"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an enumname element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <enumname>This is an enumname element.</enumname>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="enumname">This is an enumname element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario37-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario37-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'enumname'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario37-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario37-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an enumname element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario38"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an enumname element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <enumname xml:id="d20e0" role="b a b c">This is an enumname element.</enumname>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d20e0" class="a b c enumname">This is an enumname element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario38-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario38-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd20e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario38-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c enumname'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario38-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario38-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an enumname element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario39"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an enumvalue element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <enumvalue>This is an enumvalue element.</enumvalue>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="enumvalue">This is an enumvalue element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario39-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario39-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'enumvalue'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario39-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario39-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an enumvalue element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario40"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an enumvalue element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <enumvalue xml:id="d21e0" role="b a b c">This is an enumvalue element.</enumvalue>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d21e0" class="a b c enumvalue">This is an enumvalue element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario40-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario40-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd21e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario40-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c enumvalue'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario40-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario40-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an enumvalue element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario41"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an envar element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <envar>This is an envar element.</envar>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="envar">This is an envar element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario41-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario41-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'envar'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario41-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario41-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an envar element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario42"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an envar element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <envar xml:id="d22e0" role="b a b c">This is an envar element.</envar>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d22e0" class="a b c envar">This is an envar element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario42-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario42-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd22e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario42-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c envar'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario42-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario42-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an envar element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario43"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an errorcode element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <errorcode>This is an errorcode element.</errorcode>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="errorcode">This is an errorcode element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario43-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario43-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'errorcode'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario43-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario43-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an errorcode element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario44"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an errorcode element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <errorcode xml:id="d23e0" role="b a b c">This is an errorcode element.</errorcode>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d23e0" class="a b c errorcode">This is an errorcode element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario44-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario44-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd23e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario44-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c errorcode'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario44-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario44-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an errorcode element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario45"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an errorname element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <errorname>This is an errorname element.</errorname>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="errorname">This is an errorname element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario45-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario45-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'errorname'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario45-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario45-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an errorname element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario46"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an errorname element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <errorname xml:id="d24e0" role="b a b c">This is an errorname element.</errorname>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d24e0" class="a b c errorname">This is an errorname element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario46-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario46-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd24e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario46-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c errorname'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario46-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario46-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an errorname element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario47"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an errortext element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <errortext>This is an errortext element.</errortext>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="errortext">This is an errortext element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario47-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario47-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'errortext'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario47-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario47-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an errortext element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario48"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an errortext element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <errortext xml:id="d25e0" role="b a b c">This is an errortext element.</errortext>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d25e0" class="a b c errortext">This is an errortext element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario48-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario48-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd25e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario48-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c errortext'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario48-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario48-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an errortext element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario49"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an errortype element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <errortype>This is an errortype element.</errortype>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="errortype">This is an errortype element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario49-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario49-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'errortype'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario49-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario49-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an errortype element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario50"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an errortype element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <errortype xml:id="d26e0" role="b a b c">This is an errortype element.</errortype>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d26e0" class="a b c errortype">This is an errortype element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario50-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario50-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd26e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario50-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c errortype'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario50-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario50-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an errortype element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario51"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an exceptionname element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <exceptionname>This is an exceptionname element.</exceptionname>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="exceptionname">This is an exceptionname element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario51-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario51-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'exceptionname'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario51-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario51-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an exceptionname element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario52"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an exceptionname element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <exceptionname xml:id="d27e0" role="b a b c">This is an exceptionname element.</exceptionname>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d27e0" class="a b c exceptionname">This is an exceptionname element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario52-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario52-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd27e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario52-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c exceptionname'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario52-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario52-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an exceptionname element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario53"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a filename element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <filename>This is a filename element.</filename>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="filename">This is a filename element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario53-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario53-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'filename'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario53-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario53-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a filename element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario54"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a filename element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <filename xml:id="d28e0" role="b a b c">This is a filename element.</filename>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d28e0" class="a b c filename">This is a filename element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario54-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario54-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd28e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario54-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c filename'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario54-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario54-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a filename element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario55"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a firstterm element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <firstterm>This is a firstterm element.</firstterm>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="firstterm">This is a firstterm element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario55-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario55-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'firstterm'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario55-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario55-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a firstterm element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario56"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a firstterm element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <firstterm xml:id="d29e0" role="b a b c">This is a firstterm element.</firstterm>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d29e0" class="a b c firstterm">This is a firstterm element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario56-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario56-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd29e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario56-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c firstterm'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario56-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario56-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a firstterm element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario57"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a foreignphrase element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <foreignphrase>This is a foreignphrase element.</foreignphrase>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="foreignphrase">This is a foreignphrase element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario57-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario57-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'foreignphrase'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario57-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario57-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a foreignphrase element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario58"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a foreignphrase element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <foreignphrase xml:id="d30e0" role="b a b c">This is a foreignphrase element.</foreignphrase>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d30e0" class="a b c foreignphrase">This is a foreignphrase element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario58-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario58-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd30e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario58-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c foreignphrase'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario58-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario58-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a foreignphrase element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario59"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a function element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <function>This is a function element.</function>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="function">This is a function element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario59-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario59-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'function'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario59-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario59-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a function element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario60"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a function element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <function xml:id="d31e0" role="b a b c">This is a function element.</function>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d31e0" class="a b c function">This is a function element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario60-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario60-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd31e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario60-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c function'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario60-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario60-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a function element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario61"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a glossterm element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <glossterm>This is a glossterm element.</glossterm>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="glossterm">This is a glossterm element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario61-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario61-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'glossterm'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario61-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario61-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a glossterm element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario62"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a glossterm element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <glossterm xml:id="d32e0" role="b a b c">This is a glossterm element.</glossterm>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d32e0" class="a b c glossterm">This is a glossterm element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario62-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario62-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd32e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario62-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c glossterm'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario62-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario62-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a glossterm element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario63"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a guibutton element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <guibutton>This is a guibutton element.</guibutton>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="guibutton">This is a guibutton element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario63-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario63-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'guibutton'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario63-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario63-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a guibutton element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario64"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a guibutton element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <guibutton xml:id="d33e0" role="b a b c">This is a guibutton element.</guibutton>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d33e0" class="a b c guibutton">This is a guibutton element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario64-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario64-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd33e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario64-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c guibutton'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario64-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario64-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a guibutton element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario65"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a guiicon element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <guiicon>This is a guiicon element.</guiicon>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="guiicon">This is a guiicon element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario65-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario65-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'guiicon'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario65-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario65-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a guiicon element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario66"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a guiicon element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <guiicon xml:id="d34e0" role="b a b c">This is a guiicon element.</guiicon>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d34e0" class="a b c guiicon">This is a guiicon element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario66-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario66-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd34e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario66-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c guiicon'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario66-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario66-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a guiicon element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario67"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a guilabel element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <guilabel>This is a guilabel element.</guilabel>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="guilabel">This is a guilabel element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario67-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario67-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'guilabel'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario67-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario67-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a guilabel element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario68"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a guilabel element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <guilabel xml:id="d35e0" role="b a b c">This is a guilabel element.</guilabel>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d35e0" class="a b c guilabel">This is a guilabel element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario68-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario68-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd35e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario68-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c guilabel'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario68-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario68-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a guilabel element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario69"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a guimenu element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <guimenu>This is a guimenu element.</guimenu>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="guimenu">This is a guimenu element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario69-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario69-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'guimenu'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario69-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario69-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a guimenu element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario70"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a guimenu element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <guimenu xml:id="d36e0" role="b a b c">This is a guimenu element.</guimenu>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d36e0" class="a b c guimenu">This is a guimenu element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario70-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario70-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd36e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario70-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c guimenu'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario70-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario70-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a guimenu element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario71"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a guimenuitem element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <guimenuitem>This is a guimenuitem element.</guimenuitem>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="guimenuitem">This is a guimenuitem element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario71-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario71-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'guimenuitem'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario71-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario71-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a guimenuitem element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario72"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a guimenuitem element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <guimenuitem xml:id="d37e0" role="b a b c">This is a guimenuitem element.</guimenuitem>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d37e0" class="a b c guimenuitem">This is a guimenuitem element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario72-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario72-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd37e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario72-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c guimenuitem'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario72-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario72-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a guimenuitem element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario73"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a guisubmenu element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <guisubmenu>This is a guisubmenu element.</guisubmenu>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="guisubmenu">This is a guisubmenu element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario73-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario73-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'guisubmenu'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario73-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario73-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a guisubmenu element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario74"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a guisubmenu element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <guisubmenu xml:id="d38e0" role="b a b c">This is a guisubmenu element.</guisubmenu>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d38e0" class="a b c guisubmenu">This is a guisubmenu element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario74-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario74-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd38e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario74-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c guisubmenu'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario74-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario74-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a guisubmenu element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario75"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a hardware element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <hardware>This is a hardware element.</hardware>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="hardware">This is a hardware element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario75-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario75-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'hardware'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario75-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario75-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a hardware element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario76"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a hardware element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <hardware xml:id="d39e0" role="b a b c">This is a hardware element.</hardware>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d39e0" class="a b c hardware">This is a hardware element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario76-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario76-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd39e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario76-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c hardware'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario76-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario76-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a hardware element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario77"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an initializer element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <initializer>This is an initializer element.</initializer>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="initializer">This is an initializer element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario77-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario77-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'initializer'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario77-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario77-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an initializer element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario78"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an initializer element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <initializer xml:id="d40e0" role="b a b c">This is an initializer element.</initializer>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d40e0" class="a b c initializer">This is an initializer element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario78-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario78-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd40e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario78-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c initializer'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario78-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario78-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an initializer element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario79"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an inlinestagedir element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <inlinestagedir>This is an inlinestagedir element.</inlinestagedir>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="inlinestagedir">This is an inlinestagedir element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario79-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario79-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'inlinestagedir'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario79-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario79-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an inlinestagedir element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario80"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an inlinestagedir element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <inlinestagedir xml:id="d41e0" role="b a b c">This is an inlinestagedir element.</inlinestagedir>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d41e0" class="a b c inlinestagedir">This is an inlinestagedir element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario80-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario80-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd41e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario80-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c inlinestagedir'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario80-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario80-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an inlinestagedir element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario81"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an interfacename element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <interfacename>This is an interfacename element.</interfacename>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="interfacename">This is an interfacename element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario81-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario81-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'interfacename'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario81-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario81-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an interfacename element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario82"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an interfacename element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <interfacename xml:id="d42e0" role="b a b c">This is an interfacename element.</interfacename>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d42e0" class="a b c interfacename">This is an interfacename element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario82-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario82-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd42e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario82-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c interfacename'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario82-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario82-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an interfacename element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario83"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a jobtitle element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <jobtitle>This is a jobtitle element.</jobtitle>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="jobtitle">This is a jobtitle element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario83-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario83-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'jobtitle'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario83-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario83-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a jobtitle element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario84"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a jobtitle element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <jobtitle xml:id="d43e0" role="b a b c">This is a jobtitle element.</jobtitle>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d43e0" class="a b c jobtitle">This is a jobtitle element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario84-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario84-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd43e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario84-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c jobtitle'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario84-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario84-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a jobtitle element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario85"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a keycap element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <keycap>This is a keycap element.</keycap>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="keycap">This is a keycap element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario85-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario85-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'keycap'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario85-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario85-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a keycap element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario86"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a keycap element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <keycap xml:id="d44e0" role="b a b c">This is a keycap element.</keycap>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d44e0" class="a b c keycap">This is a keycap element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario86-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario86-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd44e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario86-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c keycap'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario86-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario86-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a keycap element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario87"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a keycode element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <keycode>This is a keycode element.</keycode>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="keycode">This is a keycode element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario87-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario87-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'keycode'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario87-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario87-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a keycode element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario88"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a keycode element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <keycode xml:id="d45e0" role="b a b c">This is a keycode element.</keycode>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d45e0" class="a b c keycode">This is a keycode element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario88-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario88-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd45e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario88-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c keycode'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario88-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario88-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a keycode element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario89"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a keycombo element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <keycombo>This is a keycombo element.</keycombo>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="keycombo">This is a keycombo element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario89-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario89-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'keycombo'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario89-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario89-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a keycombo element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario90"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a keycombo element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <keycombo xml:id="d46e0" role="b a b c">This is a keycombo element.</keycombo>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d46e0" class="a b c keycombo">This is a keycombo element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario90-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario90-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd46e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario90-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c keycombo'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario90-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario90-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a keycombo element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario91"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a keysym element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <keysym>This is a keysym element.</keysym>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="keysym">This is a keysym element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario91-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario91-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'keysym'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario91-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario91-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a keysym element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario92"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a keysym element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <keysym xml:id="d47e0" role="b a b c">This is a keysym element.</keysym>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d47e0" class="a b c keysym">This is a keysym element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario92-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario92-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd47e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario92-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c keysym'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario92-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario92-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a keysym element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario93"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a literal element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <literal>This is a literal element.</literal>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="literal">This is a literal element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario93-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario93-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'literal'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario93-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario93-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a literal element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario94"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a literal element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <literal xml:id="d48e0" role="b a b c">This is a literal element.</literal>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d48e0" class="a b c literal">This is a literal element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario94-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario94-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd48e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario94-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c literal'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario94-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario94-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a literal element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario95"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a macroname element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <macroname>This is a macroname element.</macroname>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="macroname">This is a macroname element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario95-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario95-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'macroname'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario95-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario95-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a macroname element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario96"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a macroname element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <macroname xml:id="d49e0" role="b a b c">This is a macroname element.</macroname>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d49e0" class="a b c macroname">This is a macroname element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario96-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario96-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd49e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario96-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c macroname'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario96-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario96-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a macroname element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario97"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a markup element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <markup>This is a markup element.</markup>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="markup">This is a markup element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario97-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario97-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'markup'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario97-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario97-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a markup element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario98"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a markup element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <markup xml:id="d50e0" role="b a b c">This is a markup element.</markup>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d50e0" class="a b c markup">This is a markup element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario98-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario98-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd50e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario98-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c markup'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario98-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario98-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a markup element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario99"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a medialabel element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <medialabel>This is a medialabel element.</medialabel>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <em class="medialabel">This is a medialabel element.</em>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario99-expect1" successful="true">
         <label>it should return a single em element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'em' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario99-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'medialabel'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario99-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario99-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a medialabel element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario100"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a medialabel element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <medialabel xml:id="d51e0" role="b a b c">This is a medialabel element.</medialabel>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <em id="d51e0" class="a b c medialabel">This is a medialabel element.</em>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario100-expect1" successful="true">
         <label>it should return a single em element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'em' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario100-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd51e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario100-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c medialabel'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario100-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario100-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a medialabel element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario101"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a menuchoice element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <menuchoice>This is a menuchoice element.</menuchoice>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="menuchoice">This is a menuchoice element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario101-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario101-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'menuchoice'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario101-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario101-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a menuchoice element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario102"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a menuchoice element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <menuchoice xml:id="d52e0" role="b a b c">This is a menuchoice element.</menuchoice>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d52e0" class="a b c menuchoice">This is a menuchoice element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario102-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario102-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd52e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario102-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c menuchoice'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario102-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario102-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a menuchoice element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario103"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a methodname element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <methodname>This is a methodname element.</methodname>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="methodname">This is a methodname element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario103-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario103-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'methodname'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario103-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario103-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a methodname element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario104"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a methodname element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <methodname xml:id="d53e0" role="b a b c">This is a methodname element.</methodname>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d53e0" class="a b c methodname">This is a methodname element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario104-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario104-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd53e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario104-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c methodname'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario104-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario104-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a methodname element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario105"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a modifier element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <modifier>This is a modifier element.</modifier>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="modifier">This is a modifier element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario105-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario105-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'modifier'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario105-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario105-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a modifier element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario106"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a modifier element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <modifier xml:id="d54e0" role="b a b c">This is a modifier element.</modifier>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d54e0" class="a b c modifier">This is a modifier element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario106-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario106-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd54e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario106-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c modifier'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario106-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario106-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a modifier element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario107"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a mousebutton element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <mousebutton>This is a mousebutton element.</mousebutton>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="mousebutton">This is a mousebutton element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario107-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario107-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'mousebutton'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario107-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario107-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a mousebutton element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario108"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a mousebutton element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <mousebutton xml:id="d55e0" role="b a b c">This is a mousebutton element.</mousebutton>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d55e0" class="a b c mousebutton">This is a mousebutton element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario108-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario108-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd55e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario108-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c mousebutton'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario108-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario108-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a mousebutton element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario109"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a namespace element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <namespace>This is a namespace element.</namespace>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="namespace">This is a namespace element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario109-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario109-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'namespace'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario109-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario109-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a namespace element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario110"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a namespace element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <namespace xml:id="d56e0" role="b a b c">This is a namespace element.</namespace>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d56e0" class="a b c namespace">This is a namespace element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario110-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario110-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd56e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario110-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c namespace'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario110-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario110-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a namespace element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario111"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a namespacename element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <namespacename>This is a namespacename element.</namespacename>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="namespacename">This is a namespacename element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario111-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario111-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'namespacename'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario111-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario111-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a namespacename element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario112"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a namespacename element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <namespacename xml:id="d57e0" role="b a b c">This is a namespacename element.</namespacename>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d57e0" class="a b c namespacename">This is a namespacename element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario112-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario112-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd57e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario112-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c namespacename'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario112-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario112-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a namespacename element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario113"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an ooclass element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <ooclass>This is an ooclass element.</ooclass>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="ooclass">This is an ooclass element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario113-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario113-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'ooclass'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario113-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario113-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an ooclass element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario114"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an ooclass element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <ooclass xml:id="d58e0" role="b a b c">This is an ooclass element.</ooclass>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d58e0" class="a b c ooclass">This is an ooclass element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario114-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario114-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd58e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario114-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c ooclass'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario114-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario114-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an ooclass element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario115"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an ooexception element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <ooexception>This is an ooexception element.</ooexception>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="ooexception">This is an ooexception element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario115-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario115-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'ooexception'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario115-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario115-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an ooexception element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario116"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an ooexception element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <ooexception xml:id="d59e0" role="b a b c">This is an ooexception element.</ooexception>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d59e0" class="a b c ooexception">This is an ooexception element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario116-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario116-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd59e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario116-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c ooexception'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario116-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario116-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an ooexception element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario117"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an oointerface element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <oointerface>This is an oointerface element.</oointerface>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="oointerface">This is an oointerface element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario117-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario117-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'oointerface'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario117-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario117-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an oointerface element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario118"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an oointerface element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <oointerface xml:id="d60e0" role="b a b c">This is an oointerface element.</oointerface>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d60e0" class="a b c oointerface">This is an oointerface element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario118-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario118-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd60e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario118-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c oointerface'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario118-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario118-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an oointerface element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario119"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an option element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <option>This is an option element.</option>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="option">This is an option element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario119-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario119-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'option'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario119-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario119-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an option element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario120"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an option element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <option xml:id="d61e0" role="b a b c">This is an option element.</option>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d61e0" class="a b c option">This is an option element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario120-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario120-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd61e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario120-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c option'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario120-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario120-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an option element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario121"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an optional element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <optional>This is an optional element.</optional>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="optional">This is an optional element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario121-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario121-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'optional'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario121-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario121-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an optional element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario122"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an optional element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <optional xml:id="d62e0" role="b a b c">This is an optional element.</optional>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d62e0" class="a b c optional">This is an optional element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario122-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario122-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd62e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario122-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c optional'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario122-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario122-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an optional element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario123"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an org element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <org>This is an org element.</org>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="org">This is an org element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario123-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario123-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'org'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario123-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario123-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an org element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario124"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an org element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <org xml:id="d63e0" role="b a b c">This is an org element.</org>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d63e0" class="a b c org">This is an org element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario124-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario124-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd63e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario124-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c org'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario124-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario124-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an org element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario125"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an orgname element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <orgname>This is an orgname element.</orgname>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="orgname">This is an orgname element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario125-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario125-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'orgname'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario125-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario125-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is an orgname element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario126"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting an orgname element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <orgname xml:id="d64e0" role="b a b c">This is an orgname element.</orgname>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d64e0" class="a b c orgname">This is an orgname element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario126-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario126-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd64e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario126-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c orgname'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario126-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario126-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is an orgname element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario127"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a package element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <package>This is a package element.</package>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="package">This is a package element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario127-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario127-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'package'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario127-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario127-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a package element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario128"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a package element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <package xml:id="d65e0" role="b a b c">This is a package element.</package>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d65e0" class="a b c package">This is a package element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario128-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario128-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd65e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario128-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c package'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario128-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario128-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a package element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario129"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a parameter element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <parameter>This is a parameter element.</parameter>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="parameter">This is a parameter element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario129-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario129-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'parameter'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario129-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario129-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a parameter element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario130"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a parameter element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <parameter xml:id="d66e0" role="b a b c">This is a parameter element.</parameter>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d66e0" class="a b c parameter">This is a parameter element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario130-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario130-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd66e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario130-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c parameter'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario130-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario130-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a parameter element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario131"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a person element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <person>This is a person element.</person>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="person">This is a person element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario131-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario131-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'person'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario131-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario131-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a person element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario132"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a person element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <person xml:id="d67e0" role="b a b c">This is a person element.</person>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d67e0" class="a b c person">This is a person element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario132-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario132-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd67e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario132-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c person'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario132-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario132-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a person element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario133"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a phrase element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <phrase>This is a phrase element.</phrase>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="phrase">This is a phrase element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario133-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario133-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'phrase'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario133-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario133-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a phrase element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario134"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a phrase element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <phrase xml:id="d68e0" role="b a b c">This is a phrase element.</phrase>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d68e0" class="a b c phrase">This is a phrase element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario134-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario134-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd68e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario134-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c phrase'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario134-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario134-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a phrase element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario135"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a productname element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <productname>This is a productname element.</productname>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="productname">This is a productname element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario135-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario135-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'productname'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario135-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario135-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a productname element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario136"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a productname element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <productname xml:id="d69e0" role="b a b c">This is a productname element.</productname>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d69e0" class="a b c productname">This is a productname element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario136-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario136-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd69e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario136-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c productname'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario136-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario136-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a productname element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario137"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a productnumber element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <productnumber>This is a productnumber element.</productnumber>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="productnumber">This is a productnumber element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario137-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario137-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'productnumber'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario137-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario137-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a productnumber element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario138"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a productnumber element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <productnumber xml:id="d70e0" role="b a b c">This is a productnumber element.</productnumber>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d70e0" class="a b c productnumber">This is a productnumber element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario138-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario138-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd70e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario138-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c productnumber'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario138-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario138-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a productnumber element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario139"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a prompt element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <prompt>This is a prompt element.</prompt>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="prompt">This is a prompt element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario139-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario139-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'prompt'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario139-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario139-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a prompt element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario140"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a prompt element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <prompt xml:id="d71e0" role="b a b c">This is a prompt element.</prompt>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d71e0" class="a b c prompt">This is a prompt element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario140-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario140-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd71e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario140-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c prompt'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario140-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario140-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a prompt element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario141"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a property element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <property>This is a property element.</property>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="property">This is a property element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario141-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario141-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'property'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario141-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario141-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a property element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario142"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a property element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <property xml:id="d72e0" role="b a b c">This is a property element.</property>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d72e0" class="a b c property">This is a property element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario142-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario142-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd72e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario142-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c property'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario142-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario142-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a property element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario143"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a replaceable element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <replaceable>This is a replaceable element.</replaceable>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <em class="replaceable">This is a replaceable element.</em>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario143-expect1" successful="true">
         <label>it should return a single em element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'em' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario143-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'replaceable'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario143-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario143-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a replaceable element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario144"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a replaceable element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <replaceable xml:id="d73e0" role="b a b c">This is a replaceable element.</replaceable>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <em id="d73e0" class="a b c replaceable">This is a replaceable element.</em>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario144-expect1" successful="true">
         <label>it should return a single em element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'em' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario144-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd73e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario144-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c replaceable'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario144-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario144-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a replaceable element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario145"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a returnvalue element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <returnvalue>This is a returnvalue element.</returnvalue>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="returnvalue">This is a returnvalue element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario145-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario145-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'returnvalue'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario145-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario145-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a returnvalue element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario146"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a returnvalue element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <returnvalue xml:id="d74e0" role="b a b c">This is a returnvalue element.</returnvalue>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d74e0" class="a b c returnvalue">This is a returnvalue element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario146-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario146-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd74e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario146-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c returnvalue'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario146-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario146-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a returnvalue element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario147"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a revnumber element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <revnumber>This is a revnumber element.</revnumber>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="revnumber">This is a revnumber element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario147-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario147-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'revnumber'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario147-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario147-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a revnumber element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario148"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a revnumber element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <revnumber xml:id="d75e0" role="b a b c">This is a revnumber element.</revnumber>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d75e0" class="a b c revnumber">This is a revnumber element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario148-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario148-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd75e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario148-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c revnumber'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario148-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario148-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a revnumber element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario149"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a shortcut element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <shortcut>This is a shortcut element.</shortcut>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="shortcut">This is a shortcut element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario149-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario149-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'shortcut'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario149-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario149-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a shortcut element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario150"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a shortcut element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <shortcut xml:id="d76e0" role="b a b c">This is a shortcut element.</shortcut>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d76e0" class="a b c shortcut">This is a shortcut element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario150-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario150-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd76e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario150-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c shortcut'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario150-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario150-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a shortcut element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario151"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a structfield element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <structfield>This is a structfield element.</structfield>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="structfield">This is a structfield element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario151-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario151-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'structfield'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario151-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario151-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a structfield element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario152"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a structfield element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <structfield xml:id="d77e0" role="b a b c">This is a structfield element.</structfield>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d77e0" class="a b c structfield">This is a structfield element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario152-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario152-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd77e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario152-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c structfield'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario152-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario152-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a structfield element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario153"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a symbol element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <symbol>This is a symbol element.</symbol>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="symbol">This is a symbol element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario153-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario153-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'symbol'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario153-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario153-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a symbol element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario154"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a symbol element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <symbol xml:id="d78e0" role="b a b c">This is a symbol element.</symbol>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d78e0" class="a b c symbol">This is a symbol element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario154-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario154-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd78e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario154-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c symbol'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario154-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario154-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a symbol element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario155"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a systemitem element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <systemitem>This is a systemitem element.</systemitem>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="systemitem">This is a systemitem element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario155-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario155-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'systemitem'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario155-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario155-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a systemitem element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario156"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a systemitem element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <systemitem xml:id="d79e0" role="b a b c">This is a systemitem element.</systemitem>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d79e0" class="a b c systemitem">This is a systemitem element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario156-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario156-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd79e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario156-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c systemitem'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario156-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario156-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a systemitem element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario157"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a templateid element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <templateid>This is a templateid element.</templateid>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="templateid">This is a templateid element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario157-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario157-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'templateid'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario157-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario157-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a templateid element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario158"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a templateid element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <templateid xml:id="d80e0" role="b a b c">This is a templateid element.</templateid>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d80e0" class="a b c templateid">This is a templateid element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario158-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario158-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd80e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario158-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c templateid'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario158-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario158-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a templateid element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario159"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a termdef element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <termdef>This is a termdef element.</termdef>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="termdef">This is a termdef element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario159-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario159-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'termdef'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario159-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario159-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a termdef element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario160"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a termdef element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <termdef xml:id="d81e0" role="b a b c">This is a termdef element.</termdef>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d81e0" class="a b c termdef">This is a termdef element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario160-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario160-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd81e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario160-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c termdef'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario160-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario160-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a termdef element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario161"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a token element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <token>This is a token element.</token>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="token">This is a token element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario161-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario161-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'token'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario161-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario161-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a token element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario162"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a token element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <token xml:id="d82e0" role="b a b c">This is a token element.</token>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d82e0" class="a b c token">This is a token element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario162-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario162-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd82e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario162-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c token'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario162-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario162-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a token element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario163"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a trademark element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <trademark>This is a trademark element.</trademark>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span class="trademark">This is a trademark element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario163-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario163-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'trademark'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario163-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario163-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a trademark element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario164"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a trademark element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <trademark xml:id="d83e0" role="b a b c">This is a trademark element.</trademark>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <span id="d83e0" class="a b c trademark">This is a trademark element.</span>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario164-expect1" successful="true">
         <label>it should return a single span element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'span' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario164-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd83e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario164-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c trademark'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario164-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario164-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a trademark element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario165"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a type element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <type>This is a type element.</type>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="type">This is a type element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario165-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario165-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'type'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario165-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario165-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a type element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario166"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a type element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <type xml:id="d84e0" role="b a b c">This is a type element.</type>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d84e0" class="a b c type">This is a type element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario166-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario166-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd84e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario166-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c type'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario166-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario166-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a type element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario167"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a typedefname element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <typedefname>This is a typedefname element.</typedefname>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="typedefname">This is a typedefname element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario167-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario167-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'typedefname'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario167-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario167-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a typedefname element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario168"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a typedefname element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <typedefname xml:id="d85e0" role="b a b c">This is a typedefname element.</typedefname>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d85e0" class="a b c typedefname">This is a typedefname element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario168-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario168-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd85e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario168-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c typedefname'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario168-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario168-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a typedefname element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario169"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a unionname element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <unionname>This is a unionname element.</unionname>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="unionname">This is a unionname element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario169-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario169-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'unionname'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario169-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario169-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a unionname element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario170"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a unionname element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <unionname xml:id="d86e0" role="b a b c">This is a unionname element.</unionname>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d86e0" class="a b c unionname">This is a unionname element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario170-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario170-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd86e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario170-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c unionname'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario170-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario170-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a unionname element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario171"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a uri element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <uri>This is a uri element.</uri>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="uri">This is a uri element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario171-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario171-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'uri'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario171-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario171-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a uri element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario172"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a uri element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <uri xml:id="d87e0" role="b a b c">This is a uri element.</uri>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d87e0" class="a b c uri">This is a uri element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario172-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario172-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd87e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario172-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c uri'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario172-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario172-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a uri element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario173"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a userinput element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <userinput>This is a userinput element.</userinput>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="userinput">This is a userinput element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario173-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario173-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'userinput'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario173-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario173-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a userinput element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario174"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a userinput element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <userinput xml:id="d88e0" role="b a b c">This is a userinput element.</userinput>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d88e0" class="a b c userinput">This is a userinput element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario174-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario174-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd88e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario174-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c userinput'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario174-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario174-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a userinput element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario175"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a varname element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <varname>This is a varname element.</varname>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code class="varname">This is a varname element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario175-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario175-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'varname'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario175-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario175-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a varname element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario176"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a varname element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <varname xml:id="d89e0" role="b a b c">This is a varname element.</varname>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <code id="d89e0" class="a b c varname">This is a varname element.</code>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario176-expect1" successful="true">
         <label>it should return a single code element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'code' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario176-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd89e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario176-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c varname'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario176-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario176-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a varname element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario177"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a wordasword element</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <wordasword>This is a wordasword element.</wordasword>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <em class="wordasword">This is a wordasword element.</em>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario177-expect1" successful="true">
         <label>it should return a single em element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'em' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario177-expect2" successful="true">
         <label>it should return the DocBook name as the class</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'wordasword'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario177-expect3" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except /h:body/h:main/*/@class)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario177-expect4" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/string() = 'This is a wordasword element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario178"
             xspec="file:/home/runner/work/xslTNG/xslTNG/build/xspec/generated-inlines.xspec">
      <label>When converting a wordasword element with an xml:id and roles</label>
      <input-wrap xmlns="">
         <x:context xmlns="http://docbook.org/ns/docbook"
                    xmlns:h="http://www.w3.org/1999/xhtml"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec">
            <wordasword xml:id="d90e0" role="b a b c">This is a wordasword element.</wordasword>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <body xmlns="http://www.w3.org/1999/xhtml" class="home">
               <nav class="top"/>
               <main>
                  <em id="d90e0" class="a b c wordasword">This is a wordasword element.</em>
               </main>
               <nav class="bottom"/>
            </body>
         </content-wrap>
      </result>
      <test id="scenario178-expect1" successful="true">
         <label>it should return a single em element</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="count(/h:body/h:main/*) = 1 and local-name(/h:body/h:main/*[1]) = 'em' and namespace-uri(/h:body/h:main/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario178-expect2" successful="true">
         <label>it should return the xml:id in the id</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@id = 'd90e0'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario178-expect3" successful="true">
         <label>it should return the roles as classes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/*/@class = 'a b c wordasword'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario178-expect4" successful="true">
         <label>it should not return any other attributes</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="empty(/h:body/h:main/*/@* except (/h:body/h:main/*/@id | /h:body/h:main/*/@class))"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario178-expect5" successful="true">
         <label>it should return the correct text</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:h="http://www.w3.org/1999/xhtml"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="/h:body/h:main/string() = 'This is a wordasword element.'"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
</report>
