<?xml version="1.0" encoding="utf-8"?><book xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink">
<?db filename="index" navigation="false"?>
<info>
<?db xlink-style="javascript" page-style="book"?>
<title>DocBook xslTNG Reference</title>
<author>
  <personname>
    <firstname>Norman</firstname><surname>Walsh</surname>
  </personname>
</author>
<releaseinfo role="icon">https://docbook.org/graphics/defguide-icon16.png</releaseinfo>
<pubdate/>
<revhistory>
  <?db revhistory-style="list"?>
  <revision>
    <revnumber>1.11.0</revnumber>
    <date>2022-11-07</date>
    <revdescription>
      <itemizedlist>
        <listitem>
          <para>Added support for EPUB3 output.</para>
        </listitem>
        <listitem>
          <para>Reworked how media objects are processed</para>
          <itemizedlist>
            <listitem>
              <para>Reworked how <tag class="attribute">contentwidth</tag>,
              <tag class="attribute">contentdepth</tag>, <tag class="attribute">width</tag>,
              <tag class="attribute">depth</tag>, <tag class="attribute">scalefit</tag>, and
              <tag class="attribute">scale</tag> are handled. Width and height (depth)
              are now processed independently. The results are
              <emphasis>supposed</emphasis> to be the same as
              before.</para>
            </listitem>
            <listitem>
              <para>It now makes sense to have both multiple <tag>imageobject</tag> elements
    and multiple <tag>imagedata</tag> elements with an <tag>imageobject</tag>. (And, analogously,
    multiple <tag>videoobject</tag> elements with multiple <tag>videodata</tag>, and
    multiple <tag>audioobject</tag> elements with multiple <tag>audiodata</tag> inside.)</para>
    <itemizedlist>
            <listitem>
              <para>The stylesheets select the first object for which none of
      the data elements are excluded by <parameter>mediaobject-exclude-extensions</parameter><indexterm><primary>param</primary><secondary>mediaobject-exclude-extensions</secondary></indexterm>
      and then process all of the data elements inside.</para>
              <itemizedlist>
                <listitem>
                  <para>For images, all of the alternatives are placed in a <tag>picture</tag> element using
        <tag>source</tag> and <tag>img</tag>.</para>
                </listitem>
                <listitem>
                  <para>For videos, all of the alternatives are placed in a <tag>video</tag> element using
        <tag>source</tag> unless the <parameter>mediaobject-video-element</parameter><indexterm><primary>param</primary><secondary>mediaobject-video-element</secondary></indexterm> is <tag>iframe</tag>.</para>
                </listitem>
                <listitem>
                  <para>For audio, all of the alternatives are placed in an <tag>audio</tag> elemnt using
        <tag>source</tag>.
                  </para>
                </listitem>
              </itemizedlist>
            </listitem>
            <listitem>
              <para>The fallback for audio and video elements is a paragraph that offers download
      links. This can be configured by overriding the <code role="template">t:audio-fallback</code> and
      <code role="template">t:video-fallback</code> templates, respectively.
              </para>
            </listitem>
            <listitem>
            <para>Use <tag>multimediaparams</tag> to specify the controls for audio and vidoe objects.
      If <emphasis>no</emphasis> parameters are specified, <tag class="attribute">controls</tag> will be added automatically.
      (If you specify any parameters, you are responsible for specifying the controls
      parameter.)
              </para>
            </listitem>
            <listitem>
              <para>If you have multiple data elements in an object, <emphasis>only</emphasis> the
      attributes associated with the <emphasis>last</emphasis> alternative are considered
      when calculating the viewport, alignment, etc. This is (a)
      consistent with HTML, and (b) at least partly justifiable by the
      observation that for scalable formats like SVG, it doesn’t make
      sense to say that the image has a particular height or width.
      Specify that on the raster fallback image where it makes sense.
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
            <listitem>
              <para>The actual nesting of divs and spans and some of the class values
    have changed. Check your CSS.</para>
            </listitem>
            <listitem>
              <para>Fixed a bug where the <tag class="attribute">summary</tag> accesibility attribute was not always output.
              </para>
            </listitem>
            <listitem>
              <para>Reworked image maps.</para>
              <itemizedlist>
            <listitem>
              <para>Simpified the code for computing how <code>calspair</code> coordinates are calculated. 
              </para>
            </listitem>
            <listitem>
              <para>Added support for <code>html-rect</code>, <code>html-circle</code>, and <code>html-poly</code>
      styles. Use <code>units="other"</code> and place the new styles in
      <code>otherunits</code>. See the <filename>calloutlist.005.xml</filename> unit test for
      examples.</para>
            </listitem>
              </itemizedlist>
            </listitem>
            <listitem>
              <para>Changed the <parameter>mediaobject-exclude-extensions</parameter><indexterm><primary>param</primary><secondary>mediaobject-exclude-extensions</secondary></indexterm> parameter into
      space-delimited string so that it’s easier to pass as a
      parameter. The variable <varname>v:mediaobject-exclude-extensions</varname><indexterm><primary>variable</primary><secondary>v:mediaobject-exclude-extensions</secondary></indexterm> is a
      list constructed from the string.
              </para>
            </listitem>
            <listitem>
              <para>Added <parameter>mediaobject-video-element</parameter><indexterm><primary>param</primary><secondary>mediaobject-video-element</secondary></indexterm> parameter.
              </para>
            </listitem>
            <listitem>
              <para>Changed <function>f:parse-length</function> so that it accepts <code>xs:string?</code> and returns
      an empty sequence if it’s passed one.</para>
            </listitem>
            <listitem>
              <para>Added support for <tag>db:textdata</tag>. If a text data element is present, the first
      one encountered is used (unless it contains only a single <tag>db:phrase</tag> as those
      where historically used for alt text).</para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>The icons used for admonitions have been changed. One or two of them
  didn’t show up in EPUB readers.</para>
        </listitem>
        <listitem>
          <para>Updated the extension functions that attempt to extract metadata
  from images so that they accept filenames that aren’t URIs. Also
  added support for a second “image” parameter, so that you can
  prevent them from attempting to parse, for example, a video as an
  image.</para>
        </listitem>
        <listitem>
          <para>Added convenience variables
          <varname>v:as-xml</varname><indexterm><primary>variable</primary><secondary>v:as-xml</secondary></indexterm> and <varname>v:as-json</varname><indexterm><primary>variable</primary><secondary>v:as-json</secondary></indexterm> for
          convenience in calls to <code>fn:serialize()</code>. Mostly
          this is for debugging.</para>
        </listitem>
        <listitem>
          <para>Reworked how the preprocessing pipeline is evaluated.</para>
        </listitem>
        <listitem>
          <para>Switched to using Sass to generate CSS.</para>
        </listitem>
        <listitem>
          <para>Fixed a bug in link processing that sometimes resulted in nested anchors.</para>
        </listitem>
        <listitem>
          <para>Fixed bug where unnumbered verbatim listings still had room for line numbers.
          </para>
        </listitem>
      </itemizedlist>
    </revdescription>
  </revision>
  <revision>
    <revnumber>1.10.1</revnumber>
    <date>2022-10-28</date>
    <revdescription>
      <itemizedlist>
        <listitem>
<para>Added support for <tag>enumsynopsis</tag>.</para>
        </listitem>
      </itemizedlist>
    </revdescription>
  </revision>
  <revision>
    <revnumber>1.10.0</revnumber>
    <date>2022-10-26</date>
    <revdescription>
      <itemizedlist>
        <listitem>
<para>Reworked the presentation of verbatim listings. The line numbers (in
the “lines” format) are now padded to align on the right and have a space
after them. This has no visible effect in a browser using CSS for rendering,
but improves the result in text renderings. Also added a new “table” format
that places the line numbers and the lines in separate columns of a table.</para>
        </listitem>
      </itemizedlist>
    </revdescription>
  </revision>
  <revision>
    <revnumber>1.9.0</revnumber>
    <date>2022-10-02</date>
    <revdescription>
      <itemizedlist>
        <listitem>
<para>The styling process begins with a series of preprocessing
transformations: cleaning up the logical structure of the input;
expanding XIncludes, converting DocBook 4.x to 5.x, if necessary;
transclusion processing; normalizing the document structure;
processing annotations; dealing with link bases; etc.</para>

<para>Starting in this release, these transformations are distributed in both
“<link xlink:href="https://www.saxonica.com/documentation/#!using-xsl/compiling">compiled</link>”
and source forms. By default, if you’re using a
<link xlink:href="https://saxonica.com/">Saxonica</link> XSLT processor,
the compiled forms will be used. This will generally result in faster
transformations because it avoids the cost of analyzing the XSLT and
preparing it for execution each time.</para>

<para>You can disable them by setting
<literal>use-compiled-transforms</literal> to “false”.</para>
        </listitem>
      </itemizedlist>
    </revdescription>
  </revision>
  <revision>
    <revnumber>1.8.1</revnumber>
    <date>2022-09-06</date>
    <revdescription>
      <itemizedlist>
        <listitem>
          <para>Fixed <link xlink:href="https://github.com/docbook/xslTNG/issues/173">a bug</link>
          where ordered list continuations were being incorrectly identified.</para>
        </listitem>
        <listitem>
          <para>Reworked how localizations
          <link xlink:href="https://github.com/docbook/xslTNG/issues/166">are computed</link>.
          The <code>$v:locales</code> variable has been replaced by the
          <code>f:locales($context)</code> function which returns the locales (languages)
          used by the document. (I’ve left the name <code>f:locales</code> for consistency
          with <code>v:locales</code> though I suspect <code>f:languages</code> would be
          a better name.) The correct locales are now loaded by default for modular documents.
          </para>
        </listitem>
      </itemizedlist>
    </revdescription>
  </revision>
<!--
  <revision>
    <revnumber>1.8.0</revnumber>
    <date>2022-07-24</date>
    <revdescription>
      <itemizedlist>
        <listitem>
          <para>Reworked CSS. The CSS stylesheets, especially the
          stylesheets related to print output, have been updated and
          the mechanism by which CSS links are added to the output
          <link linkend="managing-css">has changed</link>.
          </para>
          <para>The <literal>$css-links</literal> parameter no longer
          exists (nor does the corresponding
          <literal>$v:css-links</literal> variable). It has been
          replaced by the <parameter>user-css-links</parameter> and
          <parameter>use-docbook-css</parameter> parameters.
          </para>
        </listitem>
        <listitem>
          <para>Added an <parameter>output-media</parameter> parameter
          to allow conditional behavior based on output medium (screen
          or print).
          </para>
        </listitem>
        <listitem>
          <para>Added <parameter>page-style</parameter> and
          <parameter>paper-size</parameter> parameters for controlling
          aspects of print output.
          </para>
        </listitem>
        <listitem>
          <para>Some class attribute values have been changed.</para>
          <itemizedlist>
            <listitem>
              <para>The page style, page size, and “draft” classes are
              now reflected on the top-level <tag
              namespace="http://www.w3.org/1999/xhtml">html</tag>
              element.</para>
            </listitem>
            <listitem>
              <para>The class attribute value “<literal>division</literal>” is
              added to
              <tag>book</tag>,
              <tag>part</tag>, and
              <tag>reference</tag> elements.
              </para>
            </listitem>
            <listitem>
              <para>The class attribute value “<literal>component</literal>” is
              added to
              <tag>acknowledgements</tag>,
              <tag>appendix</tag>,
              <tag>article</tag>,
              <tag>bibliography</tag>,
              <tag>chapter</tag>,
              <tag>colophon</tag>,
              <tag>dedication</tag>,
              <tag>glossary</tag>,
              <tag>index</tag>,
              <tag>partintro</tag>,
              <tag>preface</tag>, and
              <tag>refentry</tag> elements.
              </para>
            </listitem>
            <listitem>
              <para>The class attribute value “<literal>formalobject</literal>” is
              added to
              <tag>equation</tag>,
              <tag>example</tag>,
              <tag>figure</tag>,
              <tag>formalgroup</tag>, and
              <tag>table</tag> elements.
              </para>
            </listitem>
            <listitem>
              <para>The class attribute value
              “<literal>informalobject</literal>” is
              added to
              <tag>informalequation</tag>,
              <tag>informalexample</tag>,
              <tag>informalfigure</tag>, and
              <tag>informaltable</tag> elements.
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>There is now CSS support for adding a “draft” watermark
          to documents with a draft status (for both screen and print
          renderings).
          </para>
        </listitem>
        <listitem>
          <para>An extra wrapper has been added to the content of
          <tag>revision</tag> in a <tag>revhistory</tag>.
          </para>
        </listitem>
        <listitem>
          <para>A bug has been fixed where <tag>sidebar</tag> was
          accidentally being rendered in the DocBook namespace.
          </para>
        </listitem>
        <listitem>
          <para><link xlink:href="https://prismjs.com/">Prism</link> highlighting
          has been updated to version 1.28.0.</para>
        </listitem>
        <listitem>
          <para><link xlink:href="https://highlightjs.org/">Highlight.js</link>
          highlighting has been updated to version 11.6.0 and is now part
          of the distribution rather than relying on CDN access.
          </para>
        </listitem>
      </itemizedlist>
    </revdescription>
  </revision>
-->
</revhistory>
<legalnotice>
<literallayout><citetitle>DocBook xslTNG</citetitle>
Copyright © 2020–2022 Norman Walsh.
All Rights Reserved.</literallayout>

<para>Permission is granted to copy, distribute and/or modify this
document under the terms of the GNU Free Documentation License,
Version 1.1 or any later version published by the Free Software
Foundation.
A copy of the license is included in <xref linkend="gfdl"/>.</para>
</legalnotice>

<legalnotice>
<para>Many of the designations used by manufacturers and sellers to
distinguish their products are claimed as trademarks. Where those
designations appear in this book and the authors were aware
of a trademark claim, the designations have been printed in caps or
initial caps.</para>

<para>While every precaution has been taken in the preparation of this
book, the publisher and author assume no responsibility for errors or
omissions, or for damages resulting from the use of the information
contained herein.</para>
</legalnotice>

<copyright>
<year>2020</year>
<year>2021</year>
<year>2022</year>
<holder>Norman Walsh</holder>
</copyright>
</info>
<part>
<title>Introduction</title>
<preface version="5.0" xml:id="preface">
<info>
  <?db filename="ch00"?>
  <title>Preface</title>
</info>

<para>These stylesheets are the third
iteration of stylesheets for DocBook that I’ve written. I started working on the
<link xlink:href="https://github.com/docbook/xslt10-stylesheets">XSLT 1.0
Stylesheets for DocBook</link> in the 90’s, before XSLT 1.0 was
even a W3C Recommendation. I started working on the
<link xlink:href="https://github.com/docbook/xslt20-stylesheets">XSLT 2.0
Stylesheets for DocBook</link> just around the time when XSLT 2.0 became
a W3C Recommendation. I wrote most of
<citetitle>DocBook xslTNG</citetitle> just a month or so before the third anniversary
of the XSLT 3.0 Recommendation.</para>

<para>Why did it take so long?</para>

  <para>To answer that question, we need to reflect for a moment on XSLT and
    its place in the XML ecosystem. When XSLT arrived on the scene, we
    were near the peak of XML enthusiasm. Not only was XML supported
    everywhere, it was possible to imagine XSLT everywhere as well.
    Certainly, the presence of XSLT in the browser felt significant at
    the time.
  </para>
  <para>The ubiquity of XML and the fact that XSLT was “just an XML
    vocabulary” may have contributed to another significant phenomenon:
    lots of users who did not self identify as programmers were learning
    to use XSLT and doing significant things with it.
  </para>
  <para>There were other tools available for transforming markup at the
    time, and arguably some of them were better than XSLT, but they were
    programming languages and you had to be a programmer to use them.
    They were also mostly commercial applications not widely available
    to casual users.
  </para>
  <para>XSLT was free, it was everywhere, and it was used by everyone, not
    “just” programmers. It was the clear winner than and remains the
    clear winner today in terms of markup transformation.
  </para>
  <para>You could do a lot of things with <xref linkend="XSLT10"/>. You could do a lot more
    things than you might at first even have thought possible. (In fact,
    you could do all things, but the
    Turing complete nature of XSLT isn’t relevant here.) Some very
    common tasks, like grouping, were possible but difficult. Lots of
    very useful things were either not possible or required extensions:
    regular expressions, functions, date and time formatting, creating
    special characters in the output, to name just a few.
  </para>
  <para><xref linkend="XSLT20"/> solved all of these problems (and more). Significantly, I
    think, all of these new features appealed directly to almost all
    users of XSLT 1.0. Everyone had encountered a grouping problem
    (building an index, for example). Everyone had wanted regular
    expression matching or date formatting. Lots of users wanted to
    write more sophisticated predicates (and many were willing to learn
    how to use functions to achieve that result).
  </para>
  <para><xref linkend="XSLT30"/> arguably introduces larger and
  more dramatic features than XSLT 2.0 did. There are a bunch of new
  features designed to enable streaming processing; there are
  significant software engineering improvements: packaging, exception
  handling, and assertions; there are common programming language
  constructs like maps and arrays. There is also a selection of
  features inherited from updates to XPath (new functions, a subset of
  <code>let</code> syntax, and support for higher order
  functions, for example).
  </para>
  <para>What’s curious, I think, is that many of these features are probably
    less immediately appealing to many (most?) current users. XSLT 2.0
    doesn’t feel constraining in the same way that XSLT 1.0 did, and the
    features in XSLT 3.0 don’t immediately and obviously solve problems
    that most users have.
  </para>
  <para>Streaming, for example, is incredibly powerful and it’s an important
    and significant milestone in markup processing. It makes it possible
    to solve whole classes of problems that were previously impossible
    to solve or required enormously expensive hardware. But my laptop
    will quite easily process a book full of complex markup that runs to
    hundreds of pages. I don’t have any problems that require a
    streaming processor.
  </para>
  <para>Likewise, packaging is useful and important. The <emphasis>DocBook
    xslTNG</emphasis> stylesheets should absolutely be a package. But
    that’s not true of a lot of stylesheets. There might be software
    engineering benefit in making a package even for stylesheets that
    you don’t intend to distribute, but that’s more likely to appeal to
    people who think of what they’re doing is programming.
  </para>
  <para>Nevertheless, there are lots of good reasons to use XSLT 3.0 even if
    you are “only” transforming documents and even if you don’t think of
    writing transformations as programming.
  </para>

</preface> <!-- preface -->
<chapter version="5.0" xml:id="whatfor">
<info>
  <?db filename="ch01"?>
  <title>Overview</title>
</info>

<para>Before we get started, let’s look at what the stylesheets do and
where you can get them!</para>

<section xml:id="whatdo">
<title>What do the stylesheets do?</title>

<para>The <citetitle>DocBook xslTNG</citetitle> stylesheets transform
DocBook V5.x into HTML. The intent is that they support all of DocBook
V5.2, including the DocBook Publishers elements. (The
<link xlink:href="https://xsltng.docbook.org/report/">test suite report</link>
gives a precise summary of the current state of coverage.) They will also
process DocBook V4.x documents by first converting them (tranforming
source elements that have changed, adding the namespace, etc.) into
5.x documents.</para>

<para>Some parts of DocBook, especially the modeling parts, are very
open-ended. One could, in principle, write a function synopsis for any
programming language. The stylesheets are naturally going to support
only a subset of languages out of the box. Every attempt has been made
to make customizations easy where it’s anticipated that they may be
necessary.</para>

<para>The stylesheets can also be used to produced paged media such as
PDF files. This works by having a slightly different HTML
transformation initially, and then by further transforming the HTML so
that it can be formatted with an appropriate CSS formatter to produced
paged output. This is similar, but not the same as producing XSL
Formatting Objects and then transforming those.</para>

<para>Producing other output formats, EPUB files, for example, is
planned for the future but no specific schedule is promised. There are no
plans at the moment to produce XSL FO stylesheets.</para>
</section>

<section xml:id="getting">
<title>Getting the stylesheets</title>

<para>There are three ways to get the stylesheets: you can
<link linkend="get-github">download the latest release</link> from
GitHub, you can <link linkend="get-maven">get them from Maven</link>,
or you can clone
<link xlink:href="https://github.com/docbook/xslTNG">the repository</link>
and  <link linkend="building">build them yourself</link>. We’ll cover
the first two options in this chapter; <xref linkend="building"/> covers
the last option in detail.</para>

<section xml:id="get-github">
<title>Download the latest release</title>

<para>The latest release is always available from the
<link xlink:href="https://github.com/docbook/xslTNG/releases">GitHub
releases page</link>. At the time of publication, the latest release was
version <?DocBook-xslTNG-version?>.</para>

<para>Distributed this way, you’ll get a ZIP file that contains the stylesheets
plus a number of ancillary files and tools. These are mostly covered in
the next chapter <xref linkend="using"/>.</para>

<para>You can unzip the file anywhere that’s convenient: in your home
directory or in a system-wide location.</para>

</section>

<section xml:id="get-maven">
<title>Getting the release from Maven</title>

<para>The latest release is always available
<link xlink:href="https://search.maven.org/search?q=org.docbook.docbook-xslTNG">from
Maven</link><footnote><para>With the caveat that it sometimes takes a few
hours for the releases to make their way from the registry onto the website.
If you’re chasing the very latest release and it’s just been published, it
may be available before it appears on the website.</para></footnote>.
</para>

<para>The group, artifact, and version ID for the latest release at
the time of publication is:</para>

<para role="center"><code>org.docbook:docbook-xslTNG:<?DocBook-xslTNG-version?></code></para>

<para>If you’re comfortable using Maven, I’m going to assume that’s all you
need to know.</para>

<para>The Maven distribution differs from the zip file in a couple of ways:</para>

<orderedlist>
<listitem>
<para>It doesn’t bundle any of the dependencies. The
<link linkend="get-github">ZIP file</link> is more akin
to
<link xlink:href="https://stackoverflow.com/questions/11947037/what-is-an-uber-jar">an
“uber” or “fat” jar</link>; it includes (some of) the core dependencies so
that it works out-of-the-box. Maven is designed to resolve dependencies,
so that shouldn’t be necessary here.</para>
</listitem>
<listitem>
<para>The Maven jar doesn’t include the Python script or the extra resources
(CSS and JavaScript files) because it doesn’t seem like it would be convenient
to extract them from the Maven jar (which will probably be installed deep in
some repository hierarchy well out of sight). Consequently, you may want to
<link linkend="get-github">download the distribution</link> periodically as well.
</para>
</listitem>
</orderedlist>

</section>
</section>
</chapter> <!-- getting -->
<chapter version="5.0" xml:id="using">
<info>
  <?db filename="ch02"?>
  <title>Using the stylesheets</title>
</info>

<para>In principle, the stylesheets will run with any conformant XSLT
3.0 processor. For many users, that means
<link xlink:href="http://saxonica.com/">Saxon</link>. Although earlier versions
may work, Saxon 10.1 or later is recommended.</para>

<para>In principle, the instructions for using the stylesheets are
straightforward: using your XSLT 3.0 processor of choice, transform your
DocBook source documents with the <filename>docbook.xsl</filename>
stylesheet in the <filename class="directory">xslt</filename>
directory of the distribution.</para>

<para>In practice, for most users, running the stylesheets will
require getting a Java environment configured appropriately. For many,
one of the most significant challenges is getting all of the
dependencies sorted out. Modern software development, for better or
worse, often consists of one library relying on another which relies
on another, etc.</para>

<para>The <citetitle>DocBook xslTNG</citetitle> stylesheets attempt to
simplify this process, especially for the “out of the box” experience
by providing two convenience methods for running the stylesheets: a
jar file with a <classname>Main</classname> class, and a Python script
that attempts, among other things, to make sure all of the
dependencies are available.</para>

<para>If you’re an experience Java user, you may prefer to simply run
the stylesheets
<link linkend="run-with-java">directly with Java</link>.</para>

<para>Irrespective of which method you choose, running the stylesheets
is simply a matter of processing your input document
<quote><replaceable>myfile.xml</replaceable></quote> with
<quote><filename>xslt/docbook.xsl</filename></quote>. For example:
</para>

<screen role="monochrome border">$ <userinput>saxon myfile.xml -xsl:xslt/docbook.xsl -o:myfile.html</userinput>
</screen>

<para>The exact path to <filename>docbook.xsl</filename> will vary, of course,
but it’s in the <filename class="directory">xslt</filename> directory of the
distribution.</para>

<note>
<para>The resulting HTML document contains references to CSS stylesheets
and possibly JavaScript libraries. The output won’t look as nice in your browser
if those resources aren’t available. They’re in the <filename class="directory">resources</filename> directory of the distribution. A quick and easy way to see the
results is simply to send the output to the <filename class="directory">samples</filename>
directory from the distribution. The resources have already been copied into
that directory. In the longer run, you’ll want to make sure that they get
copied into the output directory for each of your projects.</para>
<para>Alternatively, you can copy them to a web location of your choosing and
point to them there. You can even point to them in
<link xlink:href="https://cdn.docbook.org/release/xsltng/current/resources">the
DocBook CDN</link>, but beware that those are not immutable. The “current”
version will change with every release and versioned releases will not persist
indefinitely.</para>
<para>Change the <parameter>resource-base-uri</parameter><indexterm><primary>param</primary><secondary>resource-base-uri</secondary></indexterm> to adjust the paths
used in the output document.</para>
</note>

<para>Many aspects of the transformation can be controlled simply by
setting parameters (see <link linkend="params"/>). It’s also possible
to change the transformation by writing your own customization layer
(see <link linkend="customization"/>).</para>

<section xml:id="java-main">
<title>Using the Jar</title>

<para>The <link linkend="get-github">ZIP distribution</link> includes a
JAR file that you can run directly. That
JAR file is
<filename><replaceable>$ROOT</replaceable>/libs/docbook-xslTNG-<replaceable>version</replaceable>.jar</filename>
where “<code><replaceable>$ROOT</replaceable></code>” is whatever directory you chose
to unzip the distribution into and <replaceable>version</replaceable> is the
stylesheet version.</para>

<para>Assuming you unzipped the version <?DocBook-xslTNG-version?> distribution into
<filename class="directory">/home/ndw/xsltng</filename>, you can run
the JAR like this:</para>

<para><code>java -jar /home/ndw/xsltng/libs/docbook-xslTNG-<?DocBook-xslTNG-version?>.jar</code></para>

<para>Let’s try it out. Open a shell window and change to the samples directory,
<filename class="directory">/home/ndw/xsltng/samples</filename> assuming you unzipped
it as described above. Now run the java command:</para>

<screen role="monochrome border">$ <userinput>java -jar ../libs/docbook-xslTNG-<?DocBook-xslTNG-version?>.jar article.xml</userinput>
<computeroutput>&lt;!DOCTYPE html&gt;&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
…more HTML here...
&lt;nav class="bottom"&gt;&lt;/nav&gt;&lt;/body&gt;&lt;/html&gt;</computeroutput></screen>

<para>That big splash of HTML was your first DocBook document
formatted by the stylesheets! Slightly more usefully, you can save
that HTML in a file:
</para>

<screen role="monochrome border">$ <userinput>java -jar ../libs/docbook-xslTNG-<?DocBook-xslTNG-version?>.jar article.xml \
        -o:article.html</userinput></screen>

<para>If you now open <filename>article.html</filename> in your
favorite web browser, you’ll see the transformed sample document
which should look like <xref linkend="fig-sample"/>.
</para>

<figure xml:id="fig-sample">
<title>The sample document: article.xml</title>
<mediaobject>
<alt>A rendering of the sample document</alt>
<imageobject>
<imagedata fileref="media/sample.png" width="5.0in"/>
</imageobject>
<textobject>
<para>This is a rendering of the sample document. It consists of the
title “Sample Article” centered on the screen with a short paragraph
of text below it. The text reads: This is a very simple DocBook
document. It serves as a kind of "smoke test" to demonstrate that the
stylesheets are working.
</para>
</textobject>
</mediaobject>
</figure>

<para xml:id="caveats">The JAR file, run this way, accepts the same
<link xlink:href="https://www.saxonica.com/html/documentation/using-xsl/commandline/">command line options</link> as Saxon, with a few caveats:</para>

<variablelist>
<varlistentry><term>No <code>-x</code>, <code>-y</code>, or <code>-r</code> options</term>
<listitem>
<para>The executable in the JAR file automatically configures Saxon to
use a catalog-based resolver and points the resolver at a catalog that
includes the files in the distribution.
</para>
</listitem>
</varlistentry>
<varlistentry><term>No <code>-init</code> option</term>
<listitem>
<para>The <citetitle>DocBook xslTNG</citetitle>
<link linkend="extensions">extension functions</link> will be registered
automatically.</para>
</listitem>
</varlistentry>
<varlistentry><term>Multiple <code>-catalog</code> options</term>
<listitem>
<para>You can repeat the <code>-catalog</code> option. All of the catalogs
you specify will be searched before the default catalog.</para>
</listitem>
</varlistentry>
<varlistentry><term>Default stylesheet</term>
<listitem>
<para>If you do not specify a stylesheet with the <code>-xsl</code> option,
the <filename>xslt/docbook.xsl</filename> stylesheet will be used automatically.
</para>
</listitem>
</varlistentry>
</variablelist>
</section>

<section xml:id="python-script">
<title>Using the Python script</title>

<para>The <link linkend="get-github">ZIP distribution</link> includes a
Python script in the <filename class="directory">bin</filename> directory.
This helper script is a convenience wrapper around Saxon. It sets up
the Java classpath and automatically configures a catalog resolver and
the DocBook extension functions.</para>

<important>
<para>The script requires the <application>click</application> and
<application>pygments</application> packages,
which you must install with <application>pip</application> before
running the script. For example:</para>
<programlisting linenumbering="unnumbered">python3 -m pip install pygments=2.6.1 click</programlisting>
</important>

<para>This script behaves much like the JAR file described in
<xref linkend="java-main"/>. In particular,
it accepts the same
<link xlink:href="https://www.saxonica.com/html/documentation/using-xsl/commandline/">command line options</link> as Saxon, with
<link linkend="caveats">the same caveats</link>.</para>

<para>The significant feature of the Python script is that it will
attempt to sort out the dependencies for you. It assumes that you’ve
used Maven to install the package and its dependencies, so you’ll
have to have <link xlink:href="http://maven.apache.org/">installed
Maven</link>. How you do that varies by platform, but your package
manager probably has it.</para>

<para>The following command will assure that you’ve downloaded all of
the necessary dependencies. You only have to do this once.</para>

<screen role="monochrome border">$ <userinput>mvn org.apache.maven.plugins:maven-dependency-plugin:2.4:get \
      -Dartifact=org.docbook:docbook-xslTNG:<?DocBook-xslTNG-version?></userinput></screen>

<para>That might take a while.</para>

<para>The script will work through the dependencies that you have
installed, and the things that they depend on, and construct a Java
class path that includes them all.</para>

<para>The script stores its configuration in
<code>.docbook-xsltng.json</code> in your home directory.</para>

<para>Options passed to the script are processed as follows: the
initial options, all introduced by two hyphens, are interpreted by
this script; all the remaining options are passed directly to
Saxon.</para>

<para>The script options are:</para>

<variablelist>
<varlistentry>
<term><option>--help</option></term>
<listitem>
<para>Prints a usage message.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--config:<replaceable>filename</replaceable></option></term>
<listitem>
<para>Use <replaceable>filename</replaceable> as the configuration
file. The default configuration file is
<filename>.docbook-xsltng.json</filename> in your home directory.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--resources<replaceable>:dir</replaceable></option></term>
<listitem>
<para>This option will copy the resources directory (the CSS and JavaScript files)
from the distribution into the directory where your output files are going,
<replaceable>dir</replaceable>. If
<replaceable>dir</replaceable> is not specified, the script attempts to
work out the directory from the <option>-o</option> option provided to Saxon.
If no directory is specified and it can’t work out what the directory is, it does nothing.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--java:<replaceable>javaexec</replaceable></option></term>
<listitem>
<para>Use <replaceable>javaexec</replaceable> as the Java executable.
The default java executable is the first one on your <envar>PATH</envar>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--home:<replaceable>dir</replaceable></option></term>
<listitem>
<para>Use <replaceable>dir</replaceable> as the <citetitle>DocBook
xslTNG</citetitle> home directory. This should be the location where
you unzipped the distribution. (You probably shouldn’t change this.)
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--verbose</option></term>
<listitem>
<para>Enables <emphasis>verbose</emphasis> mode; it prints more
messages about what it finds.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--debug</option></term>
<listitem>
<para>Enables <emphasis>debug</emphasis> mode. Instead of running the
transformation, it will print out the command that would have been run.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--</option></term>
<listitem>
<para>Immediately stop interpreting options. Everything that follows this option
will be passed to Saxon, even if it begins with two hyphens.
</para>
</listitem>
</varlistentry>
</variablelist>
</section>

<section xml:id="run-with-java">
<title>Run with Java</title>

<para>Assuming you’ve organized your class path so that all of the
dependencies are available (you may find that using a tool like Gradle
or Maven simplifies this process), simply run the Saxon class.</para>

<para>For Saxon HE, the class is <classname>net.sf.saxon.Transform</classname>.
For Saxon PE and EE, the class is <classname>com.saxonica.Transform</classname>.</para>

</section>

<section xml:id="run-with-docker">
<title>Run with Docker</title>

<para>This is experimental.</para>

<para>The <filename class="directory">docker</filename> directory
contains an experimental Dockerfile. Using docker allows you to
isolate the environment necessary to run the <citetitle>DocBook xslTNG
Stylesheets</citetitle> from your local environment.</para>

<para>Using Docker is a three step process. Step 0, you have to have
installed Docker!</para>

<orderedlist>
<listitem>
<para>Build the docker image. In the <filename class="directory">docker</filename> directory, run the docker build
command:</para>

<screen role="monochrome border">$ <userinput>docker build -t docbook-xsltng .</userinput></screen>

<para>The “<option>-t</option>” option provides a tag for the image;
you can make this anything you want. There’s a <code>VERSION</code>
build argument if you want to build a particular release. For example,</para>

<screen role="monochrome border">$ <userinput>docker build --build-arg VERSION=0.9.14 -t docbook-xsltng .</userinput></screen>

<para>will build a Docker image for the 0.9.14 release of the
stylesheets irrespective of the version in the Dockerfile.</para>
</listitem>
<listitem>
<para>Run the image, for example:</para>

<screen role="monochrome border">$ <userinput>docker run docbook-xsltng samples/article.xml</userinput></screen>

<para>If you chose a different tag when you built the image, use that
tag in place of <quote><code>docbook-xsltng</code></quote> in the <command>run</command>
command. Everything after the container tag becomes options to the
<link linkend="python-script"><command>docbook</command> Python script</link>.
</para>
</listitem>
</orderedlist>

<note>
<para>The context the script runs in is <emphasis>inside</emphasis>
the container. It can’t for example, see your local filesystem. The
example above works because the distribution is unpacked inside the
container. So the <filename>article.xml</filename> document isn’t the
one on your local filesystem.</para>
</note>

<para>You can use the Docker facilities for mounting directories to
change what documents the script can access. For example:
</para>

<screen role="monochrome border">$ <userinput>docker run -v /tmp:/output -v /path/to/samples:/input \
       docbook-xsltng /input/article.xml chunk=index.html \
       chunk-output-base-uri=/output/</userinput></screen>

<para>Assuming that the “samples” directory in the distribution is
located at <filename class="directory">/path/to/samples</filename>, this will chunk the
<filename>article.xml</filename> sample document that the script sees
in <filename class="directory">/input</filename>
(which is where you mounted samples) and it will write the
output to <filename class="directory">/output</filename> (which is where you mounted
<filename class="directory">/tmp</filename>).</para>

<para>When the script finishes, the chunked output will be in
<filename class="directory">/tmp</filename>.</para>

<tip>
<para>If you choose to use Docker, you don’t have to rebuild the container
everytime a new stylesheet release occurs. You can simply mount the new
<filename class="directory">xslt</filename> directory into the container
like any other directory.</para>
</tip>
</section>

<section xml:id="extensions">
<title>Extension functions</title>

<para>The stylesheets are distributed with several extension functions:</para>

<variablelist>
<varlistentry><term><function>ext:cwd</function></term>
<listitem>
<para>Returns the “current working directory” where the processor is running.
</para>
</listitem>
</varlistentry>
<varlistentry><term><function>ext:image-properties</function></term>
<listitem>
<para>Returns basic properties of an image, width and height.
</para>
</listitem>
</varlistentry>
<varlistentry><term><function>ext:image-metadata</function></term>
<listitem>
<para>Returns much more comprehensive image properties and understands
far more image types than <function>ext:image-properties</function>.
Requires the <biblioref linkend="metadata-extractor"/> libraries.
</para>
</listitem>
</varlistentry>
<varlistentry><term><function>ext:pygmentize</function></term>
<listitem>
<para>Runs the external <biblioref linkend="Pygments"/> processor on
a verbatim listing to add syntax highlighting.
</para>
</listitem>
</varlistentry>
<varlistentry><term><function>ext:pygmentize-available</function></term>
<listitem>
<para>Returns true if the external <biblioref linkend="Pygments"/> processor
is available on the current system.
</para>
</listitem>
</varlistentry>
<varlistentry><term><function>ext:xinclude</function></term>
<listitem>
<para>Performs <biblioref linkend="xinclude"/> processing. This extension supports
the basic XPointer schemes, <biblioref linkend="RFC5147"/> fragment identifiers,
and <biblioref linkend="searchfid"/>, a scheme that supports searching in text
documents.
</para>
</listitem>
</varlistentry>
<varlistentry><term><function>ext:validate-with-relax-ng</function></term>
<listitem>
<para>Performs RELAX NG validation.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>At the time of this writing, all of these extension functions require
Saxon 10.1 or later.
Make sure that the <filename>docbook-xsltng-<replaceable>version</replaceable>.jar</filename>
file is on your class path and use the Saxon <code>-init</code> option to
load them:</para>

<screen><?db verbatim-style="plain"
?><userinput>-init:org.docbook.xsltng.extensions.Register</userinput></screen>

<section xml:id="ext-debug">
<title>Extension function debugging</title>

<para>When an extension function fails, or produces result other than
what you expect, it can be difficult sometimes to work out what
happened. You can enable debugging messages by setting the the system
property <property>org.docbook.xsltng.verbose</property>.</para>

<para>Setting the property to the value “<code>true</code>” enables
all of the debugging messages. For a more selective approach, set it
to a comma separated list of keyword values.</para>

<para>The following keywords are recognized:</para>

<variablelist>
<varlistentry><term><literal>registration</literal></term>
<listitem>
<para>Enables messages related to function registration.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>image-properties</literal></term>
<listitem>
<para>Enables messages related to image properties.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>image-errors</literal></term>
<listitem>
<para>Enables messages related to image properties, but only when the
function was unable to find the properties or encountered some sort of error
condition.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>pygmentize-show-command</literal></term>
<listitem>
<para>Enables a message that will show the pygmentize command as it was run.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>pygmentize-show-results</literal></term>
<listitem>
<para>Enables a message that will show the output of the pygmentize command,
before it is processed by the function.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>pygmentize-errors</literal></term>
<listitem>
<para>Enables messages related to errors encountered attempting to highlight
listings with pygmentize.
</para>
</listitem>
</varlistentry>
</variablelist>
</section>

</section>

<section xml:id="chunking">
<title>“Chunked” output</title>

<para>Transforming <quote><filename>myfile.xml</filename></quote> with
<filename>docbook.xsl</filename> usually produces a single HTML
document. For large documents, books like this one for example, it’s
sometimes desirable to break the input document into a collection of
web pages. You can achieve this with the
<citetitle>DocBook xslTNG Stylesheets</citetitle> by setting
two parameters:
</para>

<variablelist>
<varlistentry><term><parameter>chunk</parameter><indexterm><primary>param</primary><secondary>chunk</secondary></indexterm></term>
<listitem>
<para>This parameter should be set to the name that you want to use for the
first, or top, page of the result. The name
<quote><filename>index.html</filename></quote> is a common choice.
</para>
</listitem>
</varlistentry>
<varlistentry><term><parameter>chunk-output-base-uri</parameter><indexterm><primary>param</primary><secondary>chunk-output-base-uri</secondary></indexterm></term>
<listitem>
<para>This parameter should be set to the absolute path where you want
to use as the base URI for the result documents, for example
<filename class="directory">/home/ndw/output/guide/</filename>.</para>
<note>
<para>The trailing slash is important, this is a URI. If you specify
only <filename class="directory">/home/ndw/output/guide</filename>, the
base URI will be taken to be <filename class="directory">/home/ndw/output/</filename>,
and the documents won’t have the URIs you expect.</para>
</note>
<para>This output URI has nothing to do with where your documents are
ultimately published and the documents themselves won’t contain any references
to it. It simply establishes the root of output. If you’re running your
XSLT processor from the command line, it’s likely that the documents will
be written to that location. If you’re running an XProc pipeline, it simply
controls the URIs that appear on the secondary result port.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>Many aspects of chunking can be easily customized. A few of the most
relevant parameters and templates are:
</para>

<variablelist>
<varlistentry><term><parameter>chunk-include</parameter><indexterm><primary>param</primary><secondary>chunk-include</secondary></indexterm> and 
<parameter>chunk-exclude</parameter><indexterm><primary>param</primary><secondary>chunk-exclude</secondary></indexterm></term>
<listitem>
<para>Taken together, these two parameters determine what elements in your
source document will be considered “chunks” in the output.</para>
</listitem>
</varlistentry>
<varlistentry><term><parameter>persistent-toc</parameter><indexterm><primary>param</primary><secondary>persistent-toc</secondary></indexterm></term>
<listitem>
<para>If this parameter <glossterm>is true</glossterm>, then a JavaScript
“fly-out” table of contents will be available on every page.</para>
</listitem>
</varlistentry>
<varlistentry><term><parameter>chunk-nav</parameter><indexterm><primary>param</primary><secondary>chunk-nav</secondary></indexterm></term>
<listitem>
<para>This parameter, discussed more thoroughly in
<link linkend="speaker-notes"/> enables keyboard navigation between
chunks.</para>
</listitem>
</varlistentry>
<varlistentry><term><code role="template">t:top-nav</code> and
<code role="template">t:bottom-nav</code></term>
<listitem>
<para>These templates control how the top-of-page and bottom-of-page
navigation aids are constructed.</para>
</listitem>
</varlistentry>
</variablelist>

<section xml:id="speaker-notes">
<title>Keyboard navigation and speaker notes</title>

<para>If the <parameter>chunk-nav</parameter><indexterm><primary>param</primary><secondary>chunk-nav</secondary></indexterm> parameter <glossterm>is
true</glossterm>, a reference to an additional JavaScript library will
be included in the resulting pages. This library supports keyboard
navigation between the pages. The navigation keys are described in the
<link linkend="p_chunk-nav">parameter reference page</link>.
</para>

<para>There is an additional customization layer
(<filename>xslt/speaker-notes.xsl</filename>) provided for adding
speaker notes to the pages. This is provided both as an example of a
customization layer and because the author finds it convenient.</para>

<para>If you use the speaker notes customization layer, the any top-level
element in a chunk with the role “<literal>speaker-notes</literal>” will
be suppressed from the default presentation. If you press “<keycap>S</keycap>”
on the page, then you’ll get a “speaker notes” view of the page.</para>

<para>This can be combined with another extension, the use of browser
local storage, to create a simple presentation system. Add this
<tag namespace="http://www.w3.org/1999/xhtml">meta</tag> tag to the
<tag>info</tag> element of your document:</para>

<screen role="monochrome border">&lt;meta xmlns="http://www.w3.org/1999/xhtml"
      name="localStorage.key" content="keyname"/&gt;</screen>

<para>That will cause the pages to keep track of their location using the
“<literal>keyname</literal>” property in local storage. This is important
because it enables the following trick:</para>

<orderedlist>
<listitem><para>Configure keyboard navigation, speaker notes, and local storage
in your document.</para>
</listitem>
<listitem><para>Arrange for your document to be served up from a web server.
You can do this by running one locally or by putting the documents on a web
server somewhere else.</para>
</listitem>
<listitem><para>Open up the main page of your document in a browser.
</para></listitem>
<listitem><para>Open up a second browser <emphasis>window</emphasis> pointing
to the same page. Navigate back and forth between the pages. You should see
that the two windows stay in sync.
</para></listitem>
<listitem><para>Now press “<keycap>S</keycap>” in one of the windows and
navigate around. You should see that the two windows stay in sync and that your
speaker notes are consistently presented in one of the windows.</para>
</listitem>
</orderedlist>

<para>I often use this trick when I’m giving presentations. I can project the
slides in one browser window and keep the other browser window on my laptop.
This allows me to see my notes while easily projecting the “real” content.</para>

</section>
</section>

<section xml:id="profiling">
<title>Effectivity attributes and profiling</title>

<para>When documenting computer hardware and software systems, it’s
very common to have different documentation sets that overlap
signficantly. Documentation for two different models of network
router, for example, might differ only in a few specific details. Or a
user guide aimed at experts might have a lot in common with the new user
guide.</para>

<section>
<title>Effectivity</title>

<para>There are many ways to address this problem, but one of the
simplest is to identify the “effectivity” of different parts of a
document. Effectivity in this context means identifying the parts
of a document that are effective for different audiences.</para>

<para>When a document is formatted, the stylesheets can selectively
include or omit elements based on their configured effectivity. This
“profiled” version of the document is the one that’s explicitly
targeted to the audience specified.</para>

<para>DocBook supports a wide variety of common attributes for this
purpose:</para>

<table>
<title>Common DocBook effectivity attributes</title>
<tgroup cols="2">
<thead>
<row>
<entry>Attribute</entry>
<entry>Nominal effectivity axis</entry>
</row>
</thead>
<tbody>
<row><entry>arch</entry>
     <entry>The architecture, Intel or AMD</entry></row>
<row><entry>audience</entry>    
     <entry>The audience, operations or development</entry></row>
<row><entry>condition</entry>   
     <entry>Any condition (semantically neutral)</entry></row>
<row><entry>conformance</entry> 
     <entry>The conformance level</entry></row>
<row><entry>os</entry>          
     <entry>The operating system, Windows or Linux</entry></row>
<row><entry>outputformat</entry>
     <entry>The output format, print or online</entry></row>
<row><entry>revision</entry>    
     <entry>The revision, 3.4 or 4.0.</entry></row>
<row><entry>security</entry>    
     <entry>The security, secret or top-secret</entry></row>
<row><entry>userlevel</entry>   
     <entry>The user level, novice or expert</entry></row>
<row><entry>vendor</entry>      
     <entry>The vendor, Acme or Yoyodyne</entry></row>
<row><entry>wordsize</entry>    
     <entry>The word size, 32 or 64 bit</entry></row>
</tbody>
</tgroup>
</table>

<para>In addition, the stylesheets support profiling on several common attributes
that are not explicitly for effectivity: <tag class="attribute">xml:lang</tag>, <tag class="attribute">revisionflag</tag>,
and <tag class="attribute">role</tag>.</para>

<note>
<para>DocBook places no constraints on the values used for effectivity
and the stylesheets don’t either. You’re free to use “cat” and “dog”
as effectivity values in the <tag class="attribute">wordsize</tag> attribute, if you
wish. The further you deviate from the nominal meaning, the more
important it is to document your system!</para>
</note>

<para>Consider <xref linkend="ex-profile-os"/>.</para>

<example xml:id="ex-profile-os">
<title>A contrived effectivity example</title>
<programlisting><?db verbatim-style="plain"
?>&lt;para&gt;This is an utterly contrived example of
some common text. Options are introduced with the
&lt;phrase os="windows"&gt;/&lt;/phrase&gt;
&lt;phrase os="mac;linux"&gt;-&lt;/phrase&gt; character.&lt;/para&gt;</programlisting>
</example>

<para>If this document is formatted with the <parameter>profile-os</parameter><indexterm><primary>param</primary><secondary>profile-os</secondary></indexterm>
parameter set to “windows”, it will produce:</para>

<blockquote>
<para>This is an utterly contrived example of
some common text. Options are introduced with the
<phrase os="windows">/</phrase>
 character.</para>
</blockquote>

<para>If “mac” or “linux” is specified, it will produce:</para>

<blockquote>
<para>This is an utterly contrived example of
some common text. Options are introduced with the

<phrase os="mac;linux">-</phrase> character.</para>
</blockquote>

<important>
<para>If the document is formatted without any profiling, <emphasis>all</emphasis>
of the versions will be included:</para>
<blockquote>
<para>This is an utterly contrived example of
some common text. Options are introduced with the
<phrase>/</phrase>
<phrase>-</phrase> character.</para>
</blockquote>
<para>That is unlikely to work well.</para>
</important>

</section>
<section>
<title>Profiling</title>

<para>The profiling parameters are applied to every document:
<parameter>profile-arch</parameter><indexterm><primary>param</primary><secondary>profile-arch</secondary></indexterm>,
<parameter>profile-audience</parameter><indexterm><primary>param</primary><secondary>profile-audience</secondary></indexterm>,
<parameter>profile-condition</parameter><indexterm><primary>param</primary><secondary>profile-condition</secondary></indexterm>,
<parameter>profile-conformance</parameter><indexterm><primary>param</primary><secondary>profile-conformance</secondary></indexterm>,
<parameter>profile-lang</parameter><indexterm><primary>param</primary><secondary>profile-lang</secondary></indexterm>,
<parameter>profile-os</parameter><indexterm><primary>param</primary><secondary>profile-os</secondary></indexterm>,
<parameter>profile-outputformat</parameter><indexterm><primary>param</primary><secondary>profile-outputformat</secondary></indexterm>,
<parameter>profile-revision</parameter><indexterm><primary>param</primary><secondary>profile-revision</secondary></indexterm>,
<parameter>profile-revisionflag</parameter><indexterm><primary>param</primary><secondary>profile-revisionflag</secondary></indexterm>,
<parameter>profile-role</parameter><indexterm><primary>param</primary><secondary>profile-role</secondary></indexterm>,
<parameter>profile-security</parameter><indexterm><primary>param</primary><secondary>profile-security</secondary></indexterm>,
<parameter>profile-userlevel</parameter><indexterm><primary>param</primary><secondary>profile-userlevel</secondary></indexterm>,
<parameter>profile-vendor</parameter><indexterm><primary>param</primary><secondary>profile-vendor</secondary></indexterm>, and
<parameter>profile-wordsize</parameter><indexterm><primary>param</primary><secondary>profile-wordsize</secondary></indexterm>. Each of these values is treated
as a string and broken into tokens at the
<parameter>profile-separator</parameter><indexterm><primary>param</primary><secondary>profile-separator</secondary></indexterm>.</para>

<para>For every element in the source document:</para>

<itemizedlist>
<listitem>
<para>If it specifies a value for an effectivity attribute, the value
is split into tokens at the
<parameter>profile-separator</parameter><indexterm><primary>param</primary><secondary>profile-separator</secondary></indexterm>.</para>
</listitem>
<listitem>
<para>If the corresponding profile parameter is not empty, then the
element is discarded unless at least one of the tokens in the profile
parameter list is also in the effectivity list.</para>
</listitem>
</itemizedlist>

<para>In practice, elements that don’t specify effectivity are always included
and profile parameters that are empty don’t exclude any elements.</para>

</section>

<section xml:id="dynprofiling">
<title>Dynamic profiling</title>

<para>Dynamic profiling is a feature that allows you to profile the output
of the stylesheets according to the runtime values of stylesheet parameters.
You can, for example, produce different output depending on whether or not
chunking is enabled or JavaScript is being used for annotations.</para>

<para>To enable dynamic profiling, set the <parameter>dynamic-profiles</parameter><indexterm><primary>param</primary><secondary>dynamic-profiles</secondary></indexterm>
parameter to “<glossterm baseform="is true">true</glossterm>”.</para>

<para>In the interest of performance, security, and legibility,
dynamic profiles don’t support arbitrary expressions.
You can use a variable name by itself, <code>$flag</code>, which tests
if that variable <glossterm>is true</glossterm>, or you can use a
simple comparison, <code>$var=value</code> which tests if (the string value of)
<code>$var</code> has the value <code>value</code>.
(If <code>$var</code> is a list, it’s an existential
test.) You also can’t use boolean operators or any other fancy expressions.
</para>

<para>If you really need to have a dynamic profile based on some
arbitrary condition, you can do it by making a customization layer
that stores that computation in a variable and then testing that
variable in your dynamic profile.</para>

<sidebar>
<title>Backwards incompatibility</title>
<para>This is slightly backwards
incompatible in that profile values that begin with a dollar sign are
now interpreted differently. This is only true if dynamic profiling is
enabled.</para>
</sidebar>

<para>An element with dynamic profiling will be published if none of
it’s profile expressions evaluate to false. This is slightly different
from the ordinary profiling semantic which publishes the element if
any of it’s values match.</para>
</section>
</section>

<section xml:id="syntax-highlighting">
<title>Syntax highlighting</title>

<para>Program listings and other verbatim environments can be “syntax highlighted”,
that is, the significant tokens in the listing can be colored differently (keywords in red,
quoted strings in blue, that sort of thing).</para>

<para>The default syntax highlighter is <biblioref linkend="Pygments"/>, an external
Python program. This has the advantage that the highlighted listing is available to
the stylesheets. The stylesheets can then render line numbers, call outs, and other
features.</para>

<para>But running an external program for every verbatim environment requires
<emphasis>having</emphasis> the external program and also, if there are many verbatim
environments, may slow down the formatting process</para>

<para>An alternative is to use a JavaScript highlighter in the browser such as
<biblioref linkend="highlight.js"/> or <biblioref linkend="Prism"/>. This approach
has no impact on formatting and doesn’t require an external process. However, it means the
<citetitle>xslTNG Stylesheets</citetitle> have no control over the process. Most of the 
verbatim options only apply when Pygments is used.</para>

<para>The choice of syntax highlighter is determined by the
<parameter>verbatim-syntax-highlighter</parameter><indexterm><primary>param</primary><secondary>verbatim-syntax-highlighter</secondary></indexterm> parameter.</para>
</section>

<section xml:id="print">
<title>Print output (dead tree editions)</title>

<para>Formatters, the tools that turn markup of any sort into
aesthetically pleasing (or even passably acceptable) printed pages are
fiendishly difficult to write.</para>

<para>In the XML space, there have been a number of standards and
vendor-specific solutions to this problem. The current standards are
<biblioref linkend="XSLFO"/> and <biblioref linkend="CSS"/>.
</para>

<para>At present, the <citetitle>DocBook xslTNG Stylesheets</citetitle>
are focused on CSS for print output. There’s a customization layer
that produces “paged-media-ready” HTML that can be processed with
a CSS formatter such as <biblioref linkend="AntennaHouse"/>
or <biblioref linkend="Prince"/>.</para>

<para>To get print output, format your documents with the
<filename>print.xsl</filename> stylesheet instead of the
<filename>docbook.xsl</filename> stylesheet. The additional cleanup provided
by <filename>print.xsl</filename> assures that footnotes, annotations, and
other elements will appear in the right place, and with reasonable
presentation, in the printed version.</para>

<para>The resulting HTML document can be formatted directly with a
CSS paged-media formatter.</para>

</section>

<section xml:id="epub">
<title>EPUB output</title>

<para>The <citetitle>DocBook xslTNG Stylesheets</citetitle> will
produce output designed for EPUB(3) if you use the
<filename>epub.xsl</filename> stylesheet instead of
<filename>docbook.xsl</filename>. This is new in version 1.11.0 and
may be incomplete. The output conforms to
<link xlink:href="https://www.w3.org/publishing/epubcheck/">EPUBCheck</link>
version 3.2.</para>

<para>Producing an EPUB file is a slightly complicated process. You
must produce (X)HTML that conforms to strict requirements, you must
produce a media type document containing a specific text string, you
must produce a manifest that identifies all of the content including
all the images, stylesheets, fonts, etc, and you must finally create a
ZIP archive (with some special consideration as well).</para>

<para>The stylesheets can only do part of this process. In some future
release where we use, for example, an XProc 3.0 pipeline, it may be
practical to do more.</para>

<para>When you run the EPUB stylesheet, the principle result document is the
media type document. This has two useful side effects: first, it establishes the
output base URI from which all the relative documents can be created, and second, if
you fail to process some element in the input, you’re likely to get extra text characters
in the principle result document. That will cause tools to reject the EPUB and draw your
attention to the error.</para>

<para>The stylesheets also produce the META-INF files and the OPS
directory containing the document parts and the manifest.</para>

<para>There are two parameters specific to EPUB:</para>

<variablelist>
<varlistentry><term><literal>pub-id</literal></term>
<listitem>
<para>This is the unique identifier for your EPUB. If you don’t specify one, a random
one will be generated for you.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>manifest-extra</literal></term>
<listitem>
<para>This is a URI. If it’s specified, then it must be an XML document and that will
be added to the EPUB manifest. This is how you can add links to media and other resources
that the stylesheets don’t know about.
</para>
</listitem>
</varlistentry>
</variablelist>

<section xml:id="metadata">
<title>Adding metadata</title>
<para>You can add elements to the <tag>info</tag> element of the root element of your
document to add metadata to your EPUB files. Elements in the Dublin Core namespace
will be copied through. You can also add the elements
<code>meta</code> and <code>link</code> in the special namespace
<code>http://docbook.org/ns/docbook/epub</code>.</para>
</section>

<section xml:id="epub-in-ation">
<title>EPUB in action</title>

<para>The <link xlink:href="https://github.com/docbook/getting-started/">Getting
Started</link> project has been updated to show how to create EPUB
from a book. The project has support for dealing with external media,
fonts, and constructing the final ZIP file.</para>
</section>
</section>
</chapter> <!-- using -->
<chapter version="5.0" xml:id="customization">
<info>
  <?db filename="ch03"?>
  <title>Customizing the stylesheets</title>
</info>

<para>In many circumstances, the stylesheets can be used “out of the
box” without any customization. But sometimes you may need to change
the formatting of certain elements. One common reason is to change the
formatting of title pages or navigational features. In other cases, it
may be to support local extensions to DocBook or simply to change the
markup to support a particular use case.</para>

<para>Three approaches are possible, with increasing degrees of
effort: changing stylesheet parameters, creating your own
customization layer, or making broader changes to the stylesheet’s
implementation.</para>

<para>The subject of broader implementation changes is the subject of
<xref linkend="implementation"/>. In this chapter, we’ll look at the
easier options.</para>

<section xml:id="change-params">
<title>Changing stylesheet parameters</title>

<para>The <citetitle>DocBook xslTNG Stylesheets</citetitle> define a
lot of parameters. They are all described in <xref linkend="params"/>.
If the change you want to make has already been parameterized, you may
be able to achieve your goal simply by setting a parameter at runtime.</para>

<para>For example, if you want to change the formatting of dates and times
in <tag>date</tag> elements, you can simply change the
<link linkend="p_date-date-format">date and time formatting</link>
parameters. Similarly, if you want to change the numeration style of
ordered lists, you can simply change the <link linkend="p_orderedlist-item-numeration">ordered list item
numeration</link> parameter.</para>

<para>These changes can be accomplished by simply passing the new
values to the processor, on the command line or in a configuration
file, for example. You do not have to write any XSLT to make these
changes.</para>

<para>Parameter values apply to the entire document processed by the
stylesheets. In some cases, you may wish to change the presentation of
just one or small number of elements. This can often be accomplished
with a <link linkend="pi_db">db processing instruction</link> in
the source document itself. These customizations can also be
accomplished without writing any XSLT.</para>

<para>If you want to make a change that isn’t supported by a
parameter, or an ad hoc exception that doesn’t have a supporting
processing instruction, you will have to write a customization layer.
(You are invited to submit an issue with your use case if you think it
would be of general interest.)
</para>

<para>You may also find it convenient to write a customization layer
if you want to change several parameters and you find it inconvenient
to pass them all to the processor on every invocation.
</para>
</section>

<section xml:id="layer">
<title>Creating a customization layer</title>

<para>A customization layer is simply an XSLT stylesheet that you
write which extends the DocBook stylesheets. The simplest<footnote><para>Ok,
technically, this stylesheet has a couple of namespace references that aren’t
strictly necessary so it could be a teeny bit simpler, but you’ll need those
declarations (and more!) if you want to do anything useful.</para></footnote> customization
layer is:</para>

<programlisting language="xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:db="http://docbook.org/ns/docbook"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns="http://www.w3.org/1999/xhtml"
    exclude-result-prefixes="db xs"
    version="3.0"&gt;

&lt;!-- This href has to point to your local copy
     of the stylesheets. --&gt;
&lt;xsl:import href="docbook/xslt/docbook.xsl"/&gt;

&lt;/xsl:stylesheet&gt;
</programlisting>

<para>This customization doesn’t do anything. But you can, for example, redefine
parameters if you wish:</para>

<programlisting language="xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:db="http://docbook.org/ns/docbook"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns="http://www.w3.org/1999/xhtml"
    exclude-result-prefixes="db xs"
    version="3.0"&gt;

&lt;xsl:import href="docbook/xslt/docbook.xsl"/&gt;

&lt;xsl:param name="orderedlist-item-numeration"
           select="'1'"/&gt;

&lt;xsl:param name="date-dateTime-format"
           select="'[D01] [MNn,*-3] [Y0001]
                   at [H01]:[m01]'"/&gt;

&lt;/xsl:stylesheet&gt;
</programlisting>

<para>This will have the effect of running the DocBook stylesheets with those two
parameters set as specified.</para>

<para>If you want to change the HTML output for an element, you can write a template
for that element in your customization layer. Consider this DocBook document:
</para>

<programlisting language="xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;article xmlns="http://docbook.org/ns/docbook"
         version="5.1"&gt;
&lt;info&gt;
&lt;title&gt;Sample Document&lt;/title&gt;
&lt;date&gt;2020-07-05&lt;/date&gt;
&lt;/info&gt;

&lt;para&gt;This is a sample &lt;productname&gt;DocBook&lt;/productname&gt;
document.&lt;/para&gt;

&lt;/article&gt;
</programlisting>

<para>Suppose that you decided you wanted to have the
<tag>productname</tag> element link automatically to the vendor
webpage.</para>

<important>
<para>The <citetitle>DocBook xslTNG Stylesheets</citetitle> process
<emphasis>all</emphasis> DocBook elements in the
<code role="mode">m:docbook</code> mode. This is different from previous XSLT stylesheets for DocBook
which simply used the default mode.</para>
<para>You must either specify a default mode in your customization layer
or remember to specify the mode on match templates and template applications.
If you forget the mode, you’ll get unexpected results!</para>
</important>

<para>One way to do that would be to redefine the template that processes the
<tag>productname</tag> element:</para>

<programlistingco>
<areaspec>
  <area xml:id="ex.xmlns-m" coords="5 52"/>
  <area xml:id="ex.excl-m" coords="8 40"/>
  <area xml:id="ex.m-docbook" coords="21 34"/>
  <area xml:id="ex.cramped" coords="24 1"/>
  <areaset xml:id="ex.next-match">
    <area xml:id="ex.next-match-44" coords="44 26"/>
    <area xml:id="ex.next-match-48" coords="48 28"/>
  </areaset>
</areaspec>
<programlisting language="xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:db="http://docbook.org/ns/docbook"
    xmlns:m="http://docbook.org/ns/docbook/modes"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns="http://www.w3.org/1999/xhtml"
    exclude-result-prefixes="db m xs"
    version="3.0"&gt;

&lt;xsl:import href="docbook/xslt/docbook.xsl"/&gt;

&lt;xsl:param name="orderedlist-item-numeration"
           select="'1'"/&gt;

&lt;xsl:param name="date-dateTime-format"
           select="'[D01] [MNn,*-3] [Y0001]
                   at [H01]:[m01]'"/&gt;

&lt;xsl:template match="db:productname"
              mode="m:docbook"&gt;
  &lt;xsl:variable name="name"
                select="normalize-space(.)"/&gt;

  &lt;xsl:variable name="url" as="xs:string?"&gt;
    &lt;xsl:choose&gt;
      &lt;xsl:when test="$name='DocBook'"&gt;
        &lt;xsl:sequence select="'https://docbook.org/'"/&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:when test="$name='DocBook xslTNG Stylesheets'"&gt;
        &lt;xsl:sequence select="'https://xsltng.docbook.org/'"/&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:when test="$name='Wikipedia'"&gt;
        &lt;xsl:sequence select="'https://wikipedia.org/'"/&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
        &lt;!-- Unrecognized --&gt;
      &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:variable&gt;
                  
  &lt;xsl:choose&gt;
    &lt;xsl:when test="empty($url)"&gt;
      &lt;xsl:next-match/&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
      &lt;a href="{$url}" title="Home page"&gt;
        &lt;xsl:next-match/&gt;
      &lt;/a&gt;
    &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</programlisting>
</programlistingco>

<calloutlist>
<callout arearefs="ex.xmlns-m">
<para>All of the DocBook elements are processed in the “<code role="mode">m:docbook</code>” mode.</para>
</callout>
<callout arearefs="ex.excl-m">
<para>Remember to exclude all the namespaces you declare so that they don’t wind up
scattered about in your HTML.</para>
</callout>
<callout arearefs="ex.m-docbook">
<para>I repeat, all of the DocBook elements are processed in the
“<code role="mode">m:docbook</code>” mode. I expect failure to declare this mode is going to be a common
error.</para>
</callout>
<callout arearefs="ex.cramped">
<para>Yes, this whole listing is rather cramped.
<phrase outputformat="print">I’m trying to make it all narrow
enough to fit in the display without overflowing the margins.
</phrase><phrase outputformat="online">I’m trying to make it all narrow
enough to fit in the display without making horizontal scrolling necessary.</phrase>
</para>
</callout>
<callout arearefs="ex.next-match">
<para>Calling <literal>xsl:next-match</literal> invokes the underlying
processing. The effect of this template is to wrap an HTML
“<code>a</code>” around the default processing for
<tag>productname</tag>.</para>
</callout>
</calloutlist>

<para>It’s worth pointing out that if the tag has an
<tag class="attribute">xlink:href</tag> attribute, that will generate an HTML
<code>a</code> as well. A more robust stylesheet would check for that,
but I’m trying to keep the example simple.</para>

</section>

<section xml:id="managing-css">
<title>Managing CSS stylesheets</title>

<para>The HTML that the <citetitle>DocBook xslTNG</citetitle> stylesheet
produce is intended to be clean, robust markup for styling with CSS.
Exactly how you control which stylesheet links are produced has
changed several times. The current scheme is this:</para>

<orderedlist>
<listitem>
<para>If syntax highlighting is enabled, a link to the
<parameter>verbatim-syntax-highlight-css</parameter><indexterm><primary>param</primary><secondary>verbatim-syntax-highlight-css</secondary></indexterm> stylesheet is
included.
</para>
</listitem>
<!--
<listitem>
<para>If <parameter>oxy-markup-css</parameter> <glossterm>is
true</glossterm> and there is at least one processing instruction in
the document that has a name that begins with <code>oxy_</code>,
a link to the <parameter>oxy-markup-css</parameter> stylesheet
is included.
</para>
</listitem>
-->
<listitem>
<para>If <parameter>persistent-toc</parameter><indexterm><primary>param</primary><secondary>persistent-toc</secondary></indexterm> <glossterm>is
true</glossterm> 
a link to the <parameter>persistent-toc-css</parameter><indexterm><primary>param</primary><secondary>persistent-toc-css</secondary></indexterm> stylesheet
is included.
</para>
</listitem>
<listitem>
<para>If <parameter>use-docbook-css</parameter><indexterm><primary>param</primary><secondary>use-docbook-css</secondary></indexterm> <glossterm>is true</glossterm>,
links to the standard DocBook stylesheets are included. Those stylesheets
are <filename>docbook.css</filename> (for all media),
<filename>docbook-screen.css</filename> (for screen media), and
<filename>docbook-page-setup.css</filename> and
<filename>docbook-paged.css</filename> (for print media).
</para>
</listitem>
<listitem>
<para>The DocBook element that is the context element when the HTML
<tag namespace="http://www.w3.org/1999/xhtml">head</tag> is being
generated is processed in the <code role="mode">m:html-head-links</code> mode.
By default, that template does nothing, but you can change that in
a customization layer.</para>
</listitem>
<listitem>
<para>If any CSS stylesheets are defined in
<parameter>user-css-links</parameter><indexterm><primary>param</primary><secondary>user-css-links</secondary></indexterm>, they are included.
</para>
</listitem>
<listitem>
<para>The DocBook element that is the context element when the HTML
<tag namespace="http://www.w3.org/1999/xhtml">head</tag> is being
generated is processed in the <code role="mode">m:html-head-last</code> mode.
By default, that template does nothing, but you can change that in
a customization layer.</para>
</listitem>
</orderedlist>
</section>

<section xml:id="different">
<title>Creating something completely different</title>

<para>Your input documents go through several pre-processing steps
before they are rendered into HTML. If you want to produce completely
different outputs, the place to start is with root template in the
<code role="mode">m:docbook</code> mode.</para>

<para>Consider, <link xlink:href="https://github.com/docbook/xslTNG/issues/84">for example</link>,
the task of creating a JSON version of the Table of Contents. In principle, you could
write your own stylesheet to do this, but leveraging the
<citetitle>DocBook xslTNG Stylesheets</citetitle> means you can make use of functions like
<function>f:generate-id</function> to create links.</para>

<para>To produce completely different results, override the root template in the
<code role="mode">m:docbook</code> mode:</para>

<programlisting language="xml">&lt;xsl:template match="/" mode="m:docbook"&gt;
  &lt;xsl:document&gt;
    &lt;!-- your processing here --&gt;
  &lt;/xsl:document&gt;
&lt;/xsl:template&gt;</programlisting>

<para>This template <emphasis>must</emphasis> return a document node.</para>

<para>Note that you can mix-and-match your processing with default
processing by processing DocBook elements in the
<code role="mode">m:docbook</code> mode.</para>

<para>Here is a simple example of a stylesheet that produces a JSON version of the
Table of Contents for a DocBook document:</para>

<programlisting language="xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:db="http://docbook.org/ns/docbook"
                xmlns:f="http://docbook.org/ns/docbook/functions"
                xmlns:m="http://docbook.org/ns/docbook/modes"
                xmlns:t="http://docbook.org/ns/docbook/templates"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns="http://www.w3.org/1999/xhtml"
                exclude-result-prefixes="db f m t xs"
                version="3.0"&gt;

  &lt;!-- This href has to point to your local copy
       of the stylesheets. --&gt;
  &lt;xsl:import href="docbook/xslt/docbook.xsl"/&gt;

  &lt;xsl:output method="text"/&gt;

  &lt;!-- Suppress xslTNG's default HTML output; note that this template
       must return a docuent node.  --&gt;
  &lt;xsl:template match="/" mode="m:docbook"&gt;
    &lt;xsl:document&gt;
      &lt;xsl:apply-templates select="." mode="TOC"/&gt;
    &lt;/xsl:document&gt;
  &lt;/xsl:template&gt;

  &lt;!-- The templates below generate a simple JSON ToC. --&gt;

  &lt;xsl:template match="/" mode="TOC"&gt;
    {"toc": [
    &lt;xsl:apply-templates mode="TOC"/&gt;
    ]}
  &lt;/xsl:template&gt;

  &lt;xsl:template match="db:part|db:article|db:section|db:chapter" mode="TOC"
                expand-text="yes"&gt;
    &lt;xsl:if test="preceding-sibling::db:part
                  | preceding-sibling::db:article
                  | preceding-sibling::db:section
                  | preceding-sibling::db:chapter"&gt;,&amp;#10;&lt;/xsl:if&gt;
    {{
    "ref": "{f:generate-id(.)}",
    "title": "{normalize-space(db:info/db:title)}",
    "subtitle": "{normalize-space(db:info/db:subtitle)}",
    "items": [
    &lt;xsl:apply-templates select="db:part|db:article|db:section|db:chapter" mode="TOC"/&gt;
    ]
    }}
  &lt;/xsl:template&gt;

  &lt;xsl:template match="*" mode="TOC"&gt;
    &lt;xsl:apply-templates select="*" mode="TOC"/&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</programlisting>

<note>
<para>This example is meant as a starting point; it’s not robust as it only handles
a few of the possible elements that might appear in a Table of Contents.</para>
</note>

<para>When processing documents this way, be aware that you are transforming the pre-processed,
normalized versions of your input documents. For example, whether or not you put
<tag>info</tag> wrappers around the titles of your sections, in the pre-processed input,
<tag>title</tag>s <emphasis>always</emphasis> appear inside <tag>info</tag> wrappers.
This normalization greatly simplifies processing in many places.</para>
</section>

</chapter> <!-- customizing -->
<chapter version="5.0" xml:id="implementation">
<info>
  <?db filename="ch04"?>
  <title>Implementation details</title>
</info>

<para>This section sketches out some features of the implementation.
It would probably be better to build an annotated
<link xlink:href="https://tdg.docbook.org/">Definitive Guide</link> or
something, but this will have to do for now.
</para>

<section xml:id="custom-chunking">
<title>Customizing chunking</title>

<para>Chunking is controlled by the <parameter>chunk-include</parameter><indexterm><primary>param</primary><secondary>chunk-include</secondary></indexterm> and
<parameter>chunk-exclude</parameter><indexterm><primary>param</primary><secondary>chunk-exclude</secondary></indexterm> parameters. These parameters are both
strings that must contain an XPath expression.</para>

<para>For each node in the document, the <parameter>chunk-include</parameter><indexterm><primary>param</primary><secondary>chunk-include</secondary></indexterm>
parameter is evaluated. If it does not return an empty sequence, the element
is considered a chunking candidate. In this case, the
<parameter>chunk-exclude</parameter><indexterm><primary>param</primary><secondary>chunk-exclude</secondary></indexterm> parameter is evaluated. If the exclude
expression <emphasis>does</emphasis> return an empty sequence, then the element identified
becomes a chunk. (If the exclude expression returns a non-empty value, the element
will not become a chunk.)</para>

</section>

<section xml:id="units">
<title>Lengths and units</title>

<para>Lengths appear in the context of images (width and height) and
tables (column widths). Several different units of length are
possible: absolute lengths (e.g., 3in), relative lengths (e.g., 3*),
and percentages (e.g., 25%). In some contexts, these can be combined:
a column width of “3*+0.5in” should have a width equal to 3 times the
relative width plus ½ inch.</para>

<para>In practice, some of the more complicated forms in <biblioref linkend="calstable"/> have no direct mapping to the units available in
HTML and CSS. The stylesheets attempt to specify a mapping that’s
close. Broadly, they take the nominal width of the table
(<parameter>nominal-page-width</parameter><indexterm><primary>param</primary><secondary>nominal-page-width</secondary></indexterm>, subtract out the fixed
widths, divide up the remaining widths proportionally among the
relative widths, and compute final widths. The final widths can be
expressed either in absolute terms or as percentages.</para>

<para>In handling the width and height of images, the intrinsic width
and height of the image in pixels are converted into lengths by
dividing by <parameter>pixels-per-inch</parameter><indexterm><primary>param</primary><secondary>pixels-per-inch</secondary></indexterm>. Nominal widths are
taken into consideration if necessary.</para>

<note>
<para>Determining the intrinsic size of an image depends on an extension function.
See <xref linkend="extensions"/>. Many bitmap image formats are supported.
The bounding box of EPS images is used, if it’s present. The intrinsic size of
SVG images is not available.</para>
</note>

<para>The list of recognized units (in, cm, etc.) are taken from
<varname>v:unit-scale</varname><indexterm><primary>variable</primary><secondary>v:unit-scale</secondary></indexterm>.</para>
</section>

<section xml:id="verbstyle">
<title>Verbatim styles</title>

<para>There are four verbatim styles: <literal>lines</literal>, <literal>table</literal>,
<literal>plain</literal>, and <literal>raw</literal>.</para>

<variablelist>
<varlistentry><term><literal>lines</literal></term>
<listitem>
<para>In the lines style, each line of the verbatim environment is
marked up individually. In this style, lines can be numbered and
callouts can be inserted.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>table</literal></term>
<listitem>
<para>In the table style, each line of the verbatim environment is
marked up individually, very much like the lines style. In this style,
lines can be numbered and callouts can be inserted. It differs from
the lines style in that the whole thing is wrapped in a table.</para>

<para>The table has one row and two columns. The line numbers appear in the
first column, the lines in the second. This format was added in order
to improve the display in user agents that don’t support CSS.
Ironically, in the course of adding this style, a number of changes
were made to the way line numbers are formatted in the lines style
making it largely, perhaps entirely, unnecessary.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>plain</literal></term>
<listitem>
<para>In the plain style, callouts can be inserted, but additional markup is not
added (except for the callouts). Consequently, it isn’t possible to do line numbering
or syntax highlighting. (It may be possible to provide these features with JavaScript
libraries in the browser, however.)
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>raw</literal></term>
<listitem>
<para>In the raw style, no changes are made to the verbatim content. It’s output as
it appears. Inline markup that it contains, <tag>emphasis</tag> or other elements, will
be processed, but you cannot add line numbers, callouts, or syntax highlighting.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>Consult <xref linkend="params"/> for a variety of parameters that control
aspects of verbatim processing.</para>

<section xml:id="line-numbers">
<title>Line numbers</title>

<para>In the <literal>lines</literal> and <literal>table</literal> styles, line
numbers may be added to the beginning of some (or all) lines. Prior to version
1.10.0, the stylesheets inserted the numbers without any padding:</para>

<programlisting language="xml">&lt;span class="line"&gt;
  &lt;span class="ln"&gt;5&lt;/span&gt;
  &lt;span class="ld"&gt;The line of text&lt;/span&gt;
&lt;/span&gt;</programlisting>

<para>(The newlines and indentation in these examples are for clarity. In practice, these
are inside a <tag namespace="http://www.w3.org/1999/xhtml">pre</tag> where every
space counts and they’re all run together with line breaks only occurring
between lines.)</para>

<para>In a graphical browser with CSS support, this looked fine. But
without CSS, the line numbers and the text that followed them could
flow together and the alignment of the numbers was unclear.</para>

<para>Starting in version 1.10.0, the stylesheets insert padding
spaces before each number so that they will all be aligned. If the
largest line number is three digits long, every number smaller than
100 will be padded to a width of three characters. A single space is
added after the number to separate it from the text that follows.
An additional separator may also be inserted, as shown here.</para>

<programlisting language="xml">&lt;span class="line"&gt;
  &lt;span class="ln"&gt; 5 &lt;span class="nsep"&gt;|&lt;/span&gt;&lt;/span&gt;
  &lt;span class="ld"&gt;The line of text&lt;/span&gt;
&lt;/span&gt;</programlisting>

<para>These changes have no visible effect when CSS is used to style
the verbatim environment. But without CSS, the numbers are aligned and
separated from the text that follows. The
<parameter>verbatim-number-separator</parameter><indexterm><primary>param</primary><secondary>verbatim-number-separator</secondary></indexterm> is generally
suppressed by CSS, but is visible in text browsers.</para>

</section>
</section>

<section xml:id="processing-mediaobjects">
<title>Processing mediaobjects</title>

<para>Starting in version 1.11.0, the way media objects are processed has been
refactored. This is designed to support fallback at both the object
level (<tag>imageobject</tag>, <tag>audioaobject</tag>, <tag>videoobject</tag>,
<tag>textobject</tag>, and <tag>imageobjectco</tag>) and at the data
level (<tag>imagedata</tag>, <tag>audiodata</tag>, <tag>videodata</tag>,
and <tag>textdata</tag> within the objects).</para>

<para>Each data element and object element is processed in the
<code role="mode">m:mediaobject-info</code> mode. This returns a map for each object
that contains an array of maps, one for each data element:</para>

<table>
<title>The object map</title>
<tgroup cols="2">
<thead>
<row>
<entry>Key</entry>
<entry>Value</entry>
</row>
</thead>
<tbody>
<row>
<entry><code>content-types</code></entry>
<entry>An array of the distinct content types in the data elements</entry>
</row>
<row>
<entry><code>datas</code></entry>
<entry>An array of data maps</entry>
</row>
<row>
<entry><code>extensions</code></entry>
<entry>An array of the distinct extensions in the data elements</entry>
</row>
<row>
<entry><code>node</code></entry>
<entry>The media object node</entry>
</row>
</tbody>
</tgroup>
</table>

<para>Each data map has the following structure:</para>

<table>
<title>The data map</title>
<tgroup cols="2">
<thead>
<row>
<entry>Key</entry>
<entry>Value</entry>
</row>
</thead>
<tbody>
<row>
<entry><code>align</code></entry>
<entry>The alignment of the data (if specified)</entry>
</row>
<row>
<entry><code>content-type</code></entry>
<entry>The computed content type for the data</entry>
</row>
<row>
<entry><code>contentheight</code></entry>
<entry>The content height of the data (if specified<footnote xml:id="fn-depth"><para>DocBook
uses “depth” instead of “height”, but we convert
it to height for consistency with most other systems</para></footnote>)</entry>
</row>
<row>
<entry><code>contentwidth</code></entry>
<entry>The content width of the data (if specified)</entry>
</row>
<row>
<entry><code>extension</code></entry>
<entry>The extension of the data file (if there is one)</entry>
</row>
<row>
<entry><code>fileref</code></entry>
<entry>The original <tag class="attribute">fileref</tag> attribute value</entry>
</row>
<row>
<entry><code>height</code></entry>
<entry>The height of the data (if specified<footnoteref linkend="fn-depth"/>)</entry>
</row>
<row>
<entry><code>href</code></entry>
<entry>The computed <tag class="attribute">href</tag> value for the HTML element;
this takes account of the <parameter>mediaobject-input-base-uri</parameter><indexterm><primary>param</primary><secondary>mediaobject-input-base-uri</secondary></indexterm> and
<parameter>mediaobject-output-base-uri</parameter><indexterm><primary>param</primary><secondary>mediaobject-output-base-uri</secondary></indexterm>).
</entry>
</row>
<row>
<entry><code>node</code></entry>
<entry>The data element</entry>
</row>
<row>
<entry><code>params</code></entry>
<entry>Any <tag>multimediaparams</tag> associated with the data element</entry>
</row>
<row>
<entry><code>properties</code></entry>
<entry>The properties of the element (as returned by the extension funtions;
this can include EXIF data and metadata)</entry>
</row>
<row>
<entry><code>scale</code></entry>
<entry>The scaling factor (if there is one) or 1.0</entry>
</row>
<row>
<entry><code>scalefit</code></entry>
<entry>True if the image should be scaled to fit (implicitly or explicitly)</entry>
</row>
<row>
<entry><code>uri</code></entry>
<entry>The computed absolute URI of the input data</entry>
</row>
<row>
<entry><code>valign</code></entry>
<entry>The vertical alignment of the data (if specified)</entry>
</row>
<row>
<entry><code>width</code></entry>
<entry>The width of the data (if specifieid)</entry>
</row>
</tbody>
</tgroup>
</table>

<para>The <literal>uri</literal> and <literal>href</literal> properties are computed
by processing the data elements in the <code role="mode">m:mediaobject-uris</code> mode.</para>

<para>Armed with information about the objects and the data associated with them,
the stylesheets proceed to choose an object and then process it. Each object is
considered in turn, if any of the data elements it contains were excluded, then it is
rejected. The first object where all of the elements are acceptable is selected.</para>

<para>Consider this example:</para>

<programlisting language="xml">&lt;mediaobject&gt;
&lt;imageobject&gt;
  &lt;imagedata fileref="image.svg"/&gt;
  &lt;imagedata fileref="image.eps"/&gt;
  &lt;imagedata fileref="image.png" width="4in"/&gt;
&lt;/imageobject&gt;
&lt;imageobject&gt;
  &lt;imagedata fileref="image.svg"/&gt;
  &lt;imagedata fileref="image.png" width="40em"/&gt;
&lt;/imageobject&gt;
&lt;/mediaobject&gt;</programlisting>

<para>If this is being processed for online presentation, the default
value of <parameter>mediaobject-exclude-extensions</parameter><indexterm><primary>param</primary><secondary>mediaobject-exclude-extensions</secondary></indexterm> will exclude the
EPS file. Because one of it’s data elements was excluded, the processor will choose
the object containing only the SVG and PNG images for online presentation.</para>

<para>Once an object is selected, an appropriate wrapper is created and all
of the alternatives are placed within it. So the example above will result in
<tag namespace="http://www.w3.org/1999/xhtml">picture</tag> element containing
a
<tag namespace="http://www.w3.org/1999/xhtml">source</tag> for the SVG image and an
<tag namespace="http://www.w3.org/1999/xhtml">img</tag> for the fallback PNG.
</para>

<note>
<para>Consistent with HTML, only the size, scaling, and alignment attributes of
the <emphasis>last</emphasis> alternative data element are considered! These apply
irrespective of which alternative is selected.</para>
</note>

<section xml:id="mediaobject-uris">
<title>Mediaobject URIs</title>

<para>Media object (images, video, audio) URIs are tricky to handle. It’s most
convenient if the URIs in the source documents point to the actual media files.
This allows extensions, like the image properties
<link linkend="extensions">extension function</link>, to access the files.
At the same time, the references generated in the HTML have to point to the
locations where they will be published.</para>

<para>The stylesheets attempt to handle this by using
<parameter>mediaobject-input-base-uri</parameter><indexterm><primary>param</primary><secondary>mediaobject-input-base-uri</secondary></indexterm> to locate the files from the
XML sources and <parameter>mediaobject-output-base-uri</parameter><indexterm><primary>param</primary><secondary>mediaobject-output-base-uri</secondary></indexterm> to create
the HTML links.</para>

<para>If you need a completely different organization of images in the
input and output, you may need to define your own resolution with
templates in the <code role="mode">m:mediaobject-uris</code> mode.</para>
</section>
</section>

<section xml:id="header-templates">
<title>Templates</title>

<para>It’s difficult to make title pages for documents easy to customize. There
is <emphasis>a lot</emphasis> of variation between documents and the styles can
have very precise design constraints. At the end of the day, if you need complete control,
you can define a template that matches the element in the
<code role="mode">m:generate-titlepage</code> mode and generate all of the markup you wish.</para>

<para>The default title page handling attempts to make some declarative customization
possible by using templates. A typical header template looks like this:</para>

<programlisting language="xml">&lt;db:section&gt;
  &lt;header&gt;
    &lt;tmp:apply-templates select="db:title"&gt;
      &lt;h2&gt;&lt;tmp:content/&gt;&lt;/h2&gt;
    &lt;/tmp:apply-templates&gt;
    &lt;tmp:apply-templates select="db:subtitle"&gt;
      &lt;h3&gt;&lt;tmp:content/&gt;&lt;/h3&gt;
    &lt;/tmp:apply-templates&gt;
  &lt;/header&gt;
&lt;/db:section&gt;</programlisting>

<para>Any HTML element in the template will be copied to the output. The semantics
of a “template apply templates” element (<tag>tmp:apply-templates</tag>) is that
it runs the ordinary <tag>xsl:apply-templates</tag> instruction on the elements that
match its select expression. If they result is the empty sequence (e.g, if there is no 
<tag>subtitle</tag>), nothing is output. If there is a result, the content of the
<tag>tmp:apply-templates</tag> element is processed. Anywhere that
<tag>tmp:content</tag> appears, the result of applying templates will be output.</para>

<para>In this example, if the title is “H<subscript>2</subscript>O” and there is no subtitle,
the resulting HTML title page will be:</para>

<programlisting language="xml">&lt;header&gt;
  &lt;h2&gt;H&lt;sub&gt;2&lt;/sub&gt;O&lt;/h2&gt;
&lt;/header&gt;</programlisting>
</section>

<section xml:id="annotations">
<title>Annotations</title>

<para>The stylesheets fully support annotations, including a number
of presentation styles enabled by JavaScript in the browser. They also
support an extension of the documented semantics of
<tag>annotation</tag>.</para>

<para>Annotations are applied to elements with links. Either the
element must point to its annotations (with an <tag class="attribute">annotations</tag>
attribute) or the annotations must point to the elements they annotate
(with an <tag class="attribute">annotates</tag> attribute). These are documented as
ID/IDREF links but they are not <code>IDREFS</code> attributes
because annotations may be stored separately.</para>

<para>Starting in version 1.5.1, the <citetitle>DocBook xslTNG
Stylesheets</citetitle> support a non-standard extension: if you place
the string <code>xpath:</code> in the <tag class="attribute">annotates</tag> attribute of
an <tag>annotation</tag>, then the rest of the attribute is assumed to contain
an XPath expression that points to the element(s) to which the annotation
applies. (If you want to put IDREF values before the <code>xpath:</code> token,
that’s fine, but you can’t put them after; the expression continues to the end
of the attribute value.)</para>

<para>Suppose, for example, that you wanted to annotate the stylesheet
title in the previous paragraph. The standard mechanisms would require that
you either put an <tag class="attribute">xml:id</tag> attribute on the element or point to the
annotation from the element. With the XPath extension, you can do this:</para>

<annotation xmlns:db="http://docbook.org/ns/docbook" annotates="xpath:preceding-sibling::db:para/db:citetitle">
<para>This annotation applies to the stylesheet title. For a discussion
of this annotation, see the following paragraphs.
</para>
</annotation>

<programlisting language="xml">&lt;annotation
   annotates="xpath:preceding-sibling::db:para/db:citetitle"
   xmlns:db="http://docbook.org/ns/docbook"&gt;
&lt;para&gt;This annotation applies to the stylesheet title.
For a discussion of this annotation, see the
following paragraphs.&lt;/para&gt;
&lt;/annotation&gt;</programlisting>

<para>When the XPath expression is evaluated, the <tag>annotation</tag>
element is the context item. Often, this means that you’ll want to start
the expression with <code>id()</code> or <code>/</code>.</para>

<para>The namespace context for the expression is also the <tag>annotation</tag>
element, that’s why I’ve added the DocBook namespace binding for the
<tag class="prefix">db</tag> prefix. In practice, if you’re doing this on
several annotations, you can just put all the namespace bindings on a common
ancestor. All of the bindings <emphasis>in scope</emphasis> on the
<tag>annotation</tag> element are available in the expression.</para>

<para>Caveats:</para>

<orderedlist>
<listitem>
<para>There’s no way to have multiple XPath expressions. You can’t put
“<code>xpath:</code>” in there twice. If you want an annotation to apply to
multiple elements, you’ll have to construct a single expression that selects
all the elements, or duplicate the annotation, or use ID/IDREF links.</para>
<para>If this turns out to be a serious limitation in practice, additional
syntax could be added to support multiple expressions, but it doesn’t
<emphasis>seem</emphasis> necessary.</para>
</listitem>
<listitem>
<para>You can only select elements. There’s no way to select the third word
in a particular paragraph, for example, unless it already has some markup
around it. There’s also no way to select a comment or a processing instruction.
</para>
</listitem>
</orderedlist>

<para>The placement of the annotation marker (“⌖” by default) can also be
controlled globally and on individual annotations. The
<parameter>annotation-placement</parameter><indexterm><primary>param</primary><secondary>annotation-placement</secondary></indexterm> parameter provides global control.
To specify the position for an individual annotation, put the token
“<code>before</code>” or “<code>after</code>” in the <tag class="attribute">role</tag>
attribute on the <tag>annotation</tag>.</para>

</section>

<section xml:id="preprocessing-pipeline">
<title>The pre- and post-processing pipeline</title>

<para>Processing a DocBook document is a multi-stage process. The
original document is transformed several times before converting it to
HTML. The standard transformations are:</para>

<orderedlist>
<listitem>
<para>Adjust the logical structure. Adds an XML base attribute to the root of the
document and converts media object <tag class="attribute">entityref</tag> attributes
into <tag class="attribute">fileref</tag> attributes.
</para>
</listitem>
<listitem>
<para>Perform XInclude processing. Only occurs if the appropriate
extension function is available and if the document contains XInclude
element.
</para>
</listitem>
<listitem>
<para>Convert DocBook 4.x to DocBook 5.x. Only occurs if the root element is not in
a namespace.
</para>
</listitem>
<listitem>
<para>Peform transclusion.
</para>
</listitem>
<listitem>
<para>Perform profiling.
</para>
</listitem>
<listitem>
<para>Normalize the content. This removes a lot of variation that’s allowed for authoring.
For example, authors aren’t required to use an <tag>info</tag> element if a formal object
has only a title. This process adds the <tag>info</tag> element if it’s missing.
</para>
</listitem>
<listitem>
<para>Resolve annotations.
</para>
</listitem>
<listitem>
<para>Process XLink link bases.
</para>
</listitem>
<listitem>
<para>Validate. Only occurs if the appropriate
extension function is available and the stylesheet specifies a
<parameter>relax-ng-grammar</parameter><indexterm><primary>param</primary><secondary>relax-ng-grammar</secondary></indexterm>.
</para>
</listitem>
<listitem>
<para>Process Oxygen change markup. Only occurs if 
<parameter>oxy-markup</parameter><indexterm><primary>param</primary><secondary>oxy-markup</secondary></indexterm> is true and the document contains
Oxygen change markup processing instructions.
</para>
</listitem>
</orderedlist>

<para>A customization can introduce transformations to the original
document: before the standard transformations by specifying them in
<parameter>transform-original</parameter><indexterm><primary>param</primary><secondary>transform-original</secondary></indexterm>; after the standard transformations
but before the transformation to HTML by specifying them in
<parameter>transform-before</parameter><indexterm><primary>param</primary><secondary>transform-before</secondary></indexterm>; or after the HTML transformation
by specifying them in <parameter>transform-after</parameter><indexterm><primary>param</primary><secondary>transform-after</secondary></indexterm>. (If you need
to insert a transformation in the middle of the standard transformations,
you’ll have to update the <varname>v:standard-transforms</varname><indexterm><primary>variable</primary><secondary>v:standard-transforms</secondary></indexterm>
variable.)</para>

<note>
<para>Transformations in <varname>v:transform-after</varname><indexterm><primary>variable</primary><secondary>v:transform-after</secondary></indexterm> will be processing
the <emphasis>HTML</emphasis> result of applying the “main” DocBook transformation.</para>
</note>

<para>Each of the transformation variables holds a list of transforms that will
be applied in the order specified. Each member of the list can be a map or a
string. If a string is provided, it’s the equivalent of providing this map:
</para>

<programlisting language="xpath">map {
  'stylesheet-location': $the-string
}</programlisting>

<para>The map can have several keys:</para>

<table>
<title>The transformation map</title>
<tgroup cols="2">
<thead>
<row>
<entry>Key</entry>
<entry>Value</entry>
</row>
</thead>
<tbody>
<row>
<entry><code>stylesheet-location</code></entry>
<entry>The location of the XSLT stylesheet that performs this transformation.
This key is required.</entry>
</row>
<row>
<entry><code>extra-params</code></entry>
<entry>A map of QName/value pairs. These parameters will be made available to
the transformation in addition to all of the standard parameters available to a
standard DocBook stylesheet.</entry>
</row>
<row>
<entry><code>functions</code></entry>
<entry>A list of functions (expressed as EQNames). The transformation will only be
run if every extension function listed is available.</entry>
</row>
<row>
<entry><code>test</code></entry>
<entry>An arbitrary XPath expression. The expression will be evaluated with the
document as the context item. If it returns an effective boolean value of true,
the transformation will be run.</entry>
</row>
</tbody>
</tgroup>
</table>

</section>
</chapter> <!-- implementation -->
<chapter version="5.0" xml:id="building">
<info>
  <?db filename="ch05"?>
  <title>Building the stylesheets</title>
</info>

<para>If you wish, you can also clone the distribution and build them
yourself. The distribution is designed to be self contained. In a Unix
or Mac environment, running:
</para>

<screen><?db verbatim-style="plain"
?><userinput>./gradlew dist</userinput></screen>

<para>
will build the stylesheets. Building will:</para>

<orderedlist>
<listitem>
<para>Compile the stylesheets and run the unit tests. The compiled stylesheets
will be available in <filename>build/xslt</filename>.
</para>
<para>Running all the tests requires building the reference guide and
a few other things. You can build the stylesheets without running any
of the tests with the <buildtarget>makeXslt</buildtarget> task.</para>
</listitem>
<listitem>
<para>Compile the extension functions. The compiled extension functions will be
available in <filename>build/libs</filename>. The <buildtarget>jar</buildtarget> task
will compile the extensions without running the tests.
</para>
</listitem>
<listitem>
<para>“Compile” <link linkend="python-script">the Python script</link> that helps run
the stylesheets. (It’s not really compiled, but several stylesheet-version-specific
strings are interpolated.)
The <buildtarget>copyBin</buildtarget> task will setup the Python script
without running the tests.
</para>
</listitem>
</orderedlist>

<important>
<para>In principle, it should be possible to build the stylesheets on <trademark>Windows</trademark>.
In practice, it doesn’t work. One would imagine that mapping path (“:”→“;”)
and filename (“\”→“/”) separators and constructing URIs for paths
(“<literal>C:\Users\…</literal>”→“<literal>file:///C:/Users/…</literal>”) would
make it work. In the author’s experience, that is not the case. Pull requests are welcome.
It may be more expedient to build in the Linux subsystem on Windows 10 or in a Docker
container.
</para>
</important>

<section xml:id="buildpre">
<title>Prerequisites</title>

<para>In order to build the stylesheets, you must configure your
system with several prerequisites:</para>

<itemizedlist>
<listitem>
<para><link xlink:href="https://gradle.org/">Gradle</link>. The stylesheet
builds use <link xlink:href="https://docs.gradle.org/current/userguide/gradle_wrapper.html">the
Gradle wrapper</link> to assure a consistent environment across systems, it’ll
be downloaded automatically the first time you build.
</para>
</listitem>
<listitem>
<para>A modern version of Java. (Java 1.8 or later, for example.)
</para>
</listitem>
<listitem>
<para><link xlink:href="https://www.python.org/">Python</link> 3 and
the <link xlink:href="https://click.palletsprojects.com/en/7.x/">click</link> module.
The <link xlink:href="https://pygments.org/">Pygmentize</link> program is also
required for syntax highlighting, though that’s not technically a build requirement.
</para>
</listitem>
</itemizedlist>

<para>If you discover other prerequisites that have been overlooked,
or have questions or suggestions about how best to manage them, please
let us know.</para>

<section xml:id="saxonee">
<title>Saxon EE</title>
<para>You don’t need a Saxon EE license to build or run the stylesheets.
If you change any of the transforms in <code>src/main/xslt/transforms</code>,
you will need a Saxon EE license to recompile them as exported SEF files.</para>
<para>If you don’t have an EE license, the build process will simply
omit the SEF versions and the “source” versions, including any
modifications that you’ve made, will be used.</para>
<para>That’s the theory, anyway. I’ve tested it, but if you have any trouble, please
open an issue.</para>
</section>
</section>
<section xml:id="repostruct">
<title>Repository structure</title>

<para>The most significant parts of the repository hierarchy are:</para>

<screen role="monochrome">src/main/xslt
src/main/xslt/transforms
src/main/xslt/modules</screen>

<para>These are the sources for the stylesheets themselves. The
<filename class="directory">transform</filename> subdirectory contains the preprocessing
stylesheets that are run as separate transforms. The
<filename class="directory">modules</filename> directory doesn’t have any special significance, it
just makes the main entry points easier to find.</para>

<para>You cannot run the XSLT stylesheets directly from the source
location. You must build them first with the
<buildtarget>makeXslt</buildtarget> build target.</para>

<screen role="monochrome">src/main/web
src/main/web/resources/css
src/main/web/resources/js</screen>

<para>These are the CSS and JavaScript files needed for accurate rendering in the
browser or formatter process.</para>

<screen role="monochrome">src/main/locales/locale-10
src/main/locales/locale</screen>

<para>The <filename class="directory">local-10</filename> directory holds copies of the
localization files from the XSLT 1.0 stylesheets. They’re transformed
into the <filename class="directory">locale</filename> versions by the build system. This whole
area is one that needs work.</para>

<screen role="monochrome">src/test/xspec
src/test/generators
src/test/resources/xml
src/test/resources/expected</screen>

<para>These are the testing resources. You cannot run the XSpec tests
directly from <filename class="directory">src/test/xspec</filename>. The build system copies them into
<filename class="directory">build/xspec</filename> along with a few XSpec tests generated
automatically by the stylesheets in <filename class="directory">generators</filename>.
</para>

<para>The library of DocBook documents that are used for testing is
stored in the <filename class="directory">xml</filename> directory. The HTML files in
<filename class="directory">expected</filename> correspond to the expected results. The expected
results aren’t usefully viewed in a browser. Only the
<tag namespace="http://www.w3.org/1999/xhtml">body</tag> element and its
decendants are stored in the expected results. This avoids a lot of
noise in the
<tag namespace="http://www.w3.org/1999/xhtml">head</tag>.</para>

<screen role="monochrome">src/main/java</screen>

<para>These are the sources for the <link linkend="extensions">extension functions</link>.
</para>

<screen role="monochrome">src/guide
src/website</screen>

<para>These are the sources, resources, and ancillary files for the 
reference guide and the website.</para>

<screen role="monochrome">tools</screen>

<para>The <filename class="directory">tools</filename> directory holds a number of stylesheets and other scripts used
by the build process.</para>

<screen role="monochrome">lib</screen>

<para>The <filename class="directory">lib</filename> directory holds third party jar files. This is also where
you can put your Saxon PE or EE files if you have them.</para>

<screen role="monochrome">build
build/actual
build/xslt</screen>

<para>The build system puts all of its temporary files under <filename class="directory">build</filename>. It’s
always safe to delete the entire directory and start over, though it will require internet
access and it may take a while.</para>

<para>Test files that you format are published to
<filename class="directory">build/actual</filename> and the images, CSS, and JavaScript resources
are copied under there so that everything will look right in the
browser. For security reasons, some JavaScript features may not work
if you are looking at the documents from the filesystem. You can work
around this by pointing a local web server at the build directory.</para>

<para>The built stylesheets are in <filename class="directory">build/xslt</filename>. You can run
them directly from there.</para>
</section>

<section xml:id="buildtasks">
<title>Build tasks</title>

<para>The build system is <biblioref linkend="Gradle"/>. Gradle’s
processing model operates in several phases, this allows an initial
configuration phase to construct build targets (called tasks)
dynamically. The <citetitle>DocBook xslTNG Stylesheets</citetitle>
build script uses this facility quite a bit.</para>

<para>In the discussion that follows, <replaceable>testdoc</replaceable> is the
base name of a test document, that is, one of the example files from the
<filename class="directory">src/test/resources/xml</filename> directory. For example, one of the test documents
is <filename>src/test/resources/xml/article.001.xml</filename>. In the build
targets that would be the “testdoc” <literal>article.001</literal>.
In an analogous way, “testset” is the root name of an XSpec test file in
<filename class="directory">src/test/xspec</filename>.</para>

<para>The most important tasks are:</para>

<variablelist>
<varlistentry><term><buildtarget>makeXslt</buildtarget></term>
<listitem>
<para>This tasks “compiles” the stylesheets into <filename class="directory">build/xslt</filename>.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget>report</buildtarget></term>
<listitem>
<para>This task runs all of the tests and generates a unified report in
<filename class="directory">build/report</filename>. This is the default task.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget>test</buildtarget></term>
<listitem>
<para>Runs the test suite against the stylesheets.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget><replaceable>testdoc</replaceable>.html</buildtarget></term>
<listitem>
<para>Formats <replaceable>testdoc</replaceable> into HTML and stores the result
in <filename class="directory">build/actual</filename> where it can be viewed in the browser with the appropriate
CSS, JavaScript, images, etc.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget><replaceable>testdoc</replaceable>.expected</buildtarget></term>
<listitem>
<para>Formats <replaceable>testdoc</replaceable> into HTML and stores the result
in <filename class="directory">src/test/resources/expected</filename>. You should <emphasis>only</emphasis> run this
task when you’ve made a change and determined that the new results are correct and should
replace the previously expected results.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget><replaceable>testdoc</replaceable>.pdf.html</buildtarget></term>
<listitem>
<para>Formats <replaceable>testdoc</replaceable> into HTML suitable
for paged media and stores the result in <filename class="directory">build/actual</filename>.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget><replaceable>testdoc</replaceable>.pdf</buildtarget></term>
<listitem>
<para>The <filename class="extension">.pdf</filename> target will generate the
<filename class="extension">.pdf.html</filename> output and then attempt to transform it into PDF
with either AntennaHouse or PrinceXML. Additional configuration may be
necessary to get this to work.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget><replaceable>testdoc</replaceable>.chunk</buildtarget></term>
<listitem>
<para>Formats <replaceable>testdoc</replaceable> into HTML with chunking turned
on. The result is stored in <filename>index.html</filename> and other files
in <filename class="directory">build/actual</filename>. No attempt is made to avoid having
the output files from different documents overwrite each other. At the moment,
none of the automated tests create chunked output.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget><replaceable>testset</replaceable>.xspec</buildtarget></term>
<listitem>
<para>Runs the <replaceable>testset</replaceable> set of XSpec tests. These don’t
all work reliably because of different parameter settings. But it can be useful for quick
testing of a particular set of features.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget>jar</buildtarget></term>
<listitem>
<para>Compiles the extension functions and creates the jar file in
<filename class="directory">build/libs</filename>.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget>dist</buildtarget></term>
<listitem>
<para>Builds an archive in <filename class="directory">build/distributions</filename> suitable for distribution.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget>guide</buildtarget></term>
<listitem>
<para>Builds the reference guide.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget>website</buildtarget></term>
<listitem>
<para>Builds the website.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget>explorer</buildtarget></term>
<listitem>
<para>Generates the <link xlink:href="https://xslt.xmlexplorer.com/">XSLT Explorer</link>
report for the stylesheets in
<filename class="directory">build/explorer</filename>.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget><replaceable>tagname</replaceable>Test</buildtarget></term>
<listitem>
<para>The build file constructs tests for different tag types. For example,
to run all the XSpec tests that involve “<tag>revhistory</tag>”, you can
use the target <buildtarget>revhistoryTest</buildtarget>. In practice, this feature
is little used and may not be wholly up-to-date with respect to the most
recent tests.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget>helloWorld</buildtarget></term>
<listitem>
<para>A smoke test target. It just prints a message, but doing so will exercise
a bunch of the build machinery in Gradle.
</para>
</listitem>
</varlistentry>
</variablelist>

</section>

<section xml:id="xspec">
<title>Running XSpec</title>

<para>In order to get consistent results across different runs and in different
environments, the XSpec tests run a driver stylesheet, <filename>xspec-driver.xsl</filename>.
</para>

<para>Note also that the XSpec shell script is modified by the stylesheets.</para>

</section>
</chapter> <!-- building  -->
</part>
<part>
<title>Reference</title>

<!-- N.B. ref-params.xml is transformed significanlty before being
     formatted (it's also transformed into param.xsl), so the
     authoring version isn't like what's formatted. This is not ideal
     from an authoring perspective, but I'm going to live with it for
     the moment. -->
<reference xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="5.0" xml:id="params">
   <info><?db filename="params"?>
      <title>Parameter reference</title>
   </info>
   <refentry xml:id="p_additional-languages"><indexterm><primary>param</primary><secondary>additional-languages</secondary></indexterm>
   <?db filename="p_additional-languages"?>
      <refmeta>
         <refentrytitle>$additional-languages</refentrytitle>
         <refmiscinfo>{}additional-languages</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$additional-languages</refname>
         <refpurpose>Additional localization languages (beyond the default language)</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$additional-languages := ()</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If the stylesheets need to generate text (the names of labels
such as “Chapter”, for example), they attempt to do so in the same
language as the document. This is determined by finding the nearast
in-scope <tag class="attribute">xml:lang</tag> attribute from the context where the
generated text is required.
</para>
         <para>The stylesheets can generate text in more than 70 languages,
but very few documents use more than a few. To avoid the overhead of
loading a great many localizations that will never be used, the
stylesheets don’t load them all.</para>
         <para>The stylesheets always load the
<parameter>default-language</parameter><indexterm><primary>param</primary><secondary>default-language</secondary></indexterm> and will load any additional
languages identified in <parameter>additional-languages</parameter><indexterm><primary>param</primary><secondary>additional-languages</secondary></indexterm>,
a space separated list of language identifiers.</para>
         <para>If the <parameter>additional-languages</parameter><indexterm><primary>param</primary><secondary>additional-languages</secondary></indexterm> is the
empty sequence, the stylesheets attempt to determine which languages
are used in the document and load the appropriate localizations.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_align-char-default"><indexterm><primary>param</primary><secondary>align-char-default</secondary></indexterm><indexterm><primary>param</primary><secondary>align-char-pad</secondary></indexterm><indexterm><primary>param</primary><secondary>align-char-width</secondary></indexterm>
   <?db filename="p_align-char-default"?>
      <refmeta>
         <refentrytitle>$align-char-default, $align-char-pad, $align-char-width</refentrytitle>
         <refmiscinfo>{}align-char-default</refmiscinfo>
         <refmiscinfo>{}align-char-pad</refmiscinfo>
         <refmiscinfo>{}align-char-width</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$align-char-default</refname>
         <refname xml:id="p_align-char-pad">$align-char-pad</refname>
         <refname xml:id="p_align-char-width">$align-char-width</refname>
         <refpurpose>Support “char” alignment on CALS table cells</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$align-char-default as xs:string := '.'</synopsis>
         <synopsis>$align-char-pad := ' '</synopsis>
         <synopsis>$align-char-width := 2</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>CALS tables support “char” alignment on columns. The most common
use case for character alignment is to align a column of numbers on a
decimal point even when the number of characters to right or left of
the decimal point varies.</para>
         <para>Three parameters apply to character alignment:</para>
         <variablelist>
            <varlistentry>
               <term>
                  <parameter>align-char-default</parameter><indexterm><primary>param</primary><secondary>align-char-default</secondary></indexterm>
               </term>
               <listitem>
                  <para>Specifies the default alignment character.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <parameter>align-char-pad</parameter><indexterm><primary>param</primary><secondary>align-char-pad</secondary></indexterm>
               </term>
               <listitem>
                  <para>Specifies the default padding character, usually an en space.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <parameter>align-char-width</parameter><indexterm><primary>param</primary><secondary>align-char-width</secondary></indexterm>
               </term>
               <listitem>
                  <para>Specifies the number of characters that follow the alignment
character.
</para>
               </listitem>
            </varlistentry>
         </variablelist>
         <note>
            <title>Notes</title>
            <orderedlist spacing="compact">
               <listitem>
                  <para>The HTML table model doesn’t really support character alignment.
This feature pads each entry on the right as necessary to put the
alignment character in the same place. Naturally, this will only
produce the desired result if a monospace font is used in the
cell.</para>
               </listitem>
               <listitem>
                  <para>If the alignment character appears more than once in the cell,
the cells are aligned around the last occurrence. The notion of “last”
and padding on the right or the left should be sensitive to the writing
direction, but it isn’t currently.
</para>
               </listitem>
               <listitem>
                  <para>Character alignment is ignored if a cell contains markup.</para>
               </listitem>
            </orderedlist>
         </note>
         <para>
            <xref linkend="ex-align-char-default"/> shows an example of
character alignment on the “,” character.</para>
         <example xml:id="ex-align-char-default">
            <title>An example of char alignment</title>
            <programlisting language="xml" linenumbering="unnumbered">
&lt;informaltable frame="all"&gt;
   &lt;tgroup cols="2" colsep="1" rowsep="1"&gt;
      &lt;colspec colnum="2" align="char" char=","/&gt;
      &lt;tbody&gt;
         &lt;row&gt;
            &lt;entry&gt;Row A&lt;/entry&gt;
            &lt;entry&gt;10000,01&lt;/entry&gt;
         &lt;/row&gt;
         &lt;row&gt;
            &lt;entry&gt;Row B&lt;/entry&gt;
            &lt;entry&gt;10&lt;/entry&gt;
         &lt;/row&gt;
         &lt;row&gt;
            &lt;entry&gt;Row C&lt;/entry&gt;
            &lt;entry&gt;-3,14&lt;/entry&gt;
         &lt;/row&gt;
      &lt;/tbody&gt;
   &lt;/tgroup&gt;
&lt;/informaltable&gt;
</programlisting>
         </example>
         <example xml:id="ifig-align-char-default">
            <title>Tabular rendering</title>
            <informaltable frame="all">
               <tgroup cols="2" colsep="1" rowsep="1">
                  <colspec colnum="2" align="char" char=","/>
                  <tbody>
                     <row>
                        <entry>Row A</entry>
                        <entry>10000,01</entry>
                     </row>
                     <row>
                        <entry>Row B</entry>
                        <entry>10</entry>
                     </row>
                     <row>
                        <entry>Row C</entry>
                        <entry>-3,14</entry>
                     </row>
                  </tbody>
               </tgroup>
            </informaltable>
         </example>
         <para>The alignment character can be specified on a per-column, per-table
basis with the <tag class="attribute">char</tag> attribute on <tag>colspec</tag>.
</para>
         <para>The alignment width and padding character can be specified on a
per-column, per-table basis with a
<literal>db</literal>
            <indexterm>
               <primary>db processing
instruction</primary>
            </indexterm> processing instruction.</para>
         <para>If the settings apply to the whole table, the processing
instruction can be a child of <tag>tgroup</tag>, preceding any other
elements. If you want to specify different values for different
columns, the processing instruction must immediately follow the
<tag>colspec</tag> for the column.</para>
         <para>The <literal>align-char-width</literal>
            <indexterm>
               <primary>db processing instruction</primary>
               <secondary>align-char-width pseudo-attribute</secondary>
            </indexterm>
pseudo-attribute controls the number of characters following the
alignment character. The <literal>align-char-pad</literal>
            <indexterm>
               <primary>db processing instruction</primary>
               <secondary>align-char-pad pseudo-attribute</secondary>
            </indexterm>
pseudo-attribute controls the character used for padding.</para>
         <para>A value that does not contain the alignment character is assumed
to be followed immediately by the alignment character. (In other
words, if you’re aligning on “.”, “10” is considered to be “10.”.)
If the pad character is a space<footnote>
               <para>Technically, is in the class of Unicode characters considered to be spaces,
one that matches <literal>\p{Zs}</literal>.</para>
            </footnote>, then the pad
character will be used to pad the value. If the pad character isn’t a space,
the value will be padded with the alignment character followed by pad characters
as necessary.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_allow-eval"><indexterm><primary>param</primary><secondary>allow-eval</secondary></indexterm>
   <?db filename="p_allow-eval"?>
      <refmeta>
         <refentrytitle>$allow-eval</refentrytitle>
         <refmiscinfo>{}allow-eval</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$allow-eval</refname>
         <refpurpose>Process the <tag class="pi">eval</tag> processing instruction?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$allow-eval as xs:string := 'false'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If this parameter <glossterm>is true</glossterm>, XPath expressions contained in the
<tag class="pi">eval</tag> processing instruction will be evaluated,
otherwise the processing instruction is silently ignored.</para>
         <para>If the eval is performed, the result of the evaluation is
inserted into the formatted document.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_annotate-toc"><indexterm><primary>param</primary><secondary>annotate-toc</secondary></indexterm>
   <?db filename="p_annotate-toc"?>
      <refmeta>
         <refentrytitle>$annotate-toc</refentrytitle>
         <refmiscinfo>{}annotate-toc</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$annotate-toc</refname>
         <refpurpose>Annotate the table-of-contents?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$annotate-toc := 'true'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If true, a table of contents containing <tag>refentry</tag> elements
will also include the <tag>refpurpose</tag> for each entry.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_annotation-collection"><indexterm><primary>param</primary><secondary>annotation-collection</secondary></indexterm>
   <?db filename="p_annotation-collection"?>
      <refmeta>
         <refentrytitle>$annotation-collection</refentrytitle>
         <refmiscinfo>{}annotation-collection</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$annotation-collection</refname>
         <refpurpose>An external collection of annotations</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$annotation-collection as xs:string := ''</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>Because annotations can be applied by pointing from the
annotation to the element they annotate, they can be stored and
managed externally. If <parameter>annotation-collection</parameter><indexterm><primary>param</primary><secondary>annotation-collection</secondary></indexterm>
points to a collection of annotations, the stylesheets will add them
to the document before it is processed.</para>
         <para>To achieve this:</para>
         <orderedlist>
            <listitem>
               <para>Create a collection of shared annotations and store them somewhere. The
stylesheets will copy only the top-level <tag>annotation</tag> elements
(<literal>/*/annotation</literal>). The
document element doesn’t matter.</para>
            </listitem>
            <listitem>
               <para>Use the <tag class="attribute">annotates</tag> attribute on the annotations to
point at elements in the document you’re transforming.
</para>
               <para>Annotations can point in either direction, but you will get
ID/IDREF validation errors if you attempt to point from the document
into the annotation collection because the annotation collection won’t
be present when you validate. If your use case requires pointing in
that direction, you will have better luck with a pipeline that
combines the two documents before validating.</para>
            </listitem>
            <listitem>
               <para>Run your transformation with
<parameter>annotation-collection</parameter><indexterm><primary>param</primary><secondary>annotation-collection</secondary></indexterm> set to the URI of the
document that contains your collection of annotations.
</para>
            </listitem>
         </orderedlist>
         <para>The stylesheets will apply annotations to the elements
identified. Extra annotations, annotations that don’t point to
elements that actually exist in the document being transformed, will
be ignored.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_annotation-mark"><indexterm><primary>param</primary><secondary>annotation-mark</secondary></indexterm>
   <?db filename="p_annotation-mark"?>
      <refmeta>
         <refentrytitle>$annotation-mark</refentrytitle>
         <refmiscinfo>{}annotation-mark</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$annotation-mark</refname>
         <refpurpose>Identifying mark for annotations</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis linenumbering="unnumbered">&lt;xsl:param name="annotation-mark"&gt;
   &lt;sup&gt;⌖&lt;/sup&gt;
&lt;/xsl:param&gt;</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>When <tag>annotation</tag>s are rendered, the
<parameter>annotation-mark</parameter><indexterm><primary>param</primary><secondary>annotation-mark</secondary></indexterm> is inserted at each location
where an annotation occurs.</para>
         <para>If JavaScript is used for annotations (see <parameter>annotation-style</parameter><indexterm><primary>param</primary><secondary>annotation-style</secondary></indexterm>),
clicking on the mark will bring up the annotation; if JavaScript is not used, the marks
are numbered and the annotations appear as a form of footnote.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_annotation-placement"><indexterm><primary>param</primary><secondary>annotation-placement</secondary></indexterm>
   <?db filename="p_annotation-placement"?>
      <refmeta>
         <refentrytitle>$annotation-placement</refentrytitle>
         <refmiscinfo>{}annotation-placement</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$annotation-placement</refname>
         <refpurpose>Determines where the annotation mark is placed</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$annotation-placement := 'after'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>When <tag>annotation</tag>s are rendered,
<parameter>annotation-placement</parameter><indexterm><primary>param</primary><secondary>annotation-placement</secondary></indexterm> determines where the
<parameter>annotation-mark</parameter><indexterm><primary>param</primary><secondary>annotation-mark</secondary></indexterm> is placed. If the value is <literal>after</literal>,
the mark or marks are placed at the very end of the element being annotated.
If the value is <literal>before</literal>, the marks are placed at the very beginning
of the element being annotated.
</para>
         <para>Each individual annotation can determine its placement by placing <literal>before</literal>
or <literal>after</literal> in its <tag class="attribute">role</tag> attribute.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_annotation-style"><indexterm><primary>param</primary><secondary>annotation-style</secondary></indexterm>
   <?db filename="p_annotation-style"?>
      <refmeta>
         <refentrytitle>$annotation-style</refentrytitle>
         <refmiscinfo>{}annotation-style</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$annotation-style</refname>
         <refpurpose>Selects the annotation style</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$annotation-style := 'javascript'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>An <tag>annotation</tag> can be used to add annotations to
arbitrary elements. Annotations are formatted something like
footnotes, they appear at the bottom of the page and are linked from
the point of the annotation. There are two annotation styles,
“<literal>javascript</literal>” and “<literal>inline</literal>”.
</para>
         <para>If the annotation style is “<literal>javascript</literal>”, a
script reference will be added. The script hides the annotations at the
bottom of the page and instead renders them as modal dialogs when the
marks are clicked. The presentation is accessible in the absence of
JavaScript.</para>
         <para>If the annotation style is “<literal>inline</literal>”, then the
script is not included and the default presentation is used. No other values
are supported at this time.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_annotations-js"><indexterm><primary>param</primary><secondary>annotations-js</secondary></indexterm>
   <?db filename="p_annotations-js"?>
      <refmeta>
         <refentrytitle>$annotations-js</refentrytitle>
         <refmiscinfo>{}annotations-js</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$annotations-js</refname>
         <refpurpose>Script to support popup (JavaScript) annotations</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$annotations-js := 'js/annotations.js'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If popup (JavaScript) annotations appear in the document, a link to
this script will be added to the document. This script must contain the JavaScript
necessary to support the popup annotations feature.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_bibliography-collection"><indexterm><primary>param</primary><secondary>bibliography-collection</secondary></indexterm>
   <?db filename="p_bibliography-collection"?>
      <refmeta>
         <refentrytitle>$bibliography-collection</refentrytitle>
         <refmiscinfo>{}bibliography-collection</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$bibliography-collection</refname>
         <refpurpose>An external collection of bibliography entries</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$bibliography-collection as xs:string := ''</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>It’s often convenient to share a common bibliography
across many documents. If
<parameter>bibliography-collection</parameter><indexterm><primary>param</primary><secondary>bibliography-collection</secondary></indexterm> points to a
bibliography, the stylesheets will automatically populate bibliography
entries in the document being transformed.</para>
         <para>To achieve this:</para>
         <orderedlist>
            <listitem>
               <para>Create a shared bibliography and store it somewhere. Make sure that
each entry in your shared bibliography has a unique <tag class="attribute">xml:id</tag> value.
</para>
            </listitem>
            <listitem>
               <para>Run your
transformation with <parameter>bibliography-collection</parameter><indexterm><primary>param</primary><secondary>bibliography-collection</secondary></indexterm> set
to the URI of that document.
</para>
            </listitem>
            <listitem>
               <para>In the document you’re transforming, refer to the shared entries
with completely empty <tag>biblioentry</tag> or <tag>bibliomixed</tag>
elements that have the same <tag class="attribute">xml:id</tag> as an entry in the
shared bibliography.
</para>
            </listitem>
         </orderedlist>
         <para>The stylesheets will copy those entries into your document before processing it.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_callout-default-column"><indexterm><primary>param</primary><secondary>callout-default-column</secondary></indexterm>
   <?db filename="p_callout-default-column"?>
      <refmeta>
         <refentrytitle>$callout-default-column</refentrytitle>
         <refmiscinfo>{}callout-default-column</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$callout-default-column</refname>
         <refpurpose>Default column for callouts</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$callout-default-column := 60</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>When callouts are used in program listings (or screens), if the
column is not specified for a callout, it will appear in this column.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_callout-unicode-start"><indexterm><primary>param</primary><secondary>callout-unicode-start</secondary></indexterm>
   <?db filename="p_callout-unicode-start"?>
      <refmeta>
         <refentrytitle>$callout-unicode-start</refentrytitle>
         <refmiscinfo>{}callout-unicode-start</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$callout-unicode-start</refname>
         <refpurpose>Initial callout character</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$callout-unicode-start := 9311</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>When callouts are rendered, for example in <tag>programlistingco</tag>,
this is the beginning of the range of characters to be used for callout “bugs”.
This is the decimal value of the Unicode code point that is the “zero” point in
the list, the one just before the first character.</para>
         <para>The default value is 9311 which means the first callout will
be 9312, U2460, “①”.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_chunk"><indexterm><primary>param</primary><secondary>chunk</secondary></indexterm>
   <?db filename="p_chunk"?>
      <refmeta>
         <refentrytitle>$chunk</refentrytitle>
         <refmiscinfo>{}chunk</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$chunk</refname>
         <refpurpose>Produce chunked output?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$chunk as xs:string? := ()</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>Specifying any value for this parameter turns on “chunking”, see
<xref linkend="chunking"/>. The value of the parameter is taken as the filename
for the root chunk, unless some other mechanism identifies an alternate value.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_chunk-exclude"><indexterm><primary>param</primary><secondary>chunk-exclude</secondary></indexterm>
   <?db filename="p_chunk-exclude"?>
      <refmeta>
         <refentrytitle>$chunk-exclude</refentrytitle>
         <refmiscinfo>{}chunk-exclude</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$chunk-exclude</refname>
         <refpurpose>XPath expressions for excluding chunks</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$chunk-exclude as xs:string* := ('self::db:partintro', 
                                 'self::*[ancestor::db:partintro]', 
                                 'self::db:annotation', 
                                 'self::db:section[not(preceding-sibling::db:section)]', 
                                 'self::db:sect1[not(preceding-sibling::db:sect1)]', 
                                 'self::db:toc')</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>This parameter is only relevant when chunking is being performed,
see <xref linkend="chunking"/>.
This parameter contains a list of XPath expressions. When
chunking is being applied, for any element that could be a chunk (see
<parameter>chunk-include</parameter><indexterm><primary>param</primary><secondary>chunk-include</secondary></indexterm>), each expression is evaluated
with that element as the context item. If the effective boolean value
of any expression is true, the element will not become a chunk.
</para>
         <para>The default value for this parameter is:</para>
         <programlisting language="xquery" linenumbering="unnumbered">('self::db:partintro',
'self::*[ancestor::db:partintro]',
'self::db:toc')</programlisting>
         <para>In other words <tag>partintro</tag>, all of the descendants of <tag>partintro</tag>,
and <tag>toc</tag> are explicitly excluded from being chunks.</para>
         <para>The namespaces in <varname>chunk-filter-namespaces</varname><indexterm><primary>variable</primary><secondary>chunk-filter-namespaces</secondary></indexterm> will
be in-scope when this expression is evaluated.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_chunk-include"><indexterm><primary>param</primary><secondary>chunk-include</secondary></indexterm>
   <?db filename="p_chunk-include"?>
      <refmeta>
         <refentrytitle>$chunk-include</refentrytitle>
         <refmiscinfo>{}chunk-include</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$chunk-include</refname>
         <refpurpose>XPath expressions for identifying potential chunks</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$chunk-include as xs:string* := ('parent::db:set', 
                                 'parent::db:book', 
                                 'parent::db:part', 
                                 'parent::db:reference', 
                                 'self::db:refentry', 
                                 'self::db:section', 
                                 'self::db:sect1')</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>This parameter is only relevant when chunking is being
performed, see <xref linkend="chunking"/>. This parameter contains a
list of XPath expressions. When chunking is being applied, for every
element in the document, each expression is evaluated with that
element as the context item. If the effective boolean value of any
expression is true, the element is a candidate for chunking. It will
become a chunk unless <parameter>chunk-exclude</parameter><indexterm><primary>param</primary><secondary>chunk-exclude</secondary></indexterm> excludes it
or, in the special case of recursive sections, if it is nested too
deeply.</para>
         <para>The default value for this parameter is:</para>
         <programlisting language="xquery" linenumbering="unnumbered">('parent::db:set',
'parent::db:book',
'parent::db:part',
'parent::db:reference',
'self::db:refentry',
'self::db:section',
'self::db:sect1')</programlisting>
         <para>In other words all of the direct children of <tag>set</tag>,
<tag>book</tag>, <tag>part</tag>, <tag>reference</tag> will become
chunks (the special case of <tag>info</tag> is automatically
excluded); <tag>refentry</tag>, <tag>section</tag>,
and <tag>sect1</tag> become chunks anywhere
they appear. In the case of recursive sections,
<parameter>chunk-section-depth</parameter><indexterm><primary>param</primary><secondary>chunk-section-depth</secondary></indexterm> also applies.</para>
         <para>The namespaces in <varname>chunk-filter-namespaces</varname><indexterm><primary>variable</primary><secondary>chunk-filter-namespaces</secondary></indexterm> will
be in-scope when this expression is evaluated.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_chunk-nav"><indexterm><primary>param</primary><secondary>chunk-nav</secondary></indexterm>
   <?db filename="p_chunk-nav"?>
      <refmeta>
         <refentrytitle>$chunk-nav</refentrytitle>
         <refmiscinfo>{}chunk-nav</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$chunk-nav</refname>
         <refpurpose>Add keyboard navigation to chunks?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$chunk-nav as xs:string := 'true'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If <parameter>chunk-nav</parameter><indexterm><primary>param</primary><secondary>chunk-nav</secondary></indexterm>
            <glossterm>is true</glossterm>,
keyboard navigation will be added to chunked output. This is accomplished by
adding the <parameter>chunk-nav-js</parameter><indexterm><primary>param</primary><secondary>chunk-nav-js</secondary></indexterm> script to the generated HTML.
</para>
         <table>
            <title>Default keyboard navigation keys</title>
            <tgroup cols="2">
               <thead>
                  <row>
                     <entry>Key</entry>
                     <entry>Navigation</entry>
                  </row>
               </thead>
               <tbody>
                  <row>
                     <entry>
                        <keycap>N</keycap> or <keycap>→</keycap>
                     </entry>
                     <entry>Next sibling</entry>
                  </row>
                  <row>
                     <entry>
                        <keycap>P</keycap> or <keycap>←</keycap>
                     </entry>
                     <entry>Previous sibling</entry>
                  </row>
                  <row>
                     <entry>
                        <keycap>U</keycap> or <keycap>↑</keycap>
                     </entry>
                     <entry>Parent</entry>
                  </row>
                  <row>
                     <entry>
                        <keycap>H</keycap> or <keycap>Home</keycap>
                     </entry>
                     <entry>Home</entry>
                  </row>
               </tbody>
            </tgroup>
         </table>
         <para>In addition, if the speaker notes extension is used,
<keycap>S</keycap> will toggle between the normal view and the speaker
notes view.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_chunk-nav-js"><indexterm><primary>param</primary><secondary>chunk-nav-js</secondary></indexterm>
   <?db filename="p_chunk-nav-js"?>
      <refmeta>
         <refentrytitle>$chunk-nav-js</refentrytitle>
         <refmiscinfo>{}chunk-nav-js</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$chunk-nav-js</refname>
         <refpurpose>Script to support keyboard navigation</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$chunk-nav-js as xs:string := 'js/chunk-nav.js'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If chunk navigation is enabled, this script is added to each chunk to
support keyboard navigation.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_chunk-output-base-uri"><indexterm><primary>param</primary><secondary>chunk-output-base-uri</secondary></indexterm>
   <?db filename="p_chunk-output-base-uri"?>
      <refmeta>
         <refentrytitle>$chunk-output-base-uri</refentrytitle>
         <refmiscinfo>{}chunk-output-base-uri</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$chunk-output-base-uri</refname>
         <refpurpose>Output base URI for chunks</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis linenumbering="unnumbered">&lt;xsl:param
            name="chunk-output-base-uri"
            as="xs:string"&gt;
   &lt;xsl:choose&gt;
      &lt;xsl:when test="not($v:chunk)"&gt;&lt;!-- it doesn't actually matter --&gt;
         &lt;xsl:sequence select="''"/&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:when use-when="function-available('ext:cwd')" test="true()"&gt;
         &lt;xsl:message select="'Default output base uri:',                          resolve-uri(ext:cwd(), static-base-uri())"/&gt;
         &lt;xsl:sequence select="resolve-uri(ext:cwd(), static-base-uri())"/&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
         &lt;xsl:message terminate="yes" select="'You must specify the $chunk-output-base-uri'"/&gt;
      &lt;/xsl:otherwise&gt;
   &lt;/xsl:choose&gt;
&lt;/xsl:param&gt;</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>This parameter identifies the output directory where “chunks”
will be stored. If the stylesheet is not producing
chunked results (see <xref linkend="chunking"/>), this parameter has no effect.</para>
         <para>If the <function>ext:cwd</function> extension function (see
<xref linkend="extensions"/>) is available, its value will be the default
value for this parameter. If the extension isn’t available, you must
provide a value for this parameter.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_chunk-renumber-footnotes"><indexterm><primary>param</primary><secondary>chunk-renumber-footnotes</secondary></indexterm>
   <?db filename="p_chunk-renumber-footnotes"?>
      <refmeta>
         <refentrytitle>$chunk-renumber-footnotes</refentrytitle>
         <refmiscinfo>{}chunk-renumber-footnotes</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$chunk-renumber-footnotes</refname>
         <refpurpose>Renumber footnotes when chunking?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$chunk-renumber-footnotes := 'true'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If this parameter <glossterm>is true</glossterm>, footnotes
will be renumbered within chunks. See <varname>v:chunk-renumber-footnotes</varname><indexterm><primary>variable</primary><secondary>v:chunk-renumber-footnotes</secondary></indexterm>.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_chunk-section-depth"><indexterm><primary>param</primary><secondary>chunk-section-depth</secondary></indexterm>
   <?db filename="p_chunk-section-depth"?>
      <refmeta>
         <refentrytitle>$chunk-section-depth</refentrytitle>
         <refmiscinfo>{}chunk-section-depth</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$chunk-section-depth</refname>
         <refpurpose>Returns the chunking depth for recursive sections</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$chunk-section-depth := 1</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>This parameter is only relevant when chunking is being performed,
see <xref linkend="chunking"/>.
For recursive sections (<tag>section</tag>,
and <tag>refsection</tag>), if the section would be a chunk
according to <parameter>chunk-include</parameter><indexterm><primary>param</primary><secondary>chunk-include</secondary></indexterm>, it is further tested against
<parameter>chunk-section-depth</parameter><indexterm><primary>param</primary><secondary>chunk-section-depth</secondary></indexterm>. If it is nested more deeply than
<parameter>chunk-section-depth</parameter><indexterm><primary>param</primary><secondary>chunk-section-depth</secondary></indexterm>, it will not be considered for chunking.
</para>
         <note>
            <para>In principle, this parameter is unnecessary as it could be represented
by <parameter>chunk-exclude</parameter><indexterm><primary>param</primary><secondary>chunk-exclude</secondary></indexterm> expressions. However,
changing the section depth is a common customization, so it’s handled
as a separate parameter.</para>
         </note>
      </refsection>
   </refentry>
   <refentry xml:id="p_classsynopsis-indent"><indexterm><primary>param</primary><secondary>classsynopsis-indent</secondary></indexterm>
   <?db filename="p_classsynopsis-indent"?>
      <refmeta>
         <refentrytitle>$classsynopsis-indent</refentrytitle>
         <refmiscinfo>{}classsynopsis-indent</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$classsynopsis-indent</refname>
         <refpurpose>Indent for <tag>classsynopsis</tag> members</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$classsynopsis-indent := '  '</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>Elements inside a class synopsis (field and method declarations, for example)
will be indented by this amount.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_component-numbers-inherit"><indexterm><primary>param</primary><secondary>component-numbers-inherit</secondary></indexterm>
   <?db filename="p_component-numbers-inherit"?>
      <refmeta>
         <refentrytitle>$component-numbers-inherit</refentrytitle>
         <refmiscinfo>{}component-numbers-inherit</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$component-numbers-inherit</refname>
         <refpurpose>Include component labels in section labels?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$component-numbers-inherit as xs:string := 'false'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If true, section labels will be prefixed with the label of their
containing component (<tag>chapter</tag>, <tag>appendix</tag>, etc.)
In other words, the first section of chapter 2 will be labeled “2.1”
if this is true and simply “1” if it’s false.</para>
         <para>See also <parameter>division-numbers-inherit</parameter><indexterm><primary>param</primary><secondary>division-numbers-inherit</secondary></indexterm>,
<parameter>section-numbers-inherit</parameter><indexterm><primary>param</primary><secondary>section-numbers-inherit</secondary></indexterm>, and
<varname>v:title-properties</varname><indexterm><primary>variable</primary><secondary>v:title-properties</secondary></indexterm>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_control-js"><indexterm><primary>param</primary><secondary>control-js</secondary></indexterm>
   <?db filename="p_control-js"?>
      <refmeta>
         <refentrytitle>$control-js</refentrytitle>
         <refmiscinfo>{}control-js</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$control-js</refname>
         <refpurpose>Script to support theme selection</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$control-js as xs:string := 'js/controls.js'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If the <parameter>theme-picker</parameter><indexterm><primary>param</primary><secondary>theme-picker</secondary></indexterm> is enabled, a link to
this script will be added to the document. This script must contain the JavaScript
necessary to support the theme controls.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_copyright-collapse-years"><indexterm><primary>param</primary><secondary>copyright-collapse-years</secondary></indexterm>
   <?db filename="p_copyright-collapse-years"?>
      <refmeta>
         <refentrytitle>$copyright-collapse-years</refentrytitle>
         <refmiscinfo>{}copyright-collapse-years</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$copyright-collapse-years</refname>
         <refpurpose>Collapse sequential copyright years into a range?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$copyright-collapse-years := true()</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If true, sequential copyright years will be collapsed into a range.
</para>
         <para>For example,</para>
         <programlisting><?db verbatim-style="plain"
?>&lt;copyright&gt;
&lt;year&gt;1993&lt;/year&gt;
&lt;year&gt;1997&lt;/year&gt;
&lt;year&gt;1998&lt;/year&gt;
&lt;year&gt;1999&lt;/year&gt;
&lt;holder&gt;Jane Smith&lt;/holder&gt;
&lt;/copyright&gt;</programlisting>
         <para>might be rendered: “Copyright © 1993, 1997–1999 Jane Smith”.</para>
         <para>If <varname>copyright-collapse-years</varname><indexterm><primary>variable</primary><secondary>copyright-collapse-years</secondary></indexterm> is false, that
wold be rendered: “Copyright © 1993, 1997, 1998, 1999 Jane Smith”.</para>
         <para>See also <varname>copyright-year-range-separator</varname><indexterm><primary>variable</primary><secondary>copyright-year-range-separator</secondary></indexterm>
and <varname>copyright-year-separator</varname><indexterm><primary>variable</primary><secondary>copyright-year-separator</secondary></indexterm>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_copyright-year-range-separator"><indexterm><primary>param</primary><secondary>copyright-year-range-separator</secondary></indexterm>
   <?db filename="p_copyright-year-range-separator"?>
      <refmeta>
         <refentrytitle>$copyright-year-range-separator</refentrytitle>
         <refmiscinfo>{}copyright-year-range-separator</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$copyright-year-range-separator</refname>
         <refpurpose>Separator character for copyright year ranges</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$copyright-year-range-separator := '–'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>When a sequence of copyright years is collapsed into a range,
this character is used to separate the first and last years.</para>
         <para>See also <varname>copyright-collapse-years</varname><indexterm><primary>variable</primary><secondary>copyright-collapse-years</secondary></indexterm>
and <varname>copyright-year-separator</varname><indexterm><primary>variable</primary><secondary>copyright-year-separator</secondary></indexterm>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_copyright-year-separator"><indexterm><primary>param</primary><secondary>copyright-year-separator</secondary></indexterm>
   <?db filename="p_copyright-year-separator"?>
      <refmeta>
         <refentrytitle>$copyright-year-separator</refentrytitle>
         <refmiscinfo>{}copyright-year-separator</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$copyright-year-separator</refname>
         <refpurpose>Separator character for copyright years</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$copyright-year-separator := ', '</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>When a series of copyright years (or year ranges) is formatted,
this string is used to separate them.</para>
         <para>See also <varname>copyright-year-range-separator</varname><indexterm><primary>variable</primary><secondary>copyright-year-range-separator</secondary></indexterm>
and <varname>copyright-collapse-years</varname><indexterm><primary>variable</primary><secondary>copyright-collapse-years</secondary></indexterm>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_date-date-format"><indexterm><primary>param</primary><secondary>date-date-format</secondary></indexterm><indexterm><primary>param</primary><secondary>date-dateTime-format</secondary></indexterm>
   <?db filename="p_date-date-format"?>
      <refmeta>
         <refentrytitle>$date-date-format, $date-dateTime-format</refentrytitle>
         <refmiscinfo>{}date-date-format</refmiscinfo>
         <refmiscinfo>{}date-dateTime-format</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$date-date-format</refname>
         <refname xml:id="p_date-dateTime-format">$date-dateTime-format</refname>
         <refpurpose>Format strings for dates and dateTimes</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$date-date-format := '[D01] [MNn,*-3] [Y0001]'</synopsis>
         <synopsis>$date-dateTime-format := '[H01]:[m01] [D01] [MNn,*-3] [Y0001]'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The most convenient format for storing dates that will be
machine processed: sorted, indexed, etc, is <biblioref linkend="iso8601"/>. When publishing these dates, it’s often
desirable to use a different format, one more familiar to readers.</para>
         <para>A <tag>pubdate</tag> that conforms to an ISO 8601 date (“yyyy-mm-dd”)
will be formatted with the <parameter>date-date-format</parameter><indexterm><primary>param</primary><secondary>date-date-format</secondary></indexterm>;
one that conforms to an ISO 8601 dateTime (“yyyy-mm-ddThh:mm:ss”)
will be formatted with the <parameter>date-dateTime-format</parameter><indexterm><primary>param</primary><secondary>date-dateTime-format</secondary></indexterm>.
</para>
         <para>See also <function>f:date-format</function>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_dc-metadata"><indexterm><primary>param</primary><secondary>dc-metadata</secondary></indexterm>
   <?db filename="p_dc-metadata"?>
      <refmeta>
         <refentrytitle>$dc-metadata</refentrytitle>
         <refmiscinfo>{}dc-metadata</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$dc-metadata</refname>
         <refpurpose>Output Dublin Core metadata?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$dc-metadata as xs:string := 'true'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If this parameter <glossterm>is true</glossterm>, the
<tag namespace="http://www.w3.org/1999/xhtml">head</tag> element
of each result document will contain
<tag namespace="http://www.w3.org/1999/xhtml">meta</tag> elements
for Dublin Core metadata that can be derived from the source
document.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_debug"><indexterm><primary>param</primary><secondary>debug</secondary></indexterm>
   <?db filename="p_debug"?>
      <refmeta>
         <refentrytitle>$debug</refentrytitle>
         <refmiscinfo>{}debug</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$debug</refname>
         <refpurpose>Debugging flags</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$debug as xs:string := ''</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The <parameter>debug</parameter><indexterm><primary>param</primary><secondary>debug</secondary></indexterm> parameter contains a space
separated list of flags. Depending on which flags are enabled, various additional
debugging messages will be emitted during processing.</para>
         <para>The following flags are supported:</para>
         <variablelist role="enumeration">
            <varlistentry>
               <term>
                  <enumvalue>callouts</enumvalue>
               </term>
               <listitem>
                  <para>Display additional information about callout processing.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>cals-align-char</enumvalue>
               </term>
               <listitem>
                  <para>Display additional information about the computation of character alignment
processing in CALS tables.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>chunk-cleanup</enumvalue>
               </term>
               <listitem>
                  <para>Display additional information about chunk cleanup processing.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>chunks</enumvalue>
               </term>
               <listitem>
                  <para>Display additional information about chunk selection.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>db4to5</enumvalue>
               </term>
               <listitem>
                  <para>Display additional information about the DocBook 4.x to 5.x upgrade process.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>dynamic-profile</enumvalue>
               </term>
               <listitem>
                  <para>Display additional information about
<link linkend="dynprofiling">dynamic profiling</link>.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>dynamic-profile-suppress</enumvalue>
               </term>
               <listitem>
                  <para>Display additional information about what elements are suppressed by
dynamic profiling.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>image-properties</enumvalue>
               </term>
               <listitem>
                  <para>Display additional information about the results of the extracting
properties from images. This will display all of the properties available from
each image.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>image-markup</enumvalue>
               </term>
               <listitem>
                  <para>Display the markup generated for media objects.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>intra-chunk-links</enumvalue>
               </term>
               <listitem>
                  <para>Display additional information about the resolution of intra-chunk references.
to links.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>intra-chunk-refs</enumvalue>
               </term>
               <listitem>
                  <para>Display additional information about intra-chunk references.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>mediaobject-uris</enumvalue>
               </term>
               <listitem>
                  <para>Display additional information about how media object URIs are constructed.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>linkbase</enumvalue>
               </term>
               <listitem>
                  <para>Display additional information about how XLink linkbases are resolved.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>objects</enumvalue>
               </term>
               <listitem>
                  <para>Display additional information about how media objects are selected.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>pipeline</enumvalue>
               </term>
               <listitem>
                  <para>Display additional information about the pipeline processing stages.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>profile</enumvalue>
               </term>
               <listitem>
                  <para>Display additional information about <link linkend="profiling">profiling</link>.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>profile-suppress</enumvalue>
               </term>
               <listitem>
                  <para>Display additional information about what elements are suppressed by
profiling.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>properties</enumvalue>
               </term>
               <listitem>
                  <para>Display additional information about the properties associated
with a verbatim environment.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>render-verbatim</enumvalue>
               </term>
               <listitem>
                  <para>Display additional information about how verbatim environments are rendered.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>tables</enumvalue>
               </term>
               <listitem>
                  <para>Display additional information about how tables are rendered.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>template-matches</enumvalue>
               </term>
               <listitem>
                  <para>Display additional information about how title page templates are selected.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>templates</enumvalue>
               </term>
               <listitem>
                  <para>Display additional information about title page templates.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>verbatim</enumvalue>
               </term>
               <listitem>
                  <para>Display additional information about how verbatim elements are processed.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>xlink</enumvalue>
               </term>
               <listitem>
                  <para>Display additional information about XLink resolution.
</para>
               </listitem>
            </varlistentry>
         </variablelist>
      </refsection>
   </refentry>
   <refentry xml:id="p_default-float-style"><indexterm><primary>param</primary><secondary>default-float-style</secondary></indexterm>
   <?db filename="p_default-float-style"?>
      <refmeta>
         <refentrytitle>$default-float-style</refentrytitle>
         <refmiscinfo>{}default-float-style</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$default-float-style</refname>
         <refpurpose>Default float style</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$default-float-style := 'left'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The <tag class="attribute">floatstyle</tag> attribute on formal objects
(<tag>figure</tag>, etc.) indicates that they should float. This is
achieved by adding the float style as a class value in the HTML
output. If the value of <tag class="attribute">floatstyle</tag> is
“<literal>float</literal>”, then the
<parameter>default-float-style</parameter><indexterm><primary>param</primary><secondary>default-float-style</secondary></indexterm> will be applied. In other
words, the CSS classes will be “<literal>float left</literal>” (as long
as <parameter>default-float-style</parameter><indexterm><primary>param</primary><secondary>default-float-style</secondary></indexterm> is “<literal>left</literal>”).
If any other value is given for <tag class="attribute">floatstyle</tag>, then
the CSS classes will be “<literal>float</literal>
            <replaceable>value</replaceable>”.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_default-language"><indexterm><primary>param</primary><secondary>default-language</secondary></indexterm>
   <?db filename="p_default-language"?>
      <refmeta>
         <refentrytitle>$default-language</refentrytitle>
         <refmiscinfo>{}default-language</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$default-language</refname>
         <refpurpose>Default language</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$default-language := 'en'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If the stylesheets need to generate text (the names of labels
such as “Chapter”, for example), they attempt to do so in the same
language as the document. This is determined by finding the nearast
in-scope <tag class="attribute">xml:lang</tag> attribute from the context where the
generated text is required.
</para>
         <para>If there is no in-scope <tag class="attribute">xml:lang</tag> attribute,
or if there is no localization available for the language
specified,
the
<parameter>default-language</parameter><indexterm><primary>param</primary><secondary>default-language</secondary></indexterm> is used instead.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_default-length-magnitude"><indexterm><primary>param</primary><secondary>default-length-magnitude</secondary></indexterm><indexterm><primary>param</primary><secondary>default-length-unit</secondary></indexterm>
   <?db filename="p_default-length-magnitude"?>
      <refmeta>
         <refentrytitle>$default-length-magnitude, $default-length-unit</refentrytitle>
         <refmiscinfo>{}default-length-magnitude</refmiscinfo>
         <refmiscinfo>{}default-length-unit</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$default-length-magnitude</refname>
         <refname xml:id="p_default-length-unit">$default-length-unit</refname>
         <refpurpose>The magnitude and units of the default length</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$default-length-magnitude := 25.0</synopsis>
         <synopsis>$default-length-unit := '%'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If the stylesheet encounters a length that it cannot parse, the default
magnitude and unit are used for that length. See <xref linkend="units"/>.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_default-personal-name-style"><indexterm><primary>param</primary><secondary>default-personal-name-style</secondary></indexterm>
   <?db filename="p_default-personal-name-style"?>
      <refmeta>
         <refentrytitle>$default-personal-name-style</refentrytitle>
         <refmiscinfo>{}default-personal-name-style</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$default-personal-name-style</refname>
         <refpurpose>The default style for formatting personal names</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$default-personal-name-style := 'first-last'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The stylesheets can format personal names in a variety of ways.
Absent any indication of what style to use, the
<parameter>default-personal-name-style</parameter><indexterm><primary>param</primary><secondary>default-personal-name-style</secondary></indexterm> will be used;
see
<code role="template">t:person-name</code>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_default-theme"><indexterm><primary>param</primary><secondary>default-theme</secondary></indexterm>
   <?db filename="p_default-theme"?>
      <refmeta>
         <refentrytitle>$default-theme</refentrytitle>
         <refmiscinfo>{}default-theme</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$default-theme</refname>
         <refpurpose>Default theme</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$default-theme as xs:string := ''</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If a <parameter>default-theme</parameter><indexterm><primary>param</primary><secondary>default-theme</secondary></indexterm> is specified, its
value will be added to the class attribute on the
<tag namespace="http://www.w3.org/1999/xhtml">html</tag> element(s)
generated. The actual theme implementation is performed in CSS.
See <varname>theme-list</varname><indexterm><primary>variable</primary><secondary>theme-list</secondary></indexterm> for a list of themes. You can add
your own themes with custom CSS (with <code role="mode">m:html-head-links</code> mode, for
example).
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_division-numbers-inherit"><indexterm><primary>param</primary><secondary>division-numbers-inherit</secondary></indexterm>
   <?db filename="p_division-numbers-inherit"?>
      <refmeta>
         <refentrytitle>$division-numbers-inherit</refentrytitle>
         <refmiscinfo>{}division-numbers-inherit</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$division-numbers-inherit</refname>
         <refpurpose>Include division labels in component labels?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$division-numbers-inherit as xs:string := 'false'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If true, component labels will be prefixed with the label of their
containing division (<tag>part</tag>, <tag>reference</tag>, etc.)
In other words, chapter 2 in part I will be labeled “I.2”
if this is true and simply “2” if it’s false.</para>
         <para>See also <parameter>component-numbers-inherit</parameter><indexterm><primary>param</primary><secondary>component-numbers-inherit</secondary></indexterm>,
<parameter>section-numbers-inherit</parameter><indexterm><primary>param</primary><secondary>section-numbers-inherit</secondary></indexterm>, and
<varname>v:title-properties</varname><indexterm><primary>variable</primary><secondary>v:title-properties</secondary></indexterm>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_docbook-transclusion"><indexterm><primary>param</primary><secondary>docbook-transclusion</secondary></indexterm>
   <?db filename="p_docbook-transclusion"?>
      <refmeta>
         <refentrytitle>$docbook-transclusion</refentrytitle>
         <refmiscinfo>{}docbook-transclusion</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$docbook-transclusion</refname>
         <refpurpose>Enable DocBook transclusion processing</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$docbook-transclusion := 'false'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The <parameter>docbook-transclusion</parameter><indexterm><primary>param</primary><secondary>docbook-transclusion</secondary></indexterm> controls whether or not
DocBook transclusion processing (see <biblioref linkend="transclusion"/>) is
performed. The default at present is false because I don’t believe it’s in widespread
use and transclusion processing on large documents can be quite slow. If either
of those conditions change, the default may become true in some future version
of the stylesheets.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_dynamic-profile-error"><indexterm><primary>param</primary><secondary>dynamic-profile-error</secondary></indexterm>
   <?db filename="p_dynamic-profile-error"?>
      <refmeta>
         <refentrytitle>$dynamic-profile-error</refentrytitle>
         <refmiscinfo>{}dynamic-profile-error</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$dynamic-profile-error</refname>
         <refpurpose>How are errors in dynamic profiling handled?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$dynamic-profile-error := 'ignore'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If an error occurs evaluating a dynamic profiling expression, what should happen?
That depends on the setting of <parameter>dynamic-profile-error</parameter><indexterm><primary>param</primary><secondary>dynamic-profile-error</secondary></indexterm>:
</para>
         <variablelist>
            <varlistentry>
               <term>
                  <literal>ignore</literal>
               </term>
               <listitem>
                  <para>The error is ignored. This has no effect on whether or not the
element is included.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <literal>include</literal>
               </term>
               <listitem>
                  <para>The error is ignored and the expression is considered to have
returned a value of “true”.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <literal>exclude</literal>
               </term>
               <listitem>
                  <para>The error is ignored and the expression is considered to have
returned a value of “false”.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <literal>error</literal>
               </term>
               <listitem>
                  <para>Raises the <errorcode>dbe:DYNAMIC-PROFILE-EVAL-ERROR</errorcode> exception.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>any other value</term>
               <listitem>
                  <para>Raises the <errorcode>dbe:INVALID-DYNAMIC-PROFILE-ERROR</errorcode> exception.</para>
               </listitem>
            </varlistentry>
         </variablelist>
      </refsection>
   </refentry>
   <refentry xml:id="p_dynamic-profiles"><indexterm><primary>param</primary><secondary>dynamic-profiles</secondary></indexterm>
   <?db filename="p_dynamic-profiles"?>
      <refmeta>
         <refentrytitle>$dynamic-profiles</refentrytitle>
         <refmiscinfo>{}dynamic-profiles</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$dynamic-profiles</refname>
         <refpurpose>Is dynamic profiling enabled?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$dynamic-profiles as xs:string := 'false'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If this parameter <glossterm>is true</glossterm>, dynamic profiling
will be applied to the document. See <xref linkend="dynprofiling"/>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_experimental-pmuj"><indexterm><primary>param</primary><secondary>experimental-pmuj</secondary></indexterm>
   <?db filename="p_experimental-pmuj"?>
      <refmeta>
         <refentrytitle>$experimental-pmuj</refentrytitle>
         <refmiscinfo>{}experimental-pmuj</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$experimental-pmuj</refname>
         <refpurpose>Insert reverse links</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$experimental-pmuj := 'false'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If <parameter>experimental-pmuj</parameter><indexterm><primary>param</primary><secondary>experimental-pmuj</secondary></indexterm>
            <glossterm>is
true</glossterm>, then links will be inserted from link targets back
to link sources. In other words, if clicking on “A” jumps
you to “B”, the stylesheets will add a link at “B” that jumps you back
back to “A”. (Pmuj is jump spelled backwards.)
</para>
         <caution>
            <para>This feature is entirely experimental. It may change in
arbitrary ways or it may be abandoned.
</para>
         </caution>
         <para>Support is limited at the moment to inlines and formal objects
that have title pages. There’s currently no where to insert markup for
every possible element that could be a link target.
</para>
         <para>Pmuj’s from title pages should probably be inserted in the
heading, not above it, just because the styling would be nicer.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_footnote-numeration"><indexterm><primary>param</primary><secondary>footnote-numeration</secondary></indexterm>
   <?db filename="p_footnote-numeration"?>
      <refmeta>
         <refentrytitle>$footnote-numeration</refentrytitle>
         <refmiscinfo>{}footnote-numeration</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$footnote-numeration</refname>
         <refpurpose>How are footnotes numbered?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$footnote-numeration := ('1')</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>There are different styles of footnote numeration. This parameter
contains a list of the symbols that should be used. If there could be more
footnotes than symbols in the list, the last symbol in the
list must be a character suitable for formatting numbers.
</para>
         <para>For example, if the sequence in <parameter>footnote-numeration</parameter><indexterm><primary>param</primary><secondary>footnote-numeration</secondary></indexterm> is
“*”, “†”, “a”, then the first footnote will be marked with “<superscript>*</superscript>”,
the second with “<superscript>†</superscript>”, the third with
“<superscript>a</superscript>”, the forth with
“<superscript>b</superscript>”, and so on.</para>
         <para>When <link linkend="chunking">chunking</link>, footnotes may be renumbered
within each chunk (see <parameter>chunk-renumber-footnotes</parameter><indexterm><primary>param</primary><secondary>chunk-renumber-footnotes</secondary></indexterm>).</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_formal-object-title-placement"><indexterm><primary>param</primary><secondary>formal-object-title-placement</secondary></indexterm>
   <?db filename="p_formal-object-title-placement"?>
      <refmeta>
         <refentrytitle>$formal-object-title-placement</refentrytitle>
         <refmiscinfo>{}formal-object-title-placement</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$formal-object-title-placement</refname>
         <refpurpose>Specify placement of title on formal elements</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$formal-object-title-placement := 'after formalgroup:before'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>Formal elements are elements with a title that are often
displayed with a caption: <tag>figure</tag>, <tag>table</tag>,
<tag>example</tag> and <tag>equation</tag>. The
<parameter>formal-object-title-placement</parameter><indexterm><primary>param</primary><secondary>formal-object-title-placement</secondary></indexterm> parameter determines
if the title precedes or follows the element itself.</para>
         <para>The parameter consists of a series of tokens, “<literal>before</literal>”,
“<literal>after</literal>”, or
“<replaceable>element</replaceable>
            <literal>:</literal>
            <replaceable>position</replaceable>”.
The named forms (e.g., <literal>figure:before</literal>) take precedence with
the unnamed form serving as a default for any that don’t have named forms.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_funcsynopsis-default-style"><indexterm><primary>param</primary><secondary>funcsynopsis-default-style</secondary></indexterm>
   <?db filename="p_funcsynopsis-default-style"?>
      <refmeta>
         <refentrytitle>$funcsynopsis-default-style</refentrytitle>
         <refmiscinfo>{}funcsynopsis-default-style</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$funcsynopsis-default-style</refname>
         <refpurpose>Default style for function synopses</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$funcsynopsis-default-style := 'kr'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The <tag>funcsynopsis</tag> element can be rendered in several
styles. The <parameter>funcsynopsis-default-style</parameter><indexterm><primary>param</primary><secondary>funcsynopsis-default-style</secondary></indexterm>
parameter determines which style is used by default.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_funcsynopsis-table-threshold"><indexterm><primary>param</primary><secondary>funcsynopsis-table-threshold</secondary></indexterm>
   <?db filename="p_funcsynopsis-table-threshold"?>
      <refmeta>
         <refentrytitle>$funcsynopsis-table-threshold</refentrytitle>
         <refmiscinfo>{}funcsynopsis-table-threshold</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$funcsynopsis-table-threshold</refname>
         <refpurpose>Maximium width of a function synopsis</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$funcsynopsis-table-threshold := 40</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>When rendering <tag>funcsynopsis</tag> elements, the width of the synopsis depends on
the number of parameters and the lengths of their names and types. If the width of the
<tag>funcsynopsis</tag> would exceed <parameter>funcsynopsis-table-threshold</parameter><indexterm><primary>param</primary><secondary>funcsynopsis-table-threshold</secondary></indexterm> characters,
the presentation switches from an inline style to a tabular style.
The tabular style aligns the parameters up vertically after the function name.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_funcsynopsis-trailing-punctuation"><indexterm><primary>param</primary><secondary>funcsynopsis-trailing-punctuation</secondary></indexterm>
   <?db filename="p_funcsynopsis-trailing-punctuation"?>
      <refmeta>
         <refentrytitle>$funcsynopsis-trailing-punctuation</refentrytitle>
         <refmiscinfo>{}funcsynopsis-trailing-punctuation</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$funcsynopsis-trailing-punctuation</refname>
         <refpurpose>Trailing punctuation in function synopses</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$funcsynopsis-trailing-punctuation := ';'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>This punctuation character is added after the end of a
<tag>funcsynopisis</tag>. The default value of “;” is appropriate for
C and other languages that use “;” as statement separator.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_generate-html-page"><indexterm><primary>param</primary><secondary>generate-html-page</secondary></indexterm>
   <?db filename="p_generate-html-page"?>
      <refmeta>
         <refentrytitle>$generate-html-page</refentrytitle>
         <refmiscinfo>{}generate-html-page</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$generate-html-page</refname>
         <refpurpose>Generate the HTML page structure around the styled document</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$generate-html-page as xs:string := 'true'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If this parameter <glossterm>is true</glossterm>, then a
complete HTML page will be generated for the transformed document: an
<tag>html</tag> tag, <tag>head</tag> and <tag>body</tag> tags, etc. If
it’s false, then only the “raw” transformed content will be
produced. This is true for both the primary output and any secondary result documents.</para>
         <note>
            <para>When the “raw” output option is selected, links to the CSS
stylesheets, scripts, and other interactive features will not be
generated. You must make sure those are provided in some other way.
</para>
         </note>
      </refsection>
   </refentry>
   <refentry xml:id="p_generate-index"><indexterm><primary>param</primary><secondary>generate-index</secondary></indexterm>
   <?db filename="p_generate-index"?>
      <refmeta>
         <refentrytitle>$generate-index</refentrytitle>
         <refmiscinfo>{}generate-index</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$generate-index</refname>
         <refpurpose>Automatically generate an index?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$generate-index := 'true'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If a document contains an empty <tag>setindex</tag>, <tag>index</tag>, or
<tag>indexdiv</tag>, and <parameter>generate-index</parameter><indexterm><primary>param</primary><secondary>generate-index</secondary></indexterm>
            <glossterm>is true</glossterm>, then an index will automatically be generated
from any <tag>indexterm</tag>s found in the document.</para>
      </refsection>
   </refentry>
   <refentry role="obsolete 1.12.0" xml:id="p_generate-nested-toc"><indexterm><primary>param</primary><secondary>generate-nested-toc</secondary></indexterm>
   <?db filename="p_generate-nested-toc"?>
      <refmeta>
         <refentrytitle>$generate-nested-toc</refentrytitle>
         <refmiscinfo>{}generate-nested-toc</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$generate-nested-toc</refname>
         <refpurpose>Determines if subsubections appear in the table of contents</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <para>Obsolete as of version 1.12.0.</para>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>This parameter is no longer used. Instead, you can control the elements
that appear in a table of contents with the <code role="mode">m:toc-nested</code> mode.</para>
      </refsection>
   </refentry>
   <refentry role="obsolete 1.12.0" xml:id="p_generate-toc"><indexterm><primary>param</primary><secondary>generate-toc</secondary></indexterm>
   <?db filename="p_generate-toc"?>
      <refmeta>
         <refentrytitle>$generate-toc</refentrytitle>
         <refmiscinfo>{}generate-toc</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$generate-toc</refname>
         <refpurpose>Generate a table-of-contents?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <para>Obsolete as of version 1.12.0.</para>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>This parameter is no longer used. Instead, you can control the elements
that contain a table of contents with the <code role="mode">m:toc</code> mode.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_generate-trivial-toc"><indexterm><primary>param</primary><secondary>generate-trivial-toc</secondary></indexterm>
   <?db filename="p_generate-trivial-toc"?>
      <refmeta>
         <refentrytitle>$generate-trivial-toc</refentrytitle>
         <refmiscinfo>{}generate-trivial-toc</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$generate-trivial-toc</refname>
         <refpurpose>Generate a trivial table-of-contents?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$generate-trivial-toc as xs:string := 'false'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If the <parameter>generate-trivial-toc</parameter><indexterm><primary>param</primary><secondary>generate-trivial-toc</secondary></indexterm> parameter
<glossterm>is true</glossterm>, a table of contents will be generated even if it
consists of only a single entry. Otherwise, such “trivial” tables of contents will be elided.</para>
         <para>This
parameter applies only to top-level tables of contents. Nested tables
of contents will be generated even if they consist of only a single
entry.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_generated-id-root"><indexterm><primary>param</primary><secondary>generated-id-root</secondary></indexterm>
   <?db filename="p_generated-id-root"?>
      <refmeta>
         <refentrytitle>$generated-id-root</refentrytitle>
         <refmiscinfo>{}generated-id-root</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$generated-id-root</refname>
         <refpurpose>The string generated as the unique identifier for the root of the tree</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$generated-id-root := 'R'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>When <function>f:generate-id</function> is constructing a unique
identifier for an element, it walks up the ancestors of that element. If it reaches
the root of the tree, it uses <parameter>generated-id-root</parameter><indexterm><primary>param</primary><secondary>generated-id-root</secondary></indexterm> to mark that
location.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_generated-id-sep"><indexterm><primary>param</primary><secondary>generated-id-sep</secondary></indexterm>
   <?db filename="p_generated-id-sep"?>
      <refmeta>
         <refentrytitle>$generated-id-sep</refentrytitle>
         <refmiscinfo>{}generated-id-sep</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$generated-id-sep</refname>
         <refpurpose>The string generated to separate parts of a unique identifier</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$generated-id-sep := '_'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>When <function>f:generate-id</function> is constructing a unique
identifier for an element, it walks up the ancestors of that element.
To make the identifiers easier to read, and to disambiguate values, it
places <parameter>generated-id-sep</parameter><indexterm><primary>param</primary><secondary>generated-id-sep</secondary></indexterm> between each component
that it uses.
</para>
         <note>
            <para>Historically, a “.” was used as the separator. However, if
JavaScript is going to be used to process the HTML documents that the
stylesheet produces, that may be inconvenient. (Because selectors use
“.” to separate element names from class values.)
</para>
         </note>
      </refsection>
   </refentry>
   <refentry xml:id="p_generator-metadata"><indexterm><primary>param</primary><secondary>generator-metadata</secondary></indexterm>
   <?db filename="p_generator-metadata"?>
      <refmeta>
         <refentrytitle>$generator-metadata</refentrytitle>
         <refmiscinfo>{}generator-metadata</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$generator-metadata</refname>
         <refpurpose>Output generator metadata?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$generator-metadata as xs:string := 'true'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If this parameter <glossterm>is true</glossterm>, the
<tag namespace="http://www.w3.org/1999/xhtml">head</tag> element
of each result document will contain a
<tag namespace="http://www.w3.org/1999/xhtml">meta</tag> element
with the name <literal>generator</literal> that identifies the
stylesheet and processor used to produce the result.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_gentext-language"><indexterm><primary>param</primary><secondary>gentext-language</secondary></indexterm>
   <?db filename="p_gentext-language"?>
      <refmeta>
         <refentrytitle>$gentext-language</refentrytitle>
         <refmiscinfo>{}gentext-language</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$gentext-language</refname>
         <refpurpose>Specifies language for generated text</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$gentext-language := ()</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The language used for generated text (words “Chapter”
and “Figure”, for example) usually depends on the language of the (section of)
the document where they appear. If <parameter>gentext-language</parameter><indexterm><primary>param</primary><secondary>gentext-language</secondary></indexterm> is
specified, that language will be used for all generated text, regardless of
the context.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_glossary-collection"><indexterm><primary>param</primary><secondary>glossary-collection</secondary></indexterm>
   <?db filename="p_glossary-collection"?>
      <refmeta>
         <refentrytitle>$glossary-collection</refentrytitle>
         <refmiscinfo>{}glossary-collection</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$glossary-collection</refname>
         <refpurpose>An external collection of glossary entries</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$glossary-collection as xs:string := ''</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>It’s often convenient to share a common glossary
across many documents. If
<parameter>glossary-collection</parameter><indexterm><primary>param</primary><secondary>glossary-collection</secondary></indexterm> points to a
glossary, the stylesheets will automatically populate glossary
entries in the document being transformed.</para>
         <para>To achieve this:</para>
         <orderedlist>
            <listitem>
               <para>Create a shared glossary and store it somewhere. Make sure that
each entry in your shared glossary has a unique <tag class="attribute">xml:id</tag> value.
</para>
            </listitem>
            <listitem>
               <para>Run your
transformation with <parameter>glossary-collection</parameter><indexterm><primary>param</primary><secondary>glossary-collection</secondary></indexterm> set
to the URI of that document.
</para>
            </listitem>
            <listitem>
               <para>In the document you’re transforming, refer to the shared entries
with completely empty <tag>glossentry</tag>
elements that have the same <tag class="attribute">xml:id</tag> as an entry in the
shared glossary.
</para>
            </listitem>
         </orderedlist>
         <para>The stylesheets will copy those entries into your document before processing it.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_glossary-sort-entries"><indexterm><primary>param</primary><secondary>glossary-sort-entries</secondary></indexterm>
   <?db filename="p_glossary-sort-entries"?>
      <refmeta>
         <refentrytitle>$glossary-sort-entries</refentrytitle>
         <refmiscinfo>{}glossary-sort-entries</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$glossary-sort-entries</refname>
         <refpurpose>Sort glossaries?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$glossary-sort-entries := true()</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If <parameter>glossary-sort-entries</parameter><indexterm><primary>param</primary><secondary>glossary-sort-entries</secondary></indexterm> is true, the entries in a
<tag>glossary</tag> or <tag>glosslist</tag> will be sorted before transformation.
This saves the author from the burden of maintaining the list in a strictly
alphabetic order.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_html-extension"><indexterm><primary>param</primary><secondary>html-extension</secondary></indexterm>
   <?db filename="p_html-extension"?>
      <refmeta>
         <refentrytitle>$html-extension</refentrytitle>
         <refmiscinfo>{}html-extension</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$html-extension</refname>
         <refpurpose>The extension used for HTML output when chunking</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$html-extension := '.html'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>When using chunking (see <xref linkend="chunking"/>), the resulting
HTML documents will have this extension by default.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_image-ignore-scaling"><indexterm><primary>param</primary><secondary>image-ignore-scaling</secondary></indexterm>
   <?db filename="p_image-ignore-scaling"?>
      <refmeta>
         <refentrytitle>$image-ignore-scaling</refentrytitle>
         <refmiscinfo>{}image-ignore-scaling</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$image-ignore-scaling</refname>
         <refpurpose>Ignore scaling?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$image-ignore-scaling as xs:boolean := false()</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If this parameter is true, all of the scaling attributes on
images are ignored. Images will be displayed at their intrinsic size.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_image-nominal-height"><indexterm><primary>param</primary><secondary>image-nominal-height</secondary></indexterm>
   <?db filename="p_image-nominal-height"?>
      <refmeta>
         <refentrytitle>$image-nominal-height</refentrytitle>
         <refmiscinfo>{}image-nominal-height</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$image-nominal-height</refname>
         <refpurpose>Nominal height of an image</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$image-nominal-height := '4in'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If the extension functions necessary to determine the intrinsic height
of an image are unavailable, or if the height cannot be determined, this value
will be used as the assumed intrinsic height of the image.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_image-nominal-width"><indexterm><primary>param</primary><secondary>image-nominal-width</secondary></indexterm>
   <?db filename="p_image-nominal-width"?>
      <refmeta>
         <refentrytitle>$image-nominal-width</refentrytitle>
         <refmiscinfo>{}image-nominal-width</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$image-nominal-width</refname>
         <refpurpose>Nominal width of an image</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$image-nominal-width := $nominal-page-width</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If the extension functions necessary to determine the intrinsic width
of an image are unavailable, or if the width cannot be determined, this value
will be used as the assumed intrinsic width of the image.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_image-property-warning"><indexterm><primary>param</primary><secondary>image-property-warning</secondary></indexterm>
   <?db filename="p_image-property-warning"?>
      <refmeta>
         <refentrytitle>$image-property-warning</refentrytitle>
         <refmiscinfo>{}image-property-warning</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$image-property-warning</refname>
         <refpurpose>Warn if image properties cannot be obtained?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$image-property-warning := true()</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>This flag controls whether or not an
<tag namespace="http://www.w3.org/1999/XSL/Transform">xsl:message</tag> is emitted when
the <function>ext:image-properties</function> extension function is unavailable.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_index-on-type"><indexterm><primary>param</primary><secondary>index-on-type</secondary></indexterm><indexterm><primary>param</primary><secondary>index-on-role</secondary></indexterm>
   <?db filename="p_index-on-type"?>
      <refmeta>
         <refentrytitle>$index-on-role, $index-on-type</refentrytitle>
         <refmiscinfo>{}index-on-type</refmiscinfo>
         <refmiscinfo>{}index-on-role</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$index-on-type</refname>
         <refname xml:id="p_index-on-role">$index-on-role</refname>
         <refpurpose>Make distinct indexes based on role and type?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$index-on-type := 'true'</synopsis>
         <synopsis>$index-on-role := 'true'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>DocBook supports the creation of different types of index. A book
that documents an API might have a general index, for example, and also an
index of functions, an index of variables, etc.</para>
         <para>Typed indexes are created by specifying the index type in the
<tag class="attribute">type</tag> or <tag class="attribute">role</tag> attribute. If
<parameter>index-on-type</parameter><indexterm><primary>param</primary><secondary>index-on-type</secondary></indexterm> is true, then separate indexes
will be generated based on <tag class="attribute">type</tag> values. If
<parameter>index-on-role</parameter><indexterm><primary>param</primary><secondary>index-on-role</secondary></indexterm> is true, then separate indexes
will be generated based on <tag class="attribute">role</tag> values.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_index-show-entries"><indexterm><primary>param</primary><secondary>index-show-entries</secondary></indexterm>
   <?db filename="p_index-show-entries"?>
      <refmeta>
         <refentrytitle>$index-show-entries</refentrytitle>
         <refmiscinfo>{}index-show-entries</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$index-show-entries</refname>
         <refpurpose>Make index entries visible in the text?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$index-show-entries := ()</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If this value is non-empty, small markers will be left in the text
where <tag>indexterm</tag> elements appear. This is probably not appropriate for
final publication, but it can be a useful way to review the level of indexing.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_indexed-section-groups"><indexterm><primary>param</primary><secondary>indexed-section-groups</secondary></indexterm>
   <?db filename="p_indexed-section-groups"?>
      <refmeta>
         <refentrytitle>$indexed-section-groups</refentrytitle>
         <refmiscinfo>{}indexed-section-groups</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$indexed-section-groups</refname>
         <refpurpose>Generate index entries grouped by section</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$indexed-section-groups := 'true'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>Before the introduction of this parameter, an automatically generated index
contained only one index entry for any given section.
If the <parameter>indexed-section-groups</parameter><indexterm><primary>param</primary><secondary>indexed-section-groups</secondary></indexterm> parameter
<glossterm>is true</glossterm>, an index entry will be generated for every
<tag>indexterm</tag>, with a
<tag namespace="http://www.w3.org/1999/xhtml">span</tag> surrounding all
of the entries for each section. This results in a more complete index while
still preserving the ability to see in which sections the terms occur.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_lists-of-equations"><indexterm><primary>param</primary><secondary>lists-of-equations</secondary></indexterm>
   <?db filename="p_lists-of-equations"?>
      <refmeta>
         <refentrytitle>$lists-of-equations</refentrytitle>
         <refmiscinfo>{}lists-of-equations</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$lists-of-equations</refname>
         <refpurpose>Generate a list of equations?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$lists-of-equations as xs:string := 'false'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If true, a list of equations will be generated. By default, they are only
generated for <tag>book</tag>s and <tag>set</tag>s.</para>
         <para>This is a pseudo-boolean parameter. It is considered true if it
has the value '1’, ‘yes’, or ‘true’. Any other value is considered false.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_lists-of-examples"><indexterm><primary>param</primary><secondary>lists-of-examples</secondary></indexterm>
   <?db filename="p_lists-of-examples"?>
      <refmeta>
         <refentrytitle>$lists-of-examples</refentrytitle>
         <refmiscinfo>{}lists-of-examples</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$lists-of-examples</refname>
         <refpurpose>Generate a list of examples?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$lists-of-examples as xs:string := 'true'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If true, a list of examples will be generated. By default, they are only
generated for <tag>book</tag>s and <tag>set</tag>s.</para>
         <para>This is a pseudo-boolean parameter. It is considered true if it
has the value '1’, ‘yes’, or ‘true’. Any other value is considered false.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_lists-of-figures"><indexterm><primary>param</primary><secondary>lists-of-figures</secondary></indexterm>
   <?db filename="p_lists-of-figures"?>
      <refmeta>
         <refentrytitle>$lists-of-figures</refentrytitle>
         <refmiscinfo>{}lists-of-figures</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$lists-of-figures</refname>
         <refpurpose>Generate a list of figures?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$lists-of-figures as xs:string := 'true'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If true, a list of figures will be generated. By default, they are only
generated for <tag>book</tag>s and <tag>set</tag>s.</para>
         <para>This is a pseudo-boolean parameter. It is considered true if it
has the value '1’, ‘yes’, or ‘true’. Any other value is considered false.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_lists-of-procedures"><indexterm><primary>param</primary><secondary>lists-of-procedures</secondary></indexterm>
   <?db filename="p_lists-of-procedures"?>
      <refmeta>
         <refentrytitle>$lists-of-procedures</refentrytitle>
         <refmiscinfo>{}lists-of-procedures</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$lists-of-procedures</refname>
         <refpurpose>Generate a list of figures?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$lists-of-procedures as xs:string := 'false'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If true, a list of procedures will be generated. By default, they are only
generated for <tag>book</tag>s and <tag>set</tag>s.</para>
         <para>This is a pseudo-boolean parameter. It is considered true if it
has the value '1’, ‘yes’, or ‘true’. Any other value is considered false.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_lists-of-tables"><indexterm><primary>param</primary><secondary>lists-of-tables</secondary></indexterm>
   <?db filename="p_lists-of-tables"?>
      <refmeta>
         <refentrytitle>$lists-of-tables</refentrytitle>
         <refmiscinfo>{}lists-of-tables</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$lists-of-tables</refname>
         <refpurpose>Generate a list of tables?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$lists-of-tables as xs:string := 'true'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If true, a list of tables will be generated. By default, they are only
generated for <tag>book</tag>s and <tag>set</tag>s.</para>
         <para>This is a pseudo-boolean parameter. It is considered true if it
has the value '1’, ‘yes’, or ‘true’. Any other value is considered false.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_local-conventions"><indexterm><primary>param</primary><secondary>local-conventions</secondary></indexterm>
   <?db filename="p_local-conventions"?>
      <refmeta>
         <refentrytitle>$local-conventions</refentrytitle>
         <refmiscinfo>{}local-conventions</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$local-conventions</refname>
         <refpurpose>Transformation for local conventions</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$local-conventions as xs:string? := ()</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>This parameter allows you to specify a tranformation for local
markup conventions. This book uses several non-DocBook tagging
conventions as a typing convenience,
<code>&lt;att&gt;</code> for <code>&lt;tag class="attribute"&gt;</code>,
for example. These can be translated back into proper DocBook markup
by the <parameter>local-conventions</parameter><indexterm><primary>param</primary><secondary>local-conventions</secondary></indexterm> stylesheet. This
stylesheet is run during the <varname>v:standard-transforms</varname><indexterm><primary>variable</primary><secondary>v:standard-transforms</secondary></indexterm>,
just before validation
(see <parameter>relax-ng-grammar</parameter><indexterm><primary>param</primary><secondary>relax-ng-grammar</secondary></indexterm>).</para>
         <para>The example stylesheet from the test suite looks like this:</para>
         <programlisting language="xml" linenumbering="unnumbered">
            &lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns="http://docbook.org/ns/docbook"
                xmlns:db="http://docbook.org/ns/docbook"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                exclude-result-prefixes="db xs"
                version="3.0"&gt;

&lt;xsl:template match="db:att"&gt;
  &lt;tag class="attribute"&gt;
    &lt;xsl:copy-of select="@* except @class"/&gt;
    &lt;xsl:apply-templates/&gt;
  &lt;/tag&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="db:mode"&gt;
  &lt;code role="{string-join(
                distinct-values((@role/string(), 'mode')),
                ' ')}"&gt;
    &lt;xsl:copy-of select="@* except @role"/&gt;
    &lt;xsl:apply-templates/&gt;
  &lt;/code&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="element()"&gt;
  &lt;xsl:copy&gt;
    &lt;xsl:apply-templates select="@*,node()"/&gt;
  &lt;/xsl:copy&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="attribute()|text()|comment()
                     |processing-instruction()"&gt;
  &lt;xsl:copy/&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;

         </programlisting>
         <para>It transforms pseudo-DocBook elements “<code>att</code>” and
“<code>mode</code>” into valid DocBook markup.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_mathml-js"><indexterm><primary>param</primary><secondary>mathml-js</secondary></indexterm>
   <?db filename="p_mathml-js"?>
      <refmeta>
         <refentrytitle>$mathml-js</refentrytitle>
         <refmiscinfo>{}mathml-js</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$mathml-js</refname>
         <refpurpose>JavaScript library supporting MathML</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$mathml-js := 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=MML_CHTML'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If your documents use MathML, this library will be included to support
MathML rendering. <biblioref linkend="MathJax"/> is a popular choice.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_mediaobject-accessibility"><indexterm><primary>param</primary><secondary>mediaobject-accessibility</secondary></indexterm>
   <?db filename="p_mediaobject-accessibility"?>
      <refmeta>
         <refentrytitle>$mediaobject-accessibility</refentrytitle>
         <refmiscinfo>{}mediaobject-accessibility</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$mediaobject-accessibility</refname>
         <refpurpose>Accessibility settings for media objects</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$mediaobject-accessibility as xs:string* := ('summary', 'details')</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The <varname>mediaobject-accessibility</varname><indexterm><primary>variable</primary><secondary>mediaobject-accessibility</secondary></indexterm> parameter
determines how accessibility features are added to media objects
(image, video, and audio elements).</para>
         <para>The value of this parameter is a list of strings. If the list
contains:</para>
         <variablelist>
            <varlistentry>
               <term>summary</term>
               <listitem>
                  <para>A <tag class="attribute">summary</tag> attribute will be added if there is an
<tag>alt</tag> element or a <tag>textobject</tag> containing a single
<tag>phrase</tag> is available.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>details</term>
               <listitem>
                  <para>A <tag>details</tag> element will be added to the <tag>div</tag>
that surrounds the image if there is
a <tag>textobject</tag> containing anything other than a single
<tag>phrase</tag> available.</para>
               </listitem>
            </varlistentry>
         </variablelist>
         <para>The list may contain either or both values. If other values are present,
they are ignored.</para>
         <para>See <xref linkend="ex-mediaobject-accessibility"/>.</para>
         <example xml:id="ex-mediaobject-accessibility">
            <title>An example of media object accessibility</title>
            <programlisting language="xml" linenumbering="unnumbered">
&lt;mediaobject&gt;
   &lt;alt&gt;This is a skeuomorphic “postage stamp” with the
DocBook logo.&lt;/alt&gt;
   &lt;imageobject&gt;
      &lt;imagedata fileref="media/stamp400x256.png"/&gt;
   &lt;/imageobject&gt;
   &lt;textobject&gt;
      &lt;para&gt;This is a skeuomorphic image of a “postage
stamp.” Centrally, it features the DocBook wood
duck logo. the word “DocBook” appears on the left
hand side, rotated 90° counter-clockwise. The
DocBook tag line, “The Source for Documentation”
is printed in the upper-right corner.
&lt;/para&gt;
   &lt;/textobject&gt;
&lt;/mediaobject&gt;
</programlisting>
         </example>
         <para>One possible rendering of such an example:</para>
         <!-- Note: the fileref in the image below is correct
relative to the location where the transformed
sources will ultimately be formatted. -->
         <informalfigure xml:id="fig-mediaobject-accessibility">
            <mediaobject>
               <alt>This is a skeuomorphic “postage stamp” with the
DocBook logo.</alt>
               <imageobject>
                  <imagedata fileref="media/stamp400x256.png"/>
               </imageobject>
               <textobject>
                  <para>This is a skeuomorphic image of a “postage
stamp.” Centrally, it features the DocBook wood
duck logo. the word “DocBook” appears on the left
hand side, rotated 90° counter-clockwise. The
DocBook tag line, “The Source for Documentation”
is printed in the upper-right corner.
</para>
               </textobject>
            </mediaobject>
         </informalfigure>
         <para>Inspection of the HTML will reveal that the <tag class="attribute">summary</tag> attribute
is present on the <tag>div</tag> that wraps the figure and a
<tag>details</tag> element precedes the image. These may or may not be
rendered by your user agent depending on its accessibility features and
settings.</para>
         <para>See also <varname>table-accessibility</varname><indexterm><primary>variable</primary><secondary>table-accessibility</secondary></indexterm>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_mediaobject-exclude-extensions"><indexterm><primary>param</primary><secondary>mediaobject-exclude-extensions</secondary></indexterm>
   <?db filename="p_mediaobject-exclude-extensions"?>
      <refmeta>
         <refentrytitle>$mediaobject-exclude-extensions</refentrytitle>
         <refmiscinfo>{}mediaobject-exclude-extensions</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$mediaobject-exclude-extensions</refname>
         <refpurpose>Exclude media objects by extension</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$mediaobject-exclude-extensions as xs:string := ".eps .ps .pdf"</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The <tag>mediaobject</tag> element (and <tag>inlinemediaobject</tag>)
can contain several, alternative objects. The
<parameter>mediaobject-exclude-extensions</parameter><indexterm><primary>param</primary><secondary>mediaobject-exclude-extensions</secondary></indexterm> parameter provides
a way to exclude some of them.
</para>
         <para>One common use case is to provide two versions of each image,
one as a bitmap, perhaps a
<link xlink:href="https://en.wikipedia.org/wiki/Portable_Network_Graphics">PNG</link>
            <indexterm>
               <primary>PNG image</primary>
            </indexterm>,
and another as a vector, perhaps an
<link xlink:href="https://en.wikipedia.org/wiki/Encapsulated_PostScript">EPS</link>
            <indexterm>
               <primary>EPS image</primary>
            </indexterm>. Then
<parameter>mediaobject-exclude-extensions</parameter><indexterm><primary>param</primary><secondary>mediaobject-exclude-extensions</secondary></indexterm> can be used to exclude
“.eps” images from the web format and “.png” images from the print (or paged media)
format.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_mediaobject-input-base-uri"><indexterm><primary>param</primary><secondary>mediaobject-input-base-uri</secondary></indexterm>
   <?db filename="p_mediaobject-input-base-uri"?>
      <refmeta>
         <refentrytitle>$mediaobject-input-base-uri</refentrytitle>
         <refmiscinfo>{}mediaobject-input-base-uri</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$mediaobject-input-base-uri</refname>
         <refpurpose>Base URI of images and other media in the XML sources</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis linenumbering="unnumbered">&lt;xsl:param
            name="mediaobject-input-base-uri"
            as="xs:string"&gt;
   &lt;xsl:sequence use-when="function-available('ext:cwd')"
                  select="resolve-uri(ext:cwd(), static-base-uri())"/&gt;
   &lt;xsl:sequence use-when="not(function-available('ext:cwd'))" select="''"/&gt;
&lt;/xsl:param&gt;</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>Computing the correct URI for media objects (images, videos,
audio files, etc.) is complicated. See <xref linkend="mediaobject-uris"/>.
The <parameter>mediaobject-input-base-uri</parameter><indexterm><primary>param</primary><secondary>mediaobject-input-base-uri</secondary></indexterm> is used to compute
the absolute base URI of input media objects.
</para>
         <para>If the “cwd” <link linkend="extensions">extension function</link> is
available, then the default value of this parameter is the current working
directory. Otherwise, the default value is the empty string.</para>
         <para>The current working directory is only likely to be a useful value for
this parameter if you are running the processor in the same directory where
your XML source files are stored.
See <varname>v:mediaobject-input-base-uri</varname><indexterm><primary>variable</primary><secondary>v:mediaobject-input-base-uri</secondary></indexterm>.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_mediaobject-output-base-uri"><indexterm><primary>param</primary><secondary>mediaobject-output-base-uri</secondary></indexterm>
   <?db filename="p_mediaobject-output-base-uri"?>
      <refmeta>
         <refentrytitle>$mediaobject-output-base-uri</refentrytitle>
         <refmiscinfo>{}mediaobject-output-base-uri</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$mediaobject-output-base-uri</refname>
         <refpurpose>Base URI of images and other media in the output</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$mediaobject-output-base-uri as xs:string := ''</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>Computing the correct URI for media objects (images, videos,
audio files, etc.) is complicated. See <xref linkend="mediaobject-uris"/>.
The <parameter>mediaobject-output-base-uri</parameter><indexterm><primary>param</primary><secondary>mediaobject-output-base-uri</secondary></indexterm> is used to compute
the base URI of media objects in the output.
</para>
         <para>It defaults to the empty string.
See <varname>v:mediaobject-output-base-uri</varname><indexterm><primary>variable</primary><secondary>v:mediaobject-output-base-uri</secondary></indexterm>.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_mediaobject-video-element"><indexterm><primary>param</primary><secondary>mediaobject-video-element</secondary></indexterm>
   <?db filename="p_mediaobject-video-element"?>
      <refmeta>
         <refentrytitle>$mediaobject-video-element</refentrytitle>
         <refmiscinfo>{}mediaobject-video-element</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$mediaobject-video-element</refname>
         <refpurpose>Use the video element?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$mediaobject-video-element as xs:string := 'video'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>This element identifies the element to use for video content.
The default starting in version 1.11.0 is
<tag namespace="http://www.w3.org/1999/xhtml">video</tag> where it
had previously been 
<tag namespace="http://www.w3.org/1999/xhtml">iframe</tag>.</para>
         <para>Video is a bit complicated, the 
<tag namespace="http://www.w3.org/1999/xhtml">video</tag> element works best
for local video sources but won’t work for embedding content from other sites.
If all of your content is embedded, specifying
<tag namespace="http://www.w3.org/1999/xhtml">iframe</tag> here will
be simplest.</para>
         <para>If you need a mixture, of styles, it can be specified on a per-video
basis with the
<literal>db</literal>
            <indexterm>
               <primary>db processing instruction</primary>
            </indexterm> processing instruction using the
<literal>video</literal>
            <indexterm>
               <primary>db processing instruction</primary>
               <secondary>video pseudo-attribute</secondary>
            </indexterm> pseudo-attribute.
</para>
         <note>
            <para>The only supported values are <literal>iframe</literal> and
<literal>video</literal>; you cannot use this parameter or the processing
instruction to insert arbitrary element names.</para>
         </note>
      </refsection>
   </refentry>
   <refentry xml:id="p_nominal-page-width"><indexterm><primary>param</primary><secondary>nominal-page-width</secondary></indexterm>
   <?db filename="p_nominal-page-width"?>
      <refmeta>
         <refentrytitle>$nominal-page-width</refentrytitle>
         <refmiscinfo>{}nominal-page-width</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$nominal-page-width</refname>
         <refpurpose>The nominal page width</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$nominal-page-width := '6in'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>To calculate the width of the columns in some complex CALS
tables, the stylesheets need to know the page width. The
<parameter>nominal-page-width</parameter><indexterm><primary>param</primary><secondary>nominal-page-width</secondary></indexterm> is used for this
value.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_number-single-appendix"><indexterm><primary>param</primary><secondary>number-single-appendix</secondary></indexterm>
   <?db filename="p_number-single-appendix"?>
      <refmeta>
         <refentrytitle>$number-single-appendix</refentrytitle>
         <refmiscinfo>{}number-single-appendix</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$number-single-appendix</refname>
         <refpurpose>Number a single appendix?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$number-single-appendix := 'true'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If a book (or other element) has several appendixes, they will
be numbered, usually “A”, “B”, “C”, etc. If there is only a single appendix,
it will be numbered if <parameter>number-single-appendix</parameter><indexterm><primary>param</primary><secondary>number-single-appendix</secondary></indexterm>
            <glossterm>is true</glossterm>. Otherwise, it will be unnumbered.</para>
         <para>This can be used to create the numbered title “Appendix” for a
single appendix.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_olink-databases"><indexterm><primary>param</primary><secondary>olink-databases</secondary></indexterm>
   <?db filename="p_olink-databases"?>
      <refmeta>
         <refentrytitle>$olink-databases</refentrytitle>
         <refmiscinfo>{}olink-databases</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$olink-databases</refname>
         <refpurpose>External olink databases</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$olink-databases as xs:string := ''</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The <parameter>olink-databases</parameter><indexterm><primary>param</primary><secondary>olink-databases</secondary></indexterm> parameter is a comma separated
list of URIs. Each URI should contain an <tag>olink</tag> target database.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_orderedlist-item-numeration"><indexterm><primary>param</primary><secondary>orderedlist-item-numeration</secondary></indexterm>
   <?db filename="p_orderedlist-item-numeration"?>
      <refmeta>
         <refentrytitle>$orderedlist-item-numeration</refentrytitle>
         <refmiscinfo>{}orderedlist-item-numeration</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$orderedlist-item-numeration</refname>
         <refpurpose>Numeration for nested ordered lists</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$orderedlist-item-numeration := '1aiAI'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The <parameter>orderedlist-item-numeration</parameter><indexterm><primary>param</primary><secondary>orderedlist-item-numeration</secondary></indexterm> parameter
controls the numeration style of nested <tag>orderedlist</tag> elements.
Items in the top-level list will use the numeration style of the first character
in <parameter>orderedlist-item-numeration</parameter><indexterm><primary>param</primary><secondary>orderedlist-item-numeration</secondary></indexterm>, items in the second-level
list will use the numeration style of the second character in the string, etc.
If the list depth exceeds the number of characters in
the <parameter>orderedlist-item-numeration</parameter><indexterm><primary>param</primary><secondary>orderedlist-item-numeration</secondary></indexterm>, selection “wraps back around”
to the first character.</para>
         <para>In other words, if the string is “1ai”:
list items at the first, fourth, seventh, tenth, etc. depth will have arabic numeration.
List items at the second, fifth, eight, eleventh, etc. depth will have lowercase alpha
numeration, etc.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_othername-in-middle"><indexterm><primary>param</primary><secondary>othername-in-middle</secondary></indexterm>
   <?db filename="p_othername-in-middle"?>
      <refmeta>
         <refentrytitle>$othername-in-middle</refentrytitle>
         <refmiscinfo>{}othername-in-middle</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$othername-in-middle</refname>
         <refpurpose>Treat othername as a middle name</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$othername-in-middle := 'true'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If <parameter>othername-in-middle</parameter><indexterm><primary>param</primary><secondary>othername-in-middle</secondary></indexterm> is true, then
the first <tag>othername</tag> in a <tag>personname</tag> will be presented
as the person’s “middle” name. See <code role="template">t:person-name</code>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_output-media"><indexterm><primary>param</primary><secondary>output-media</secondary></indexterm>
   <?db filename="p_output-media"?>
      <refmeta>
         <refentrytitle>$output-media</refentrytitle>
         <refmiscinfo>{}output-media</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$output-media</refname>
         <refpurpose>The intended output media</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$output-media := 'screen'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The <parameter>output-media</parameter><indexterm><primary>param</primary><secondary>output-media</secondary></indexterm> parameter
identifies the intended output medium, <literal>screen</literal> or
<literal>print</literal>. It can be used to make conditional
transformations.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_oxy-markup"><indexterm><primary>param</primary><secondary>oxy-markup</secondary></indexterm>
   <?db filename="p_oxy-markup"?>
      <refmeta>
         <refentrytitle>$oxy-markup</refentrytitle>
         <refmiscinfo>{}oxy-markup</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$oxy-markup</refname>
         <refpurpose>Is Oxygen change tracking markup rendered?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$oxy-markup := 'false'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If <parameter>oxy-markup</parameter><indexterm><primary>param</primary><secondary>oxy-markup</secondary></indexterm> is true, then
the change tracking processing instructions that Oxygen inserts into
the document will be transformed into elements marked with CSS classes
for rendering in the output.
</para>
         <para>Rendering Oxygen change markup can be specified on a document-by-document
basis with a <literal>db</literal>
            <indexterm>
               <primary>db processing
instruction</primary>
            </indexterm> processing instruction.
If the <literal>oxy-markup</literal>
            <indexterm>
               <primary>db processing instruction</primary>
               <secondary>oxy-markup pseudo-attribute</secondary>
            </indexterm>
pseudo-attribute <glossterm>is true</glossterm>, the markup will be rendered.
This processing instruction must be in the <tag>info</tag> element of the document
element.</para>
      </refsection>
   </refentry>
   <!--
<refentry>
  <refmeta>
    <fieldsynopsis>
      <varname>oxy-markup-css</varname>
      <initializer>'css/oxy-markup.css'</initializer>
    </fieldsynopsis>
  </refmeta>
  <refnamediv>
    <refpurpose>CSS markup for Oxygen changebar markup</refpurpose>
  </refnamediv>
<refsection>
<title>Description</title>
<para>If Oxygen change markup is rendered, this CSS file is added to the output
for styling the added and deleted regions.</para>
</refsection>
</refentry>
-->
   <refentry xml:id="p_page-style"><indexterm><primary>param</primary><secondary>page-style</secondary></indexterm>
   <?db filename="p_page-style"?>
      <refmeta>
         <refentrytitle>$page-style</refentrytitle>
         <refmiscinfo>{}page-style</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$page-style</refname>
         <refpurpose>Select the page style</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$page-style as xs:string := 'article'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>This value selects the page style. The page style is reflected
in the <tag class="attribute">class</tag> attribute on the root
<tag namespace="http://www.w3.org/1999/xhtml">html</tag> element.
It is then used by the CSS stylesheets.
A page style of “<literal>value</literal>” will be added to
the class attribute as “<literal>value-style</literal>”.</para>
         <para>The CSS print stylesheets support two styles:
<literal>article</literal> and <literal>book</literal>. The book style
places new components on a right-hand page and adjusts the inner margin
for binding.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_paper-size"><indexterm><primary>param</primary><secondary>paper-size</secondary></indexterm>
   <?db filename="p_paper-size"?>
      <refmeta>
         <refentrytitle>$paper-size</refentrytitle>
         <refmiscinfo>{}paper-size</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$paper-size</refname>
         <refpurpose>Select the paper style</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$paper-size as xs:string? := ()</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>This value selects the paper size. The paper size is reflected
in the <tag class="attribute">class</tag> attribute on the root
<tag namespace="http://www.w3.org/1999/xhtml">html</tag> element.
It is then used by the CSS stylesheets.</para>
         <para>The CSS print stylesheets support three page sizes:
<literal>A4</literal>, <literal>A5</literal>, and (US)
<literal>Letter</literal>. Additional sizes can be implemented
in CSS.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_persistent-toc"><indexterm><primary>param</primary><secondary>persistent-toc</secondary></indexterm>
   <?db filename="p_persistent-toc"?>
      <refmeta>
         <refentrytitle>$persistent-toc</refentrytitle>
         <refmiscinfo>{}persistent-toc</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$persistent-toc</refname>
         <refpurpose>Generate a persistent Table of Contents?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$persistent-toc := 'false'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If this value <glossterm>is true</glossterm>, then a copy of the
Table of Contents (ToC) will be added to every file produced. This
Table of Contents is read by JavaScript when displayed in the browser
and provides a “popup” ToC on every page.
</para>
         <note>
            <para>The Table of Contents is secreted away in a <tag namespace="http://www.w3.org/1999/xhtml">script</tag> element so that
it will be ignored by screen readers and other user agents that don’t
support JavaScript or CSS.
</para>
         </note>
         <para>The persistent ToC popup is transient by default, meaning that
it will disappear if you use it to navigate to a different page. If
you open the popup by “shift-clicking” on it, the ToC will persist
until you dismiss it.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_persistent-toc-css"><indexterm><primary>param</primary><secondary>persistent-toc-css</secondary></indexterm>
   <?db filename="p_persistent-toc-css"?>
      <refmeta>
         <refentrytitle>$persistent-toc-css</refentrytitle>
         <refmiscinfo>{}persistent-toc-css</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$persistent-toc-css</refname>
         <refpurpose>Persistent ToC CSS</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$persistent-toc-css := 'css/docbook-toc.css'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If the persistent ToC popup is enabled, a link to this
CSS file will be added to the HTML HEAD.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_persistent-toc-js"><indexterm><primary>param</primary><secondary>persistent-toc-js</secondary></indexterm>
   <?db filename="p_persistent-toc-js"?>
      <refmeta>
         <refentrytitle>$persistent-toc-js</refentrytitle>
         <refmiscinfo>{}persistent-toc-js</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$persistent-toc-js</refname>
         <refpurpose>Script to support the persistent ToC</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$persistent-toc-js := 'js/persistent-toc.js'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If the persistent ToC is enabled, a link to this script will be
added to the document. This script must contain the JavaScript
necessary to support the persistent ToC feature.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_persistent-toc-search"><indexterm><primary>param</primary><secondary>persistent-toc-search</secondary></indexterm>
   <?db filename="p_persistent-toc-search"?>
      <refmeta>
         <refentrytitle>$persistent-toc-search</refentrytitle>
         <refmiscinfo>{}persistent-toc-search</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$persistent-toc-search</refname>
         <refpurpose>Generate a search box in the persistent ToC</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$persistent-toc-search := 'true'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If this value <glossterm>is true</glossterm>, then a search box
is added to the top of the persistent Table of Contents (ToC).
Any string typed into this search box will be used to filter the entries
shown below it.
</para>
         <para>The filter is a case-insensitive regular expression match against the text of
each line in the ToC where arbitrary characters may occur anywhere in the string.
In other words, the text “cat” will generate the regular expression “c.*a.*t.*” for
the purpose of searching.</para>
         <para>This setting has no effect if <parameter>persistent-toc</parameter><indexterm><primary>param</primary><secondary>persistent-toc</secondary></indexterm> is
false.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_pixels-per-inch"><indexterm><primary>param</primary><secondary>pixels-per-inch</secondary></indexterm>
   <?db filename="p_pixels-per-inch"?>
      <refmeta>
         <refentrytitle>$pixels-per-inch</refentrytitle>
         <refmiscinfo>{}pixels-per-inch</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$pixels-per-inch</refname>
         <refpurpose>The number of pixels per inch</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$pixels-per-inch := 96.0</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If the stylesheets need to convert between absolute and
relative units (see <xref linkend="units"/>), this value is used
to convert lengths into pixels. If <parameter>pixels-per-inch</parameter><indexterm><primary>param</primary><secondary>pixels-per-inch</secondary></indexterm> has
the value 96, then 25% of a 6in width is 144px.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_procedure-step-numeration"><indexterm><primary>param</primary><secondary>procedure-step-numeration</secondary></indexterm>
   <?db filename="p_procedure-step-numeration"?>
      <refmeta>
         <refentrytitle>$procedure-step-numeration</refentrytitle>
         <refmiscinfo>{}procedure-step-numeration</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$procedure-step-numeration</refname>
         <refpurpose>Numeration for nested procedure steps</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$procedure-step-numeration := '1aiAI'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The <parameter>procedure-step-numeration</parameter><indexterm><primary>param</primary><secondary>procedure-step-numeration</secondary></indexterm> parameter
controls the numeration style of nested steps and substeps in a <tag>procedure</tag>.
Steps at the top level will use the numeration style of the first character
in <parameter>procedure-step-numeration</parameter><indexterm><primary>param</primary><secondary>procedure-step-numeration</secondary></indexterm>, substeps at the second-level
will use the numeration style of the second character in the string, etc.
If the step depth exceeds the number of characters in
the <parameter>procedure-step-numeration</parameter><indexterm><primary>param</primary><secondary>procedure-step-numeration</secondary></indexterm>, selection “wraps back around”
to the first character.</para>
         <para>In other words, if the string is “1ai”:
steps at the first, fourth, seventh, tenth, etc. depth will have arabic numeration.
Steps at the second, fifth, eight, eleventh, etc. depth will have lowercase alpha
numeration, etc.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_productionset-lhs-rhs-separator"><indexterm><primary>param</primary><secondary>productionset-lhs-rhs-separator</secondary></indexterm>
   <?db filename="p_productionset-lhs-rhs-separator"?>
      <refmeta>
         <refentrytitle>$productionset-lhs-rhs-separator</refentrytitle>
         <refmiscinfo>{}productionset-lhs-rhs-separator</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$productionset-lhs-rhs-separator</refname>
         <refpurpose>Separator in productions</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$productionset-lhs-rhs-separator := ':='</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>A <tag>productionset</tag> consists of non-terminals on the
“left hand side” (LHS) and the productions that they expand to on the
“right hand side” (RHS). When formatted, this string will be used as
the separator between the left- and right-hand sides.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_profile-arch"><indexterm><primary>param</primary><secondary>profile-arch</secondary></indexterm>
   <?db filename="p_profile-arch"?>
      <refmeta>
         <refentrytitle>$profile-arch</refentrytitle>
         <refmiscinfo>{}profile-arch</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$profile-arch</refname>
         <refpurpose>Profile tokens for “arch”</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$profile-arch := ''</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The tokens (separated by <parameter>profile-separator</parameter><indexterm><primary>param</primary><secondary>profile-separator</secondary></indexterm>)
specified for <parameter>profile-arch</parameter><indexterm><primary>param</primary><secondary>profile-arch</secondary></indexterm> are matched against
the values in the <tag class="attribute">arch</tag> attribute. See <xref linkend="profiling"/>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_profile-audience"><indexterm><primary>param</primary><secondary>profile-audience</secondary></indexterm>
   <?db filename="p_profile-audience"?>
      <refmeta>
         <refentrytitle>$profile-audience</refentrytitle>
         <refmiscinfo>{}profile-audience</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$profile-audience</refname>
         <refpurpose>Profile tokens for “audience”</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$profile-audience := ''</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The tokens (separated by <parameter>profile-separator</parameter><indexterm><primary>param</primary><secondary>profile-separator</secondary></indexterm>)
specified for <parameter>profile-audience</parameter><indexterm><primary>param</primary><secondary>profile-audience</secondary></indexterm> are matched against
the values in the <tag class="attribute">audience</tag> attribute. See <xref linkend="profiling"/>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_profile-condition"><indexterm><primary>param</primary><secondary>profile-condition</secondary></indexterm>
   <?db filename="p_profile-condition"?>
      <refmeta>
         <refentrytitle>$profile-condition</refentrytitle>
         <refmiscinfo>{}profile-condition</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$profile-condition</refname>
         <refpurpose>Profile tokens for “condition”</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$profile-condition := ''</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The tokens (separated by <parameter>profile-separator</parameter><indexterm><primary>param</primary><secondary>profile-separator</secondary></indexterm>)
specified for <parameter>profile-condition</parameter><indexterm><primary>param</primary><secondary>profile-condition</secondary></indexterm> are matched against
the values in the <tag class="attribute">condition</tag> attribute. See <xref linkend="profiling"/>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_profile-conformance"><indexterm><primary>param</primary><secondary>profile-conformance</secondary></indexterm>
   <?db filename="p_profile-conformance"?>
      <refmeta>
         <refentrytitle>$profile-conformance</refentrytitle>
         <refmiscinfo>{}profile-conformance</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$profile-conformance</refname>
         <refpurpose>Profile tokens for “conformance”</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$profile-conformance := ''</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The tokens (separated by <parameter>profile-separator</parameter><indexterm><primary>param</primary><secondary>profile-separator</secondary></indexterm>)
specified for <parameter>profile-conformance</parameter><indexterm><primary>param</primary><secondary>profile-conformance</secondary></indexterm> are matched against
the values in the <tag class="attribute">conformance</tag> attribute. See <xref linkend="profiling"/>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_profile-lang"><indexterm><primary>param</primary><secondary>profile-lang</secondary></indexterm>
   <?db filename="p_profile-lang"?>
      <refmeta>
         <refentrytitle>$profile-lang</refentrytitle>
         <refmiscinfo>{}profile-lang</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$profile-lang</refname>
         <refpurpose>Profile tokens for “xml:lang”</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$profile-lang := ''</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The tokens (separated by <parameter>profile-separator</parameter><indexterm><primary>param</primary><secondary>profile-separator</secondary></indexterm>)
specified for <parameter>profile-lang</parameter><indexterm><primary>param</primary><secondary>profile-lang</secondary></indexterm> are matched against
the values in the <tag class="attribute">xml:lang</tag> attribute. See <xref linkend="profiling"/>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_profile-os"><indexterm><primary>param</primary><secondary>profile-os</secondary></indexterm>
   <?db filename="p_profile-os"?>
      <refmeta>
         <refentrytitle>$profile-os</refentrytitle>
         <refmiscinfo>{}profile-os</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$profile-os</refname>
         <refpurpose>Profile tokens for “os”</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$profile-os := ''</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The tokens (separated by <parameter>profile-separator</parameter><indexterm><primary>param</primary><secondary>profile-separator</secondary></indexterm>)
specified for <parameter>profile-os</parameter><indexterm><primary>param</primary><secondary>profile-os</secondary></indexterm> are matched against
the values in the <tag class="attribute">os</tag> attribute. See <xref linkend="profiling"/>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_profile-outputformat"><indexterm><primary>param</primary><secondary>profile-outputformat</secondary></indexterm>
   <?db filename="p_profile-outputformat"?>
      <refmeta>
         <refentrytitle>$profile-outputformat</refentrytitle>
         <refmiscinfo>{}profile-outputformat</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$profile-outputformat</refname>
         <refpurpose>Profile tokens for “outputformat”</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$profile-outputformat := ''</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The tokens (separated by <parameter>profile-separator</parameter><indexterm><primary>param</primary><secondary>profile-separator</secondary></indexterm>)
specified for <parameter>profile-outputformat</parameter><indexterm><primary>param</primary><secondary>profile-outputformat</secondary></indexterm> are matched against
the values in the <tag class="attribute">outputformat</tag> attribute. See <xref linkend="profiling"/>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_profile-revision"><indexterm><primary>param</primary><secondary>profile-revision</secondary></indexterm>
   <?db filename="p_profile-revision"?>
      <refmeta>
         <refentrytitle>$profile-revision</refentrytitle>
         <refmiscinfo>{}profile-revision</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$profile-revision</refname>
         <refpurpose>Profile tokens for “revision”</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$profile-revision := ''</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The tokens (separated by <parameter>profile-separator</parameter><indexterm><primary>param</primary><secondary>profile-separator</secondary></indexterm>)
specified for <parameter>profile-revision</parameter><indexterm><primary>param</primary><secondary>profile-revision</secondary></indexterm> are matched against
the values in the <tag class="attribute">revision</tag> attribute. See <xref linkend="profiling"/>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_profile-revisionflag"><indexterm><primary>param</primary><secondary>profile-revisionflag</secondary></indexterm>
   <?db filename="p_profile-revisionflag"?>
      <refmeta>
         <refentrytitle>$profile-revisionflag</refentrytitle>
         <refmiscinfo>{}profile-revisionflag</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$profile-revisionflag</refname>
         <refpurpose>Profile tokens for “revisionflag”</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$profile-revisionflag := ''</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The tokens (separated by <parameter>profile-separator</parameter><indexterm><primary>param</primary><secondary>profile-separator</secondary></indexterm>)
specified for <parameter>profile-revisionflag</parameter><indexterm><primary>param</primary><secondary>profile-revisionflag</secondary></indexterm> are matched against
the values in the <tag class="attribute">revisionflag</tag> attribute. See <xref linkend="profiling"/>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_profile-role"><indexterm><primary>param</primary><secondary>profile-role</secondary></indexterm>
   <?db filename="p_profile-role"?>
      <refmeta>
         <refentrytitle>$profile-role</refentrytitle>
         <refmiscinfo>{}profile-role</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$profile-role</refname>
         <refpurpose>Profile tokens for “role”</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$profile-role := ''</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The tokens (separated by <parameter>profile-separator</parameter><indexterm><primary>param</primary><secondary>profile-separator</secondary></indexterm>)
specified for <parameter>profile-role</parameter><indexterm><primary>param</primary><secondary>profile-role</secondary></indexterm> are matched against
the values in the <tag class="attribute">role</tag> attribute. See <xref linkend="profiling"/>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_profile-security"><indexterm><primary>param</primary><secondary>profile-security</secondary></indexterm>
   <?db filename="p_profile-security"?>
      <refmeta>
         <refentrytitle>$profile-security</refentrytitle>
         <refmiscinfo>{}profile-security</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$profile-security</refname>
         <refpurpose>Profile tokens for “security”</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$profile-security := ''</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The tokens (separated by <parameter>profile-separator</parameter><indexterm><primary>param</primary><secondary>profile-separator</secondary></indexterm>)
specified for <parameter>profile-security</parameter><indexterm><primary>param</primary><secondary>profile-security</secondary></indexterm> are matched against
the values in the <tag class="attribute">security</tag> attribute. See <xref linkend="profiling"/>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_profile-separator"><indexterm><primary>param</primary><secondary>profile-separator</secondary></indexterm>
   <?db filename="p_profile-separator"?>
      <refmeta>
         <refentrytitle>$profile-separator</refentrytitle>
         <refmiscinfo>{}profile-separator</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$profile-separator</refname>
         <refpurpose>The profile separator character</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$profile-separator := ';'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The profiling parameters (and the profiling attributes) are strings. Profiling
operates on sets of tokens. The strings in each case are divided into tokens by separating them
at the <parameter>profile-separator</parameter><indexterm><primary>param</primary><secondary>profile-separator</secondary></indexterm> character. Common values for separator include
“;” and “ “ (space). See <xref linkend="profiling"/>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_profile-userlevel"><indexterm><primary>param</primary><secondary>profile-userlevel</secondary></indexterm>
   <?db filename="p_profile-userlevel"?>
      <refmeta>
         <refentrytitle>$profile-userlevel</refentrytitle>
         <refmiscinfo>{}profile-userlevel</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$profile-userlevel</refname>
         <refpurpose>Profile tokens for “userlevel”</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$profile-userlevel := ''</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The tokens (separated by <parameter>profile-separator</parameter><indexterm><primary>param</primary><secondary>profile-separator</secondary></indexterm>)
specified for <parameter>profile-userlevel</parameter><indexterm><primary>param</primary><secondary>profile-userlevel</secondary></indexterm> are matched against
the values in the <tag class="attribute">userlevel</tag> attribute. See <xref linkend="profiling"/>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_profile-vendor"><indexterm><primary>param</primary><secondary>profile-vendor</secondary></indexterm>
   <?db filename="p_profile-vendor"?>
      <refmeta>
         <refentrytitle>$profile-vendor</refentrytitle>
         <refmiscinfo>{}profile-vendor</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$profile-vendor</refname>
         <refpurpose>Profile tokens for “vendor”</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$profile-vendor := ''</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The tokens (separated by <parameter>profile-separator</parameter><indexterm><primary>param</primary><secondary>profile-separator</secondary></indexterm>)
specified for <parameter>profile-vendor</parameter><indexterm><primary>param</primary><secondary>profile-vendor</secondary></indexterm> are matched against
the values in the <tag class="attribute">vendor</tag> attribute. See <xref linkend="profiling"/>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_profile-wordsize"><indexterm><primary>param</primary><secondary>profile-wordsize</secondary></indexterm>
   <?db filename="p_profile-wordsize"?>
      <refmeta>
         <refentrytitle>$profile-wordsize</refentrytitle>
         <refmiscinfo>{}profile-wordsize</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$profile-wordsize</refname>
         <refpurpose>Profile tokens for “wordsize”</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$profile-wordsize := ''</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The tokens (separated by <parameter>profile-separator</parameter><indexterm><primary>param</primary><secondary>profile-separator</secondary></indexterm>)
specified for <parameter>profile-wordsize</parameter><indexterm><primary>param</primary><secondary>profile-wordsize</secondary></indexterm> are matched against
the values in the <tag class="attribute">wordsize</tag> attribute. See <xref linkend="profiling"/>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_theme-picker"><indexterm><primary>param</primary><secondary>theme-picker</secondary></indexterm>
   <?db filename="p_theme-picker"?>
      <refmeta>
         <refentrytitle>$theme-picker</refentrytitle>
         <refmiscinfo>{}theme-picker</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$theme-picker</refname>
         <refpurpose>Allow users to select themes?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$theme-picker as xs:string := 'false'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If this parameter <glossterm>is true</glossterm>, a JavaScript
“theme picker” will be included in the document. This is provided through
a <quote>
               <glossterm>hamburger menu</glossterm>
            </quote> in the upper-right
corner. Given that one of the ostensible goals of providing themes
is accessibility, it’s somewhat ironic that this feature is not especially
accessible. Suggestions welcome.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_transclusion-id-fixup"><indexterm><primary>param</primary><secondary>transclusion-id-fixup</secondary></indexterm>
   <?db filename="p_transclusion-id-fixup"?>
      <refmeta>
         <refentrytitle>$transclusion-id-fixup</refentrytitle>
         <refmiscinfo>{}transclusion-id-fixup</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$transclusion-id-fixup</refname>
         <refpurpose>Transclusion ID fixup</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$transclusion-id-fixup as xs:string := 'none'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>These stylesheets attempt to implement <biblioref linkend="transclusion"/>.
This parameter specifies the ID fixup.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_transclusion-link-scope"><indexterm><primary>param</primary><secondary>transclusion-link-scope</secondary></indexterm>
   <?db filename="p_transclusion-link-scope"?>
      <refmeta>
         <refentrytitle>$transclusion-link-scope</refentrytitle>
         <refmiscinfo>{}transclusion-link-scope</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$transclusion-link-scope</refname>
         <refpurpose>Transclusion link scope</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$transclusion-link-scope as xs:string := 'global'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>These stylesheets attempt to implement <biblioref linkend="transclusion"/>.
This parameter specifies the link scope.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_transclusion-prefix-separator"><indexterm><primary>param</primary><secondary>transclusion-prefix-separator</secondary></indexterm>
   <?db filename="p_transclusion-prefix-separator"?>
      <refmeta>
         <refentrytitle>$transclusion-prefix-separator</refentrytitle>
         <refmiscinfo>{}transclusion-prefix-separator</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$transclusion-prefix-separator</refname>
         <refpurpose>Transclusion separator</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$transclusion-prefix-separator as xs:string := '---'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>These stylesheets attempt to implement <biblioref linkend="transclusion"/>.
This parameter provides the separator for auto-generated prefixes.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_transclusion-suffix"><indexterm><primary>param</primary><secondary>transclusion-suffix</secondary></indexterm>
   <?db filename="p_transclusion-suffix"?>
      <refmeta>
         <refentrytitle>$transclusion-suffix</refentrytitle>
         <refmiscinfo>{}transclusion-suffix</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$transclusion-suffix</refname>
         <refpurpose>Transclusion suffix</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$transclusion-suffix as xs:string := ''</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>These stylesheets attempt to implement <biblioref linkend="transclusion"/>.
This parameter specifies the suffix used for transcluded IDs.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_qandadiv-default-toc"><indexterm><primary>param</primary><secondary>qandadiv-default-toc</secondary></indexterm>
   <?db filename="p_qandadiv-default-toc"?>
      <refmeta>
         <refentrytitle>$qandadiv-default-toc</refentrytitle>
         <refmiscinfo>{}qandadiv-default-toc</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$qandadiv-default-toc</refname>
         <refpurpose>Generate a table-of-contents for <tag>qandadiv</tag> elements?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$qandadiv-default-toc := $qandaset-default-toc</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If this parameter <glossterm>is true</glossterm>, by default a table-of-contents will
be generated at the beginning of each <tag>qandadiv</tag>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_qandaset-default-label"><indexterm><primary>param</primary><secondary>qandaset-default-label</secondary></indexterm>
   <?db filename="p_qandaset-default-label"?>
      <refmeta>
         <refentrytitle>$qandaset-default-label</refentrytitle>
         <refmiscinfo>{}qandaset-default-label</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$qandaset-default-label</refname>
         <refpurpose>The default label for <tag>qandaset</tag> elements</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$qandaset-default-label := 'number'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>Question and answers can be rendered with a few different labeling styles.
This parameter selects the default style.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_qandaset-default-toc"><indexterm><primary>param</primary><secondary>qandaset-default-toc</secondary></indexterm>
   <?db filename="p_qandaset-default-toc"?>
      <refmeta>
         <refentrytitle>$qandaset-default-toc</refentrytitle>
         <refmiscinfo>{}qandaset-default-toc</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$qandaset-default-toc</refname>
         <refpurpose>Generate a table-of-contents for <tag>qandaset</tag> elements?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$qandaset-default-toc := 'true'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If this parameter <glossterm>is true</glossterm>, by default a table-of-contents will
be generated at the beginning of each <tag>qandaset</tag>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_relax-ng-grammar"><indexterm><primary>param</primary><secondary>relax-ng-grammar</secondary></indexterm>
   <?db filename="p_relax-ng-grammar"?>
      <refmeta>
         <refentrytitle>$relax-ng-grammar</refentrytitle>
         <refmiscinfo>{}relax-ng-grammar</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$relax-ng-grammar</refname>
         <refpurpose>Validation grammar</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$relax-ng-grammar as xs:string? := ()</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If <parameter>relax-ng-grammar</parameter><indexterm><primary>param</primary><secondary>relax-ng-grammar</secondary></indexterm> is provided, then the
<varname>v:standard-transforms</varname><indexterm><primary>variable</primary><secondary>v:standard-transforms</secondary></indexterm> will validate the document
against
the provided grammar.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_refentry-generate-name"><indexterm><primary>param</primary><secondary>refentry-generate-name</secondary></indexterm>
   <?db filename="p_refentry-generate-name"?>
      <refmeta>
         <refentrytitle>$refentry-generate-name</refentrytitle>
         <refmiscinfo>{}refentry-generate-name</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$refentry-generate-name</refname>
         <refpurpose>Use “Name” as the title of a <tag>refentry</tag>
         </refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$refentry-generate-name := true()</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If <parameter>refentry-generate-name</parameter><indexterm><primary>param</primary><secondary>refentry-generate-name</secondary></indexterm> is true, the
title of the refentry page will be the word “Name”. Otherwise it will
be the title of the subject of the reference page. Generally, exactly one
of <parameter>refentry-generate-name</parameter><indexterm><primary>param</primary><secondary>refentry-generate-name</secondary></indexterm> or
<parameter>refentry-generate-title</parameter><indexterm><primary>param</primary><secondary>refentry-generate-title</secondary></indexterm> should
<glossterm baseform="is true">be true</glossterm>.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_refentry-generate-title"><indexterm><primary>param</primary><secondary>refentry-generate-title</secondary></indexterm>
   <?db filename="p_refentry-generate-title"?>
      <refmeta>
         <refentrytitle>$refentry-generate-title</refentrytitle>
         <refmiscinfo>{}refentry-generate-title</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$refentry-generate-title</refname>
         <refpurpose>Use the subject of the page as the title of a <tag>refentry</tag>
         </refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$refentry-generate-title := true()</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If <parameter>refentry-generate-title</parameter><indexterm><primary>param</primary><secondary>refentry-generate-title</secondary></indexterm> is true, the
title of the refentry page will be the subject of the page (the
<tag>refentrytitle</tag>, <tag>refdescriptor</tag>, or the first
<tag>refname</tag>). Generally, exactly one
of <parameter>refentry-generate-name</parameter><indexterm><primary>param</primary><secondary>refentry-generate-name</secondary></indexterm> or
<parameter>refentry-generate-title</parameter><indexterm><primary>param</primary><secondary>refentry-generate-title</secondary></indexterm> should
<glossterm baseform="is true">be true</glossterm>.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_resource-base-uri"><indexterm><primary>param</primary><secondary>resource-base-uri</secondary></indexterm>
   <?db filename="p_resource-base-uri"?>
      <refmeta>
         <refentrytitle>$resource-base-uri</refentrytitle>
         <refmiscinfo>{}resource-base-uri</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$resource-base-uri</refname>
         <refpurpose>Base URI of additional resources</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$resource-base-uri := './'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>Web pages rely on additional resources (CSS, JavaScript, etc.) to
render properly. The <parameter>resource-base-uri</parameter><indexterm><primary>param</primary><secondary>resource-base-uri</secondary></indexterm> is used
as the base URI for these resources.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_revhistory-style"><indexterm><primary>param</primary><secondary>revhistory-style</secondary></indexterm>
   <?db filename="p_revhistory-style"?>
      <refmeta>
         <refentrytitle>$revhistory-style</refentrytitle>
         <refmiscinfo>{}revhistory-style</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$revhistory-style</refname>
         <refpurpose>Rendering style for <tag>revhistory</tag> elements.</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$revhistory-style := 'table'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The <tag>revhistory</tag> element can be rendered as a list or a table.
If <parameter>revhistory-style</parameter><indexterm><primary>param</primary><secondary>revhistory-style</secondary></indexterm> is “<enumvalue>table</enumvalue>&gt;”, it will be rendered
using the tabular style, if it is “<enumvalue>list</enumvalue>”, 
it will be rendered using the list style.</para>
         <para>
            <xref linkend="ex-revhistory"/> shows an example of a <tag>revhistory</tag> element.</para>
         <example xml:id="ex-revhistory">
            <title>An example of char alignment</title>
            <programlisting language="xml" linenumbering="unnumbered">&lt;revhistory&gt;
&lt;revision&gt;
&lt;revnumber&gt;1.0.0&lt;/revnumber&gt;
&lt;date&gt;2020-07-27&lt;/date&gt;
&lt;author&gt;
&lt;personname&gt;Norman Tovey-Walsh&lt;/personname&gt;
&lt;/author&gt;
&lt;revdescription&gt;
&lt;para&gt;Version 1.0.0 released.&lt;/para&gt;
&lt;/revdescription&gt;
&lt;/revision&gt;
&lt;revision&gt;
&lt;revnumber&gt;0.0.1&lt;/revnumber&gt;
&lt;date&gt;2020-05-08T06:24:00Z&lt;/date&gt;
&lt;author&gt;
&lt;personname&gt;Norman Tovey-Walsh&lt;/personname&gt;
&lt;/author&gt;
&lt;revremark&gt;Development begins.&lt;/revremark&gt;
&lt;/revision&gt;
&lt;/revhistory&gt;</programlisting>
         </example>
         <para>It is shown rendered as a table in <xref linkend="fig-revhistory-table"/>.</para>
         <figure xml:id="fig-revhistory-table">
            <title>An example of <tag>revhistory</tag> rendered as a table</title>
            <revhistory><?db revhistory-style="table"?>
               <revision>
                  <revnumber>1.0.0</revnumber>
                  <date>2020-07-27</date>
                  <author>
                     <personname>Norman Tovey-Walsh</personname>
                  </author>
                  <revdescription>
                     <para>Version 1.0.0 released.</para>
                  </revdescription>
               </revision>
               <revision>
                  <revnumber>0.0.1</revnumber>
                  <date>2020-05-08T06:24:00Z</date>
                  <author>
                     <personname>Norman Tovey-Walsh</personname>
                  </author>
                  <revremark>Development begins.</revremark>
               </revision>
            </revhistory>
         </figure>
         <para>The same <tag>revhistory</tag> is shown rendered as a list in
<xref linkend="fig-revhistory-list"/>.</para>
         <figure xml:id="fig-revhistory-list">
            <title>An example of <tag>revhistory</tag> rendered as a list</title>
            <revhistory><?db revhistory-style="list"?>
               <revision>
                  <revnumber>1.0.0</revnumber>
                  <date>2020-07-27</date>
                  <author>
                     <personname>Norman Tovey-Walsh</personname>
                  </author>
                  <revdescription>
                     <para>Version 1.0.0 released.</para>
                  </revdescription>
               </revision>
               <revision>
                  <revnumber>0.0.1</revnumber>
                  <date>2020-05-08T06:24:00Z</date>
                  <author>
                     <personname>Norman Tovey-Walsh</personname>
                  </author>
                  <revremark>Development begins.</revremark>
               </revision>
            </revhistory>
         </figure>
         <para>The default style specified by
<parameter>revhistory-style</parameter><indexterm><primary>param</primary><secondary>revhistory-style</secondary></indexterm> can be overridden on a
case-by-case basis with the
<literal>db</literal>
            <indexterm>
               <primary>db processing instruction</primary>
            </indexterm> processing instruction using the
<literal>revhistory-style</literal>
            <indexterm>
               <primary>db processing instruction</primary>
               <secondary>revhistory-style pseudo-attribute</secondary>
            </indexterm> pseudo-attribute.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_section-numbers"><indexterm><primary>param</primary><secondary>section-numbers</secondary></indexterm>
   <?db filename="p_section-numbers"?>
      <refmeta>
         <refentrytitle>$section-numbers</refentrytitle>
         <refmiscinfo>{}section-numbers</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$section-numbers</refname>
         <refpurpose>Are sections numbered?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$section-numbers as xs:string := '1'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If <parameter>section-numbers</parameter><indexterm><primary>param</primary><secondary>section-numbers</secondary></indexterm> is true, sections that do not have
an explicit label will be labeled with their section number.</para>
         <para>See also <parameter>division-numbers-inherit</parameter><indexterm><primary>param</primary><secondary>division-numbers-inherit</secondary></indexterm>,
<parameter>section-numbers-inherit</parameter><indexterm><primary>param</primary><secondary>section-numbers-inherit</secondary></indexterm>, and
<varname>v:title-properties</varname><indexterm><primary>variable</primary><secondary>v:title-properties</secondary></indexterm>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_section-numbers-inherit"><indexterm><primary>param</primary><secondary>section-numbers-inherit</secondary></indexterm>
   <?db filename="p_section-numbers-inherit"?>
      <refmeta>
         <refentrytitle>$section-numbers-inherit</refentrytitle>
         <refmiscinfo>{}section-numbers-inherit</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$section-numbers-inherit</refname>
         <refpurpose>Include ancestor section labels?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$section-numbers-inherit := 'true'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If true, section labels will be prefixed with the label of their
ancestor sections.
In other words, third subsection in the second section of a chapter
be labeled “2.3” if this is true and simply “3” if it’s false.</para>
         <para>See also <parameter>component-numbers-inherit</parameter><indexterm><primary>param</primary><secondary>component-numbers-inherit</secondary></indexterm>,
<parameter>division-numbers-inherit</parameter><indexterm><primary>param</primary><secondary>division-numbers-inherit</secondary></indexterm>, and
<varname>v:title-properties</varname><indexterm><primary>variable</primary><secondary>v:title-properties</secondary></indexterm>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_section-toc-depth"><indexterm><primary>param</primary><secondary>section-toc-depth</secondary></indexterm>
   <?db filename="p_section-toc-depth"?>
      <refmeta>
         <refentrytitle>$section-toc-depth</refentrytitle>
         <refmiscinfo>{}section-toc-depth</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$section-toc-depth</refname>
         <refpurpose>Depth of sections in the table of contents</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$section-toc-depth := 'unbounded'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>When generating a Table of Contents, the
<parameter>section-toc-depth</parameter><indexterm><primary>param</primary><secondary>section-toc-depth</secondary></indexterm> determines the maximum depth
of section to include. See also <parameter>generate-toc</parameter><indexterm><primary>param</primary><secondary>generate-toc</secondary></indexterm>
and <parameter>generate-nested-toc</parameter><indexterm><primary>param</primary><secondary>generate-nested-toc</secondary></indexterm>.
</para>
         <para>The <parameter>section-toc-depth</parameter><indexterm><primary>param</primary><secondary>section-toc-depth</secondary></indexterm> should be a positive
integer or the token <literal>unbounded</literal> to indicate arbitrary
depth.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_segmentedlist-style"><indexterm><primary>param</primary><secondary>segmentedlist-style</secondary></indexterm>
   <?db filename="p_segmentedlist-style"?>
      <refmeta>
         <refentrytitle>$segmentedlist-style</refentrytitle>
         <refmiscinfo>{}segmentedlist-style</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$segmentedlist-style</refname>
         <refpurpose>Choose segmented list presentation style</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$segmentedlist-style := 'table'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>Segmented lists can be presented in two different ways: as lists
or tables. The default is determined by
<parameter>segmentedlist-style</parameter><indexterm><primary>param</primary><secondary>segmentedlist-style</secondary></indexterm> which must be either
“<literal>list</literal>” or “<literal>table</literal>”.</para>
         <para>Consider the following <tag>segmentedlist</tag> of (some of) the
US states and their capitals:</para>
         <programlisting language="xml">&lt;segmentedlist&gt;
&lt;segtitle&gt;State&lt;/segtitle&gt;
&lt;segtitle&gt;Capital&lt;/segtitle&gt;
&lt;seglistitem&gt;
&lt;seg&gt;Alabama&lt;/seg&gt;
&lt;seg&gt;Montgomery&lt;/seg&gt;
&lt;/seglistitem&gt;
&lt;seglistitem&gt;
&lt;seg&gt;Alaska&lt;/seg&gt;
&lt;seg&gt;Anchorage&lt;/seg&gt;
&lt;/seglistitem&gt;
&lt;seglistitem&gt;
&lt;seg&gt;Arkansas&lt;/seg&gt;
&lt;seg&gt;Little Rock&lt;/seg&gt;
&lt;/seglistitem&gt;
&lt;/segmentedlist&gt;</programlisting>
         <para>This can be rendered as a table, as shown in
<xref linkend="fig-segmentedlist-table"/>:</para>
         <figure xml:id="fig-segmentedlist-table">
            <title>Segmented list formatted as a table</title>
            <segmentedlist><?db segmentedlist-style='table'
table-summary='US States and their capitals'?>
               <segtitle>State</segtitle>
               <segtitle>Capital</segtitle>
               <seglistitem>
                  <seg>Alabama</seg>
                  <seg>Montgomery</seg>
               </seglistitem>
               <seglistitem>
                  <seg>Alaska</seg>
                  <seg>Anchorage</seg>
               </seglistitem>
               <seglistitem>
                  <seg>Arkansas</seg>
                  <seg>Little Rock</seg>
               </seglistitem>
            </segmentedlist>
         </figure>
         <para>Or as a list, as shown in
<xref linkend="fig-segmentedlist-list"/>:</para>
         <figure xml:id="fig-segmentedlist-list">
            <title>Segmented list formatted as a list</title>
            <segmentedlist><?db segmentedlist-style='list'?>
               <segtitle>State</segtitle>
               <segtitle>Capital</segtitle>
               <seglistitem>
                  <seg>Alabama</seg>
                  <seg>Montgomery</seg>
               </seglistitem>
               <seglistitem>
                  <seg>Alaska</seg>
                  <seg>Anchorage</seg>
               </seglistitem>
               <seglistitem>
                  <seg>Arkansas</seg>
                  <seg>Little Rock</seg>
               </seglistitem>
            </segmentedlist>
         </figure>
         <para>The style can be selected on a per-list basis with the
<literal>db</literal>
            <indexterm>
               <primary>db processing instruction</primary>
            </indexterm> processing instruction using the
<literal>segmentedlist-style</literal>
            <indexterm>
               <primary>db processing instruction</primary>
               <secondary>segmentedlist-style pseudo-attribute</secondary>
            </indexterm> pseudo-attribute.
A <literal>table-summary</literal>
            <indexterm>
               <primary>db processing instruction</primary>
               <secondary>table-summary pseudo-attribute</secondary>
            </indexterm> pseudo-attribute is also provided
for the table summary in tabular presentations.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_show-remarks"><indexterm><primary>param</primary><secondary>show-remarks</secondary></indexterm>
   <?db filename="p_show-remarks"?>
      <refmeta>
         <refentrytitle>$show-remarks</refentrytitle>
         <refmiscinfo>{}show-remarks</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$show-remarks</refname>
         <refpurpose>Show <tag>remark</tag> elements?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$show-remarks := 'false'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The <tag>remark</tag> element is useful for editorial comments
and other notes that are not intended to appear in the final publication.
If <parameter>show-remarks</parameter><indexterm><primary>param</primary><secondary>show-remarks</secondary></indexterm>
            <glossterm>is true</glossterm>, then
they will be included in the transformed result. Otherwise, they are
omitted.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_sidebar-as-aside"><indexterm><primary>param</primary><secondary>sidebar-as-aside</secondary></indexterm>
   <?db filename="p_sidebar-as-aside"?>
      <refmeta>
         <refentrytitle>$sidebar-as-aside</refentrytitle>
         <refmiscinfo>{}sidebar-as-aside</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$sidebar-as-aside</refname>
         <refpurpose>Render <tag>sidebar</tag> as an
    <tag namespace="http://www.w3.org/1999/xhtml">aside</tag>?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$sidebar-as-aside := false()</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The HTML
<tag namespace="http://www.w3.org/1999/xhtml">aside</tag> element has
specific semantics. Whether or not those semantics are consistent with
the way <tag>sidebar</tag> is used in your DocBook documents is an
open question. If <parameter>sidebar-as-aside</parameter><indexterm><primary>param</primary><secondary>sidebar-as-aside</secondary></indexterm>
            <glossterm>is true</glossterm>, <tag>sidebar</tag> elements will be
rendered as HTML <tag namespace="http://www.w3.org/1999/xhtml">aside</tag> elements,
otherwise they will be
rendered as <tag namespace="http://www.w3.org/1999/xhtml">div</tag> elements.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_sort-collation"><indexterm><primary>param</primary><secondary>sort-collation</secondary></indexterm>
   <?db filename="p_sort-collation"?>
      <refmeta>
         <refentrytitle>$sort-collation</refentrytitle>
         <refmiscinfo>{}sort-collation</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$sort-collation</refname>
         <refpurpose>Sorting collation</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$sort-collation := 'http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>When items (the terms in a <tag>glossary</tag>, for example) are sorted,
this collation is used.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_table-accessibility"><indexterm><primary>param</primary><secondary>table-accessibility</secondary></indexterm>
   <?db filename="p_table-accessibility"?>
      <refmeta>
         <refentrytitle>$table-accessibility</refentrytitle>
         <refmiscinfo>{}table-accessibility</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$table-accessibility</refname>
         <refpurpose>Accessibility settings for tables</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$table-accessibility as xs:string* := ('summary', 'details')</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The <varname>table-accessibility</varname><indexterm><primary>variable</primary><secondary>table-accessibility</secondary></indexterm> parameter
determines how accessibility features are added to CALS
tables<footnote>
               <para>This parameter does not apply to HTML tables because
the HTML table model supports these features directly.</para>
            </footnote>.</para>
         <para>The value of this parameter is a list of strings. If the list
contains:</para>
         <variablelist>
            <varlistentry>
               <term>summary</term>
               <listitem>
                  <para>A <tag class="attribute">summary</tag> attribute will be added to the table if an
<tag>alt</tag> element or a <tag>textobject</tag> containing a single
<tag>phrase</tag> is available.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>details</term>
               <listitem>
                  <para>A <tag>details</tag> element will be added if there is
a <tag>textobject</tag> containing anything other than a single
<tag>phrase</tag> available.</para>
               </listitem>
            </varlistentry>
         </variablelist>
         <para>The list may contain either or both values. If other values are present,
they are ignored.</para>
         <para>See <xref linkend="ex-table-accessibility"/>.</para>
         <example xml:id="ex-table-accessibility">
            <title>An example of table accessibility</title>
            <programlisting language="xml" linenumbering="unnumbered">
&lt;table frame="all"&gt;
   &lt;title&gt;Square numbers&lt;/title&gt;
   &lt;alt&gt;The first four whole numbers
and their squares.&lt;/alt&gt;
   &lt;textobject&gt;
      &lt;para&gt;This table shows the first four whole numbers
and their squares. (The square of a number is that
number times itself.)
&lt;/para&gt;
   &lt;/textobject&gt;
   &lt;tgroup cols="2" colsep="1" rowsep="1"&gt;
      &lt;thead&gt;
         &lt;row&gt;
            &lt;entry&gt;
               &lt;inlineequation&gt;
                  &lt;mathphrase&gt;n&lt;/mathphrase&gt;
               &lt;/inlineequation&gt;
            &lt;/entry&gt;
            &lt;entry&gt;
               &lt;inlineequation&gt;
                  &lt;mathphrase&gt;n&lt;superscript&gt;2&lt;/superscript&gt;
                  &lt;/mathphrase&gt;
               &lt;/inlineequation&gt;
            &lt;/entry&gt;
         &lt;/row&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
         &lt;row&gt;
            &lt;entry&gt;1&lt;/entry&gt;
            &lt;entry&gt;1&lt;/entry&gt;
         &lt;/row&gt;
         &lt;row&gt;
            &lt;entry&gt;2&lt;/entry&gt;
            &lt;entry&gt;4&lt;/entry&gt;
         &lt;/row&gt;
         &lt;row&gt;
            &lt;entry&gt;3&lt;/entry&gt;
            &lt;entry&gt;9&lt;/entry&gt;
         &lt;/row&gt;
         &lt;row&gt;
            &lt;entry&gt;4&lt;/entry&gt;
            &lt;entry&gt;16&lt;/entry&gt;
         &lt;/row&gt;
      &lt;/tbody&gt;
   &lt;/tgroup&gt;
&lt;/table&gt;
</programlisting>
         </example>
         <para>One possible rendering of such an example:</para>
         <informalfigure xml:id="fig-table-accessibility">
            <table frame="all">
               <title>Square numbers</title>
               <alt>The first four whole numbers
and their squares.</alt>
               <textobject>
                  <para>This table shows the first four whole numbers
and their squares. (The square of a number is that
number times itself.)
</para>
               </textobject>
               <tgroup cols="2" colsep="1" rowsep="1">
                  <thead>
                     <row>
                        <entry>
                           <inlineequation>
                              <mathphrase>n</mathphrase>
                           </inlineequation>
                        </entry>
                        <entry>
                           <inlineequation>
                              <mathphrase>n<superscript>2</superscript>
                              </mathphrase>
                           </inlineequation>
                        </entry>
                     </row>
                  </thead>
                  <tbody>
                     <row>
                        <entry>1</entry>
                        <entry>1</entry>
                     </row>
                     <row>
                        <entry>2</entry>
                        <entry>4</entry>
                     </row>
                     <row>
                        <entry>3</entry>
                        <entry>9</entry>
                     </row>
                     <row>
                        <entry>4</entry>
                        <entry>16</entry>
                     </row>
                  </tbody>
               </tgroup>
            </table>
         </informalfigure>
         <para>Inspection of the HTML will reveal that the <tag class="attribute">summary</tag> attribute
is present on the element that wraps the table and a
<tag>details</tag> element precedes it. These may or may not be
rendered by your user agent depending on its accessibility features and
settings.</para>
         <para>See also <varname>mediaobject-accessibility</varname><indexterm><primary>variable</primary><secondary>mediaobject-accessibility</secondary></indexterm>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_table-footnote-numeration"><indexterm><primary>param</primary><secondary>table-footnote-numeration</secondary></indexterm>
   <?db filename="p_table-footnote-numeration"?>
      <refmeta>
         <refentrytitle>$table-footnote-numeration</refentrytitle>
         <refmiscinfo>{}table-footnote-numeration</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$table-footnote-numeration</refname>
         <refpurpose>How are footnotes numbered in tables?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$table-footnote-numeration := ('a')</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>There are different styles of footnote numeration. This
parameter contains a list of the symbols that should be used to mark
footnotes in tables. If there could be more footnotes than symbols in
the list, the last symbol in the list must be a character suitable for
formatting numbers. See <parameter>footnote-numeration</parameter><indexterm><primary>param</primary><secondary>footnote-numeration</secondary></indexterm>.
</para>
         <para>Footnote number begins with the first symbol in each table.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_use-docbook-css"><indexterm><primary>param</primary><secondary>use-docbook-css</secondary></indexterm>
   <?db filename="p_use-docbook-css"?>
      <refmeta>
         <refentrytitle>$use-docbook-css</refentrytitle>
         <refmiscinfo>{}use-docbook-css</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$use-docbook-css</refname>
         <refpurpose>Create links to standard DocBook CSS stylesheets?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$use-docbook-css as xs:string := 'true'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If this parameter <glossterm>is true</glossterm>, then the
output will contain links to the standard DocBook CSS stylesheets:
</para>
         <programlisting language="xml">&lt;link href="{$resource-base-uri}css/docbook.css"
rel="stylesheet" media="screen"/&gt;
&lt;link href="{$resource-base-uri}css/docbook-paged.css"
rel="stylesheet" media="print"/&gt;</programlisting>
         <para>If <parameter>use-minified-css</parameter><indexterm><primary>param</primary><secondary>use-minified-css</secondary></indexterm> is true, then the links will
be to minified CSS stylesheets.
You can quickly disable all of these links by setting this
parameter to false. There are a number of other stylesheets that
are only conditionally included,
see <parameter>verbatim-syntax-highlight-css</parameter><indexterm><primary>param</primary><secondary>verbatim-syntax-highlight-css</secondary></indexterm> and
<parameter>persistent-toc-css</parameter><indexterm><primary>param</primary><secondary>persistent-toc-css</secondary></indexterm>. User defined stylesheets
are added with <parameter>user-css-links</parameter><indexterm><primary>param</primary><secondary>user-css-links</secondary></indexterm>.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_use-minified-css"><indexterm><primary>param</primary><secondary>use-minified-css</secondary></indexterm>
   <?db filename="p_use-minified-css"?>
      <refmeta>
         <refentrytitle>$use-minified-css</refentrytitle>
         <refmiscinfo>{}use-minified-css</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$use-minified-css</refname>
         <refpurpose>Create links to minified CSS?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$use-minified-css as xs:string := 'false'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If this parameter <glossterm>is true</glossterm>, then the
links to standard DocBook CSS stylesheets will be to minified versions
instead of the “ordinary” versions. This does not effect links in
<parameter>user-css-links</parameter><indexterm><primary>param</primary><secondary>user-css-links</secondary></indexterm>.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_user-css-links"><indexterm><primary>param</primary><secondary>user-css-links</secondary></indexterm>
   <?db filename="p_user-css-links"?>
      <refmeta>
         <refentrytitle>$user-css-links</refentrytitle>
         <refmiscinfo>{}user-css-links</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$user-css-links</refname>
         <refpurpose>A list of user-defined CSS stylesheets</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$user-css-links := ()</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>This parameter is a space separated list of CSS stylesheets.
Each will be added to the output after the standard stylesheets.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_variablelist-termlength-threshold"><indexterm><primary>param</primary><secondary>variablelist-termlength-threshold</secondary></indexterm>
   <?db filename="p_variablelist-termlength-threshold"?>
      <refmeta>
         <refentrytitle>$variablelist-termlength-threshold</refentrytitle>
         <refmiscinfo>{}variablelist-termlength-threshold</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$variablelist-termlength-threshold</refname>
         <refpurpose>Threshold value for considering <tag>varlistentry</tag> terms “long”</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$variablelist-termlength-threshold := 20</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If the sum of the lengths of the <tag>term</tag> elements in a <tag>varlistentry</tag>
exceeds this threshold, the variable list will have a “<tag>long</tag>” class.
This can be used in CSS or in other downstream processing to decide whether or not the
terms and their corresponding list items should be aligned side-by-side.</para>
         <para>The length computation is just the number of characters. No attempt is made to
adjust for wide or narrow characters.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_verbatim-callouts"><indexterm><primary>param</primary><secondary>verbatim-callouts</secondary></indexterm>
   <?db filename="p_verbatim-callouts"?>
      <refmeta>
         <refentrytitle>$verbatim-callouts</refentrytitle>
         <refmiscinfo>{}verbatim-callouts</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$verbatim-callouts</refname>
         <refpurpose>A list determining how callouts are processed</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$verbatim-callouts as xs:string := 'linecolumn lines lineranges-first'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The <parameter>verbatim-callouts</parameter><indexterm><primary>param</primary><secondary>verbatim-callouts</secondary></indexterm> parameter is a space separated
list of token values. These token values determine which kinds of callouts in a
<tag>programlistingco</tag> or <tag>screenco</tag> will be processed and how.
</para>
         <variablelist role="enumeration">
            <varlistentry>
               <term>
                  <enumvalue>linecolumn</enumvalue>
               </term>
               <listitem>
                  <para>If “<literal>linecolumn</literal>” appears in the list then
callouts that have a <tag class="attribute">units</tag> attribute of <tag class="attvalue">linecolumn</tag> and specify both a line and column
will be processed. A callout marker will be placed on the line and
before the column indicated. Additional lines and columns will be added to the
listing if necessary.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>lines</enumvalue>
               </term>
               <listitem>
                  <para>If “<literal>lines</literal>” appears in the list then callouts
that have a <tag class="attribute">units</tag> attribute of <tag class="attvalue">linecolumn</tag> and specify only a line will be
processed. A callout marker will be placed on the line and before
the <parameter>callout-default-column</parameter><indexterm><primary>param</primary><secondary>callout-default-column</secondary></indexterm>.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>lineranges-first</enumvalue>
               </term>
               <listitem>
                  <para>If “<literal>lineranges-first</literal>” appears in the list
then callouts that have a <tag class="attribute">units</tag> attribute of <tag class="attvalue">linerange</tag> will be processed. A callout marker
will be placed on the first line and before the
<parameter>callout-default-column</parameter><indexterm><primary>param</primary><secondary>callout-default-column</secondary></indexterm>.</para>
                  <para>Only one of <literal>lineranges-first</literal> and
<literal>lineranges-all</literal> should be specified.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>lineranges-all</enumvalue>
               </term>
               <listitem>
                  <para>If “<literal>lineranges-first</literal>” appears in the list
then callouts that have a <tag class="attribute">units</tag> attribute of <tag class="attvalue">linerange</tag> will be processed. A callout marker
will be placed on every line in the range before the
<parameter>callout-default-column</parameter><indexterm><primary>param</primary><secondary>callout-default-column</secondary></indexterm>.</para>
                  <para>Only one of <literal>lineranges-first</literal> and
<literal>lineranges-all</literal> should be specified.</para>
               </listitem>
            </varlistentry>
         </variablelist>
         <para>There is no support for <tag>area</tag>s with a <tag class="attribute">units</tag> value of
“<literal>calspair</literal>” or “<literal>linecolumnpair</literal>”.
They are always ignored.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_verbatim-line-style"><indexterm><primary>param</primary><secondary>verbatim-line-style</secondary></indexterm>
   <?db filename="p_verbatim-line-style"?>
      <refmeta>
         <refentrytitle>$verbatim-line-style</refentrytitle>
         <refmiscinfo>{}verbatim-line-style</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$verbatim-line-style</refname>
         <refpurpose>List of verbatim elements to be rendered in the line style</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$verbatim-line-style := 'programlisting programlistingco 
                         screen screenco synopsis'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>This parameter is a space-separated list of element names (local names).
Verbatim elements that appear in this list will be formatted using the line
style by default. For a discussion of verbatim elements and styles, see
<xref linkend="verbstyle"/>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_verbatim-number-every-nth"><indexterm><primary>param</primary><secondary>verbatim-number-every-nth</secondary></indexterm>
   <?db filename="p_verbatim-number-every-nth"?>
      <refmeta>
         <refentrytitle>$verbatim-number-every-nth</refentrytitle>
         <refmiscinfo>{}verbatim-number-every-nth</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$verbatim-number-every-nth</refname>
         <refpurpose>Line numbering frequency</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$verbatim-number-every-nth := 5</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>When formatting verbatim environments with line numbers,
every <parameter>verbatim-number-every-nth</parameter><indexterm><primary>param</primary><secondary>verbatim-number-every-nth</secondary></indexterm> line is numbered.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_verbatim-number-first-line"><indexterm><primary>param</primary><secondary>verbatim-number-first-line</secondary></indexterm>
   <?db filename="p_verbatim-number-first-line"?>
      <refmeta>
         <refentrytitle>$verbatim-number-first-line</refentrytitle>
         <refmiscinfo>{}verbatim-number-first-line</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$verbatim-number-first-line</refname>
         <refpurpose>Number the first line?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$verbatim-number-first-line := 'true'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>When formatting verbatim environments with line numbers,
if <parameter>verbatim-number-first-line</parameter><indexterm><primary>param</primary><secondary>verbatim-number-first-line</secondary></indexterm> line is true,
the first line will be numbered even it isn’t one of
the <parameter>verbatim-number-every-nth</parameter><indexterm><primary>param</primary><secondary>verbatim-number-every-nth</secondary></indexterm> lines.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_verbatim-number-minlines"><indexterm><primary>param</primary><secondary>verbatim-number-minlines</secondary></indexterm>
   <?db filename="p_verbatim-number-minlines"?>
      <refmeta>
         <refentrytitle>$verbatim-number-minlines</refentrytitle>
         <refmiscinfo>{}verbatim-number-minlines</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$verbatim-number-minlines</refname>
         <refpurpose>Shortest listing to number</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$verbatim-number-minlines := '5'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>When formatting verbatim environments with line numbers,
environments less than
<parameter>verbatim-number-minlines</parameter><indexterm><primary>param</primary><secondary>verbatim-number-minlines</secondary></indexterm> in length will
not be numbered.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_verbatim-number-separator"><indexterm><primary>param</primary><secondary>verbatim-number-separator</secondary></indexterm>
   <?db filename="p_verbatim-number-separator"?>
      <refmeta>
         <refentrytitle>$verbatim-number-separator</refentrytitle>
         <refmiscinfo>{}verbatim-number-separator</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$verbatim-number-separator</refname>
         <refpurpose>Separator between line numbers and lines</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$verbatim-number-separator := '|'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>When formatting verbatim environments with line numbers,
this separator is inserted (wrapped in a
<tag namespace="http://www.w3.org/1999/xhtml">span</tag> with a
<tag class="attribute">class</tag> of <literal>nsep</literal>) between
the line number and the text of the line.</para>
         <para>In most presentations, CSS prevents the <literal>nsep</literal>
from being displayed; instead, a CSS border is used as a separator.
The <parameter>verbatim-number-separator</parameter><indexterm><primary>param</primary><secondary>verbatim-number-separator</secondary></indexterm> is most often seen
with text-only browsers.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_verbatim-numbered-elements"><indexterm><primary>param</primary><secondary>verbatim-numbered-elements</secondary></indexterm>
   <?db filename="p_verbatim-numbered-elements"?>
      <refmeta>
         <refentrytitle>$verbatim-numbered-elements</refentrytitle>
         <refmiscinfo>{}verbatim-numbered-elements</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$verbatim-numbered-elements</refname>
         <refpurpose>Verbatim environments that should be numbered</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$verbatim-numbered-elements := 'programlisting programlistingco'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>This parameter is a space-separated list of element names (local names).
Verbatim elements that appear in this list will be formatted with line numbers.
For a discussion of verbatim elements and styles, see
<xref linkend="verbstyle"/>.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_verbatim-plain-style"><indexterm><primary>param</primary><secondary>verbatim-plain-style</secondary></indexterm>
   <?db filename="p_verbatim-plain-style"?>
      <refmeta>
         <refentrytitle>$verbatim-plain-style</refentrytitle>
         <refmiscinfo>{}verbatim-plain-style</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$verbatim-plain-style</refname>
         <refpurpose>List of verbatim elements to be rendered in the plain style</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$verbatim-plain-style as xs:string := 'address literallayout funcsynopsisinfo classsynopsisinfo'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>This parameter is a space-separated list of element names (local names).
Verbatim elements that appear in this list will be formatted using the plain
style by default. For a discussion of verbatim elements and styles, see
<xref linkend="verbstyle"/>.
</para>
         <para>See also <varname>v:verbatim-plain-style</varname><indexterm><primary>variable</primary><secondary>v:verbatim-plain-style</secondary></indexterm>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_verbatim-space"><indexterm><primary>param</primary><secondary>verbatim-space</secondary></indexterm>
   <?db filename="p_verbatim-space"?>
      <refmeta>
         <refentrytitle>$verbatim-space</refentrytitle>
         <refmiscinfo>{}verbatim-space</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$verbatim-space</refname>
         <refpurpose>The space character to use when padding verbatim lines</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$verbatim-space := ' '</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>When a verbatim line has to be padded in order to get a callout to appear in
the correct column, this character will be used as the padding character.
For a discussion of verbatim elements and styles, see
<xref linkend="verbstyle"/>.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_verbatim-style-default"><indexterm><primary>param</primary><secondary>verbatim-style-default</secondary></indexterm>
   <?db filename="p_verbatim-style-default"?>
      <refmeta>
         <refentrytitle>$verbatim-style-default</refentrytitle>
         <refmiscinfo>{}verbatim-style-default</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$verbatim-style-default</refname>
         <refpurpose>The default verbatim style</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$verbatim-style-default := 'lines'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The default verbatim style for verbatim environments that do not
specify a style explicitly. For a discussion of verbatim
elements and styles, see <xref linkend="verbstyle"/>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_verbatim-syntax-highlight-css"><indexterm><primary>param</primary><secondary>verbatim-syntax-highlight-css</secondary></indexterm>
   <?db filename="p_verbatim-syntax-highlight-css"?>
      <refmeta>
         <refentrytitle>$verbatim-syntax-highlight-css</refentrytitle>
         <refmiscinfo>{}verbatim-syntax-highlight-css</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$verbatim-syntax-highlight-css</refname>
         <refpurpose>Stylesheet for syntax highlighting</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$verbatim-syntax-highlight-css := 'css/pygments.css'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If the <parameter>verbatim-syntax-highlight-languages</parameter><indexterm><primary>param</primary><secondary>verbatim-syntax-highlight-languages</secondary></indexterm> parameter
is non-empty, then this stylesheet will be linked from the HTML document. The purpose
of this stylesheet is to provide styling (fonts, colors, etc.) for syntax highlighted
verbatim listings.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_verbatim-syntax-highlight-languages"><indexterm><primary>param</primary><secondary>verbatim-syntax-highlight-languages</secondary></indexterm>
   <?db filename="p_verbatim-syntax-highlight-languages"?>
      <refmeta>
         <refentrytitle>$verbatim-syntax-highlight-languages</refentrytitle>
         <refmiscinfo>{}verbatim-syntax-highlight-languages</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$verbatim-syntax-highlight-languages</refname>
         <refpurpose>Languages for which syntax highlighting should be performed</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$verbatim-syntax-highlight-languages := 'python perl html xml xslt xquery javascript json'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>This parameter is a space-separated list of programming languages.
If the <link xlink:href="https://pygments.org/">Pygments</link>
            <indexterm>
               <primary>Pygments</primary>
            </indexterm>
            <indexterm>
               <primary>Syntax highlighting</primary>
               <secondary>Pygments</secondary>
            </indexterm>
syntax highlighter is available, the stylesheets can apply syntax
highlighting to program listings.
If the program listing language (as specified in the <tag class="attribute">language</tag>
attribute) appears in the list of
<parameter>verbatim-syntax-highlight-languages</parameter><indexterm><primary>param</primary><secondary>verbatim-syntax-highlight-languages</secondary></indexterm>, syntax highlighting
will be attempted.</para>
         <note>
            <para>Syntax highlighting is incompatible with inline markup in the
program listing; the embedded markup will be ignored.</para>
         </note>
         <para>The examples in this guide show syntax highlighting applied to XML.</para>
         <para>See also <varname>v:verbatim-syntax-highlight-options</varname><indexterm><primary>variable</primary><secondary>v:verbatim-syntax-highlight-options</secondary></indexterm>
and <varname>v:verbatim-syntax-highlight-pygments-options</varname><indexterm><primary>variable</primary><secondary>v:verbatim-syntax-highlight-pygments-options</secondary></indexterm>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_verbatim-syntax-highlighter"><indexterm><primary>param</primary><secondary>verbatim-syntax-highlighter</secondary></indexterm>
   <?db filename="p_verbatim-syntax-highlighter"?>
      <refmeta>
         <refentrytitle>$verbatim-syntax-highlighter</refentrytitle>
         <refmiscinfo>{}verbatim-syntax-highlighter</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$verbatim-syntax-highlighter</refname>
         <refpurpose>Selects the syntax highlighter</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$verbatim-syntax-highlighter as xs:string := 'pygments'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>This parameter specifies the syntax highlighter to use. Most of
the parameters related to syntax highlighting only work if the
<quote>
               <literal>pygments</literal>
            </quote> highlighter is selected.
However, that requires running an external process which might not be
available and which, even if it is available, has an impact on
performance. Using Pygments has the advantage that the stylesheets
have more control over the process and it is available both for online
and paged media formats.
</para>
         <para>The alternative to running an external program is to use
JavaScript to highlight the listing in the browser. This is faster at
formatting time, but limits syntax highlighting to those environments where
JavaScript is available.</para>
         <para>The following options are supported:</para>
         <variablelist role="enumeration">
            <varlistentry>
               <term>
                  <enumvalue>pygments</enumvalue>
               </term>
               <listitem>
                  <para>This is the default highlighter.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>highlight.js</enumvalue>
               </term>
               <listitem>
                  <para>Uses the <biblioref linkend="highlight.js"/> JavaScript library to perform
syntax highlighting. The <varname>highlight-js-head-elements</varname><indexterm><primary>variable</primary><secondary>highlight-js-head-elements</secondary></indexterm> variable
determines what CSS stylesheets and JavaScript libraries are loaded for this option.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>prism</enumvalue>
               </term>
               <listitem>
                  <para>Uses the <biblioref linkend="Prism"/> JavaScript library to perform
syntax highlighting. The <varname>prism-js-head-elements</varname><indexterm><primary>variable</primary><secondary>prism-js-head-elements</secondary></indexterm> variable
determines what CSS stylesheets and JavaScript libraries are loaded for this option.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>none</enumvalue>
               </term>
               <listitem>
                  <para>Disables syntax highlighting but also suppresses messages about features
that are not available because syntax highlighting is disabled.
</para>
               </listitem>
            </varlistentry>
         </variablelist>
      </refsection>
   </refentry>
   <refentry xml:id="p_verbatim-table-style"><indexterm><primary>param</primary><secondary>verbatim-table-style</secondary></indexterm>
   <?db filename="p_verbatim-table-style"?>
      <refmeta>
         <refentrytitle>$verbatim-table-style</refentrytitle>
         <refmiscinfo>{}verbatim-table-style</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$verbatim-table-style</refname>
         <refpurpose>List of verbatim elements to be rendered in the table style</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$verbatim-table-style := ''</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>This parameter is a space-separated list of element names (local names).
Verbatim elements that appear in this list will be formatted using the table
style by default. For a discussion of verbatim elements and styles, see
<xref linkend="verbstyle"/>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_verbatim-trim-trailing-blank-lines"><indexterm><primary>param</primary><secondary>verbatim-trim-trailing-blank-lines</secondary></indexterm>
   <?db filename="p_verbatim-trim-trailing-blank-lines"?>
      <refmeta>
         <refentrytitle>$verbatim-trim-trailing-blank-lines</refentrytitle>
         <refmiscinfo>{}verbatim-trim-trailing-blank-lines</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$verbatim-trim-trailing-blank-lines</refname>
         <refpurpose>Trim trailing blank lines off verbatim environments?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$verbatim-trim-trailing-blank-lines := 'true'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>Trailing blank lines can be introduced into verbatim
environments in a number of ways. Transcluded text files may have
trailing blank lines, for example, and authors often put a newline
before the closing tag of an environment.</para>
         <para>This can produce spurious looking listings in the documentation.
If trailing newlines aren’t significant, setting
<parameter>verbatim-trim-trailing-blank-lines</parameter><indexterm><primary>param</primary><secondary>verbatim-trim-trailing-blank-lines</secondary></indexterm> will cause
the stylesheets to trim blank (that is, entirely empty) lines from
the end of verbatim environments.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_xlink-icon-closed"><indexterm><primary>param</primary><secondary>xlink-icon-closed</secondary></indexterm>
   <?db filename="p_xlink-icon-closed"?>
      <refmeta>
         <refentrytitle>$xlink-icon-closed</refentrytitle>
         <refmiscinfo>{}xlink-icon-closed</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$xlink-icon-closed</refname>
         <refpurpose>Icon indicating hidden XLink links</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$xlink-icon-closed := ()</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If the JavaScript presentation of extended XLinks is used, this
icon marks the place where a multi-ended link can be revealed. The
default icon is <quote>▶</quote> (&amp;#x25B6;).
See also: <parameter>xlink-icon-open</parameter><indexterm><primary>param</primary><secondary>xlink-icon-open</secondary></indexterm>.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_xlink-icon-open"><indexterm><primary>param</primary><secondary>xlink-icon-open</secondary></indexterm>
   <?db filename="p_xlink-icon-open"?>
      <refmeta>
         <refentrytitle>$xlink-icon-open</refentrytitle>
         <refmiscinfo>{}xlink-icon-open</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$xlink-icon-open</refname>
         <refpurpose>XLink CSS</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$xlink-icon-open := ()</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If the JavaScript presentation of extended XLinks is used, this
icon marks the place where a multi-ended link has been revealed. The
default icon is <quote>▼</quote> (&amp;#x25BC;).</para>
         <note>
            <para>The default icons are quite large compared to running text of
the same size. To compensate, they’re styled at a
<code>font-size</code> of 70%. If you select different icons, you may
need to adjust the <code>font-size</code> associated with the
<literal>xlink-arc-list</literal> class.</para>
         </note>
      </refsection>
   </refentry>
   <refentry xml:id="p_xlink-js"><indexterm><primary>param</primary><secondary>xlink-js</secondary></indexterm>
   <?db filename="p_xlink-js"?>
      <refmeta>
         <refentrytitle>$xlink-js</refentrytitle>
         <refmiscinfo>{}xlink-js</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$xlink-js</refname>
         <refpurpose>Script to support extended XLinks</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$xlink-js := 'js/xlink.js'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>If the extended XLinks appear in the document, a link to this
script will be added to the document. This script must contain the
JavaScript necessary to support rendering extended XLinks.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_xlink-style"><indexterm><primary>param</primary><secondary>xlink-style</secondary></indexterm>
   <?db filename="p_xlink-style"?>
      <refmeta>
         <refentrytitle>$xlink-style</refentrytitle>
         <refmiscinfo>{}xlink-style</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$xlink-style</refname>
         <refpurpose>Presentation style for XLink extended links</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$xlink-style := 'document'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The stylesheets support XLink extended links. Extended links make
it possible to have one-to-many links. That is, a single link such
as <phrase xlink:type="extended">
               <link xlink:title="DocBook.org" xlink:label="target" xlink:href="https://docbook.org/" xlink:type="locator"/>
               <link xlink:title="DocBook on Wikipedia" xlink:label="target" xlink:href="https://en.wikipedia.org/wiki/DocBook" xlink:type="locator"/>
               <citetitle xlink:label="source" xlink:type="resource">DocBook</citetitle>
               <link xlink:to="target" xlink:from="source" xlink:type="arc"/>
            </phrase> may point to more than one target. Three styles are supported:</para>
         <variablelist role="enumeration singleton">
            <varlistentry>
               <term>
                  <enumvalue>inline</enumvalue>
               </term>
               <listitem>
                  <para>Renders a link to each target inline after the originating link.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>javascript</enumvalue>
               </term>
               <listitem>
                  <para>Uses JavaScript to render the links in a drop-down menu.
</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <enumvalue>document</enumvalue>
               </term>
               <listitem>
                  <para>The preceding XLink styles apply to the entire document, you cannot
specify inline presentation in some cases and JavaScript presentation in others.
However, if you specify “<literal>document</literal>” as the value for
<parameter>xlink-style</parameter><indexterm><primary>param</primary><secondary>xlink-style</secondary></indexterm>, then a
<literal>db</literal>
                     <indexterm>
                        <primary>db processing instruction</primary>
                     </indexterm> processing instruction in the document’s top-level <tag>info</tag>
element can be used to control the presentation. Specify the style in the
<literal>xlink-style</literal>
                     <indexterm>
                        <primary>db processing instruction</primary>
                        <secondary>xlink-style pseudo-attribute</secondary>
                     </indexterm> pseudo-attribute.</para>
                  <para>If the <literal>document</literal> style is selected and no
processing instruction specifying a style exists, the
<parameter>xlink-style-default</parameter><indexterm><primary>param</primary><secondary>xlink-style-default</secondary></indexterm> style will be selected.</para>
               </listitem>
            </varlistentry>
         </variablelist>
      </refsection>
   </refentry>
   <refentry xml:id="p_xlink-style-default"><indexterm><primary>param</primary><secondary>xlink-style-default</secondary></indexterm>
   <?db filename="p_xlink-style-default"?>
      <refmeta>
         <refentrytitle>$xlink-style-default</refentrytitle>
         <refmiscinfo>{}xlink-style-default</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$xlink-style-default</refname>
         <refpurpose>Default XLink style</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$xlink-style-default := 'inline'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>Specifies the default XLink style if “<literal>document</literal>”
is specified for the <parameter>xlink-style</parameter><indexterm><primary>param</primary><secondary>xlink-style</secondary></indexterm> and no processing
instruction specifying a style exists.</para>
         <para>Must be either “<enumvalue>inline</enumvalue>” or “<enumvalue>javascript</enumvalue>”.
</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_xspec"><indexterm><primary>param</primary><secondary>xspec</secondary></indexterm>
   <?db filename="p_xspec"?>
      <refmeta>
         <refentrytitle>$xspec</refentrytitle>
         <refmiscinfo>{}xspec</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$xspec</refname>
         <refpurpose>Are we running XSpec tests?</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$xspec as xs:string := 'false'</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>This parameter is only true if the stylesheets are running in
the context of the XSpec test harness. This allows tests to be crafted
such that normal variations (Saxon HE vs. EE, the version of the
stylesheets, or the current time, for example) don’t introduce spurious
differences in the results, causing tests to fail.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_transform-original"><indexterm><primary>param</primary><secondary>transform-original</secondary></indexterm>
   <?db filename="p_transform-original"?>
      <refmeta>
         <refentrytitle>$transform-original</refentrytitle>
         <refmiscinfo>{}transform-original</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$transform-original</refname>
         <refpurpose>Transform the original document</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$transform-original := ()</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>Identifies the transform(s) that should be applied to the original
document. See <xref linkend="preprocessing-pipeline"/>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_transform-before"><indexterm><primary>param</primary><secondary>transform-before</secondary></indexterm>
   <?db filename="p_transform-before"?>
      <refmeta>
         <refentrytitle>$transform-before</refentrytitle>
         <refmiscinfo>{}transform-before</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$transform-before</refname>
         <refpurpose>Transform the preprocessed document</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$transform-before := ()</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>Identifies the transform(s) that should be applied before the document
is transformation into HTML (but after the standard transformations).
See <xref linkend="preprocessing-pipeline"/>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_transform-after"><indexterm><primary>param</primary><secondary>transform-after</secondary></indexterm>
   <?db filename="p_transform-after"?>
      <refmeta>
         <refentrytitle>$transform-after</refentrytitle>
         <refmiscinfo>{}transform-after</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$transform-after</refname>
         <refpurpose>Transform the process document</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$transform-after := ()</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>Identifies the transform(s) that should be applied after the document
has been transformed to HTML. See <xref linkend="preprocessing-pipeline"/>.</para>
      </refsection>
   </refentry>
   <refentry xml:id="p_dynamic-profile-variables"><indexterm><primary>param</primary><secondary>dynamic-profile-variables</secondary></indexterm>
   <?db filename="p_dynamic-profile-variables"?>
      <refmeta>
         <refentrytitle>$dynamic-profile-variables</refentrytitle>
         <refmiscinfo>{}dynamic-profile-variables</refmiscinfo>
      </refmeta>
      <refnamediv>
         <refname>$dynamic-profile-variables</refname>
         <refpurpose>Dynamic profiling variables</refpurpose>
         <refclass>param</refclass>
      </refnamediv>
      <refsynopsisdiv>
         <title>Synopsis</title>
         <synopsis>$dynamic-profile-variables as map(xs:QName, item()*)? := ()</synopsis>
      </refsynopsisdiv>
      <refsection>
         <title>Description</title>
         <para>The dynamic profile variables are passed to each of the pre- and
post-processing transformations in addition to the standard
parameters. See <xref linkend="preprocessing-pipeline"/>.</para>
      </refsection>
   </refentry>
</reference>

<reference version="5.0" xml:id="variables">
<info>
  <?db filename="variables"?>
  <title>Variables reference</title>
</info>

<refentry xml:id="v_as-json"><indexterm><primary>variable</primary><secondary>as-json</secondary></indexterm>
<?db filename="v_as-json"?>
<refmeta>
<refentrytitle>$v:as-json</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}as-json</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:as-json</refname>
<refpurpose>Map for serializing JSON</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This is a convience variable for serializing maps as JSON.
Used mostly in debugging.</para>
</refsection>
</refentry>

<refentry xml:id="v_as-xml"><indexterm><primary>variable</primary><secondary>as-xml</secondary></indexterm>
<?db filename="v_as-xml"?>
<refmeta>
<refentrytitle>$v:as-xml</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}as-xml</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:as-xml</refname>
<refpurpose>Map for serializing XML</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This is a convience variable for serializing maps as JSON.
Used mostly in debugging.</para>
</refsection>
</refentry>

<refentry xml:id="v_media-type-default"><indexterm><primary>variable</primary><secondary>media-type-default</secondary></indexterm>
<?db filename="v_media-type-default"?>
<refmeta>
<refentrytitle>$v:media-type-default</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}media-type-default</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:media-type-default</refname>
<refpurpose>Default media type</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When attempting to determine the media type of a file, the stylesheets
use the <varname>v:media-type-map</varname><indexterm><primary>variable</primary><secondary>v:media-type-map</secondary></indexterm> to check for a media type based on
the filename (or URI) extension. If there’s no extension or if the extension isn’t
in that map, this value is used.
</para>
</refsection>
</refentry>

<refentry xml:id="v_media-type-map"><indexterm><primary>variable</primary><secondary>media-type-map</secondary></indexterm>
<?db filename="v_media-type-map"?>
<refmeta>
<refentrytitle>$v:media-type-map</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}media-type-map</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:media-type-map</refname>
<refpurpose>Mapping from extensions to media types</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When attempting to determine the media type of a file, the stylesheets
use this map to check for a media type based on
the filename (or URI) extension.</para>
<para>This mapping is derived from Mozilla’s
<link xlink:href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types">list of common types</link>. The “<literal>.3gp</literal>” and
“<literal>.3g2</literal>” extensions have been removed because they 
have multiple mappings. The “<literal>.text</literal>”, “<literal>.mov</literal>”,
“<literal>.m3u8</literal>”, and “<literal>.wmv</literal>” extensions have been
added. The media type for “<literal>.svg</literal>” has been simplified to just
“<literal>image/svg</literal>”
because that seems to be what EPUB readers require.
</para>
</refsection>
</refentry>

<refentry xml:id="v_mediaobject-exclude-extensions"><indexterm><primary>variable</primary><secondary>mediaobject-exclude-extensions</secondary></indexterm>
<?db filename="v_mediaobject-exclude-extensions"?>
<refmeta>
<refentrytitle>$v:mediaobject-exclude-extensions</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}mediaobject-exclude-extensions</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:mediaobject-exclude-extensions</refname>
<refpurpose>Exluded media type extensions</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This variable simply contains the list of excluded extensions constructed
from the <parameter>mediaobject-exclude-extensions</parameter><indexterm><primary>param</primary><secondary>mediaobject-exclude-extensions</secondary></indexterm> parameter.
</para>
</refsection>
</refentry>

<refentry xml:id="v_admonition-icons"><indexterm><primary>variable</primary><secondary>admonition-icons</secondary></indexterm>
<?db filename="v_admonition-icons"?>
<refmeta>
<refentrytitle>$v:admonition-icons</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}admonition-icons</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:admonition-icons</refname>
<refpurpose>Admonition icons</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>These are the icons that will be presented next to admonitions.
They’re single Unicode characters in the default distribution, but they
can be replaced by graphics or other markup.
</para>
</refsection>
</refentry>

<refentry xml:id="v_arg-choice-def-close-str"><indexterm><primary>variable</primary><secondary>arg-choice-def-close-str</secondary></indexterm><indexterm><primary>variable</primary><secondary>arg-choice-def-open-str</secondary></indexterm><indexterm><primary>variable</primary><secondary>arg-choice-opt-close-str</secondary></indexterm><indexterm><primary>variable</primary><secondary>arg-choice-opt-open-str</secondary></indexterm><indexterm><primary>variable</primary><secondary>arg-choice-plain-close-str</secondary></indexterm><indexterm><primary>variable</primary><secondary>arg-choice-plain-open-str</secondary></indexterm><indexterm><primary>variable</primary><secondary>arg-choice-req-close-str</secondary></indexterm><indexterm><primary>variable</primary><secondary>arg-choice-req-open-str</secondary></indexterm><indexterm><primary>variable</primary><secondary>arg-or-sep</secondary></indexterm><indexterm><primary>variable</primary><secondary>arg-rep-def-str</secondary></indexterm><indexterm><primary>variable</primary><secondary>arg-rep-norepeat-str</secondary></indexterm><indexterm><primary>variable</primary><secondary>arg-rep-repeat-str</secondary></indexterm>
<?db filename="v_arg-choice-def-close"?>
<refmeta>
<refentrytitle>$arg-choice-def-close-str, …</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}arg-choice-def-close-str</refmiscinfo>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}arg-choice-def-open-str</refmiscinfo>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}arg-choice-opt-close-str</refmiscinfo>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}arg-choice-opt-open-str</refmiscinfo>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}arg-choice-plain-close-str</refmiscinfo>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}arg-choice-plain-open-str</refmiscinfo>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}arg-choice-req-close-str</refmiscinfo>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}arg-choice-req-open-str</refmiscinfo>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}arg-or-sep</refmiscinfo>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}arg-rep-def-str</refmiscinfo>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}arg-rep-norepeat-str</refmiscinfo>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}arg-rep-repeat-str</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$arg-choice-def-close-str</refname>
<refname xml:id="v_arg-choice-def-open-str">$v:arg-choice-def-open-str</refname>
<refname xml:id="v_arg-choice-opt-close-str">$v:arg-choice-opt-close-str</refname>
<refname xml:id="v_arg-choice-opt-open-str">$v:arg-choice-opt-open-str</refname>
<refname xml:id="v_arg-choice-plain-close-str">$v:arg-choice-plain-close-str</refname>
<refname xml:id="v_arg-choice-plain-open-str">$v:arg-choice-plain-open-str</refname>
<refname xml:id="v_arg-choice-req-close-str">$v:arg-choice-req-close-str</refname>
<refname xml:id="v_arg-choice-req-open-str">$v:arg-choice-req-open-str</refname>
<refname xml:id="v_arg-or-sep">$v:arg-or-sep</refname>
<refname xml:id="v_arg-rep-def-str">$v:arg-rep-def-str</refname>
<refname xml:id="v_arg-rep-norepeat-str">$v:arg-rep-norepeat-str</refname>
<refname xml:id="v_arg-rep-repeat-str">$v:arg-rep-repeat-str</refname>
<refpurpose>Punctuation marks used in formatting <tag>cmdsynopsis</tag></refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <tag>cmdsynopsis</tag> element is used to model the syntax of
command line interfaces. Broadly, a command line interface consists of a command
followed by a variety of options. These options can be optional or required
and may or may not be repeatable.</para>
<para>User expections about how these should be formatted vary by platform and
publisher. The <emphasis>$v:arg-…</emphasis> variables are designed to make
it easy to adapt to many common forms of presentation. Each contains (usually)
a single character used as a delimiter:</para>

<informaltable>
<tgroup cols="3">
<thead valign="top">
<row><entry>Variable</entry><entry>Use in a synopsis</entry>
<entry>Default<footnote><para>Each of the default characters is placed
in an HTML <tag>span</tag> with the class “<literal>cmdpunct</literal>”.
</para></footnote></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry><varname>v:arg-choice-def-close-str</varname><indexterm><primary>variable</primary><secondary>v:arg-choice-def-close-str</secondary></indexterm></entry>
<entry>Follows a default option</entry>
<entry>]</entry>
</row>
<row>
<entry><varname>v:arg-choice-def-open-str</varname><indexterm><primary>variable</primary><secondary>v:arg-choice-def-open-str</secondary></indexterm></entry>
<entry>Precedes a default option</entry>
<entry>[</entry>
</row>
<row>
<entry><varname>v:arg-choice-opt-close-str</varname><indexterm><primary>variable</primary><secondary>v:arg-choice-opt-close-str</secondary></indexterm></entry>
<entry>Follows an optional option</entry>
<entry>]</entry>
</row>
<row>
<entry><varname>v:arg-choice-opt-open-str</varname><indexterm><primary>variable</primary><secondary>v:arg-choice-opt-open-str</secondary></indexterm></entry>
<entry>Precedes an optional option</entry>
<entry>[</entry>
</row>
<row>
<entry><varname>v:arg-choice-plain-close-str</varname><indexterm><primary>variable</primary><secondary>v:arg-choice-plain-close-str</secondary></indexterm></entry>
<entry>Follows an option identified as “plain”</entry>
<entry>(empty string)</entry>
</row>
<row>
<entry><varname>v:arg-choice-plain-open-str</varname><indexterm><primary>variable</primary><secondary>v:arg-choice-plain-open-str</secondary></indexterm></entry>
<entry>Precedes an option identified as “plain”</entry>
<entry>(empty string)</entry>
</row>
<row>
<entry><varname>v:arg-choice-req-close-str</varname><indexterm><primary>variable</primary><secondary>v:arg-choice-req-close-str</secondary></indexterm></entry>
<entry>Follows a required option</entry>
<entry>}</entry>
</row>
<row>
<entry><varname>v:arg-choice-req-open-str</varname><indexterm><primary>variable</primary><secondary>v:arg-choice-req-open-str</secondary></indexterm></entry>
<entry>Precedes a required option</entry>
<entry>{</entry>
</row>
<row>
<entry><varname>v:arg-or-sep</varname><indexterm><primary>variable</primary><secondary>v:arg-or-sep</secondary></indexterm></entry>
<entry>Separator between options in an “or” group</entry>
<entry>|</entry>
</row>
<row>
<entry><varname>v:arg-rep-def-str</varname><indexterm><primary>variable</primary><secondary>v:arg-rep-def-str</secondary></indexterm></entry>
<entry>Identifies a repeatable default option</entry>
<entry>(empty string)</entry>
</row>
<row>
<entry><varname>v:arg-rep-norepeat-str</varname><indexterm><primary>variable</primary><secondary>v:arg-rep-norepeat-str</secondary></indexterm></entry>
<entry>Identifies a non-repeatable option</entry>
<entry>(empty string)</entry>
</row>
<row>
<entry><varname>v:arg-rep-repeat-str</varname><indexterm><primary>variable</primary><secondary>v:arg-rep-repeat-str</secondary></indexterm></entry>
<entry>Identifies an explicitly repeatable option</entry>
<entry>…</entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>A contrived <tag>cmdsynopsis</tag> appears in
<xref linkend="ex-cmdsynopsis"/>.</para>

<example xml:id="ex-cmdsynopsis">
<title>An example of a <tag>cmdsynopsis</tag></title>
<programlisting language="xml" linenumbering="unnumbered">
&lt;cmdsynopsis&gt;
   &lt;command&gt;command&lt;/command&gt;
   &lt;arg choice="plain"&gt;
      &lt;option&gt;--path &lt;replaceable&gt;PATH&lt;/replaceable&gt;
      &lt;/option&gt;
   &lt;/arg&gt;
   &lt;arg&gt;-opt&lt;/arg&gt;
   &lt;arg choice="req"&gt;-req&lt;/arg&gt;
   &lt;arg rep="repeat"&gt;-D&lt;replaceable&gt;name&lt;/replaceable&gt;
   &lt;/arg&gt;
   &lt;group&gt;
      &lt;arg choice="plain"&gt;-M&lt;/arg&gt;
      &lt;arg choice="plain"&gt;-MD&lt;/arg&gt;
   &lt;/group&gt;
&lt;/cmdsynopsis&gt;
</programlisting>
</example>

<para>One possible rendering of such a synopsis:</para>

<informalfigure xml:id="fig-cmdsynopsis">
<cmdsynopsis>
  <command>command</command>
  <arg choice="plain">
    <option>--path <replaceable>PATH</replaceable></option>
  </arg>
  <arg>-opt</arg>
  <arg choice="req">-req</arg>
  <arg rep="repeat">-D<replaceable>name</replaceable></arg>
  <group>
    <arg choice="plain">-M</arg>
    <arg choice="plain">-MD</arg>
  </group>
</cmdsynopsis>
</informalfigure>

</refsection>
</refentry>

<refentry xml:id="v_annotation-close"><indexterm><primary>variable</primary><secondary>annotation-close</secondary></indexterm>
<?db filename="v_annotation-close"?>
<refmeta>
<refentrytitle>$v:annotation-close</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}annotation-close</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:annotation-close</refname>
<refpurpose>Annotation close button</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The contents of this variable will be rendered as the “close”
icon for popup annotations.</para>
</refsection>
</refentry>

<refentry xml:id="v_bridgehead-map"><indexterm><primary>variable</primary><secondary>bridgehead-map</secondary></indexterm>
<?db filename="v_bridgehead-map"?>
<refmeta>
<refentrytitle>$v:bridgehead-map</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}bridgehead-map</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:bridgehead-map</refname>
<refpurpose>Maps <tag>bridgehead</tag> <tag class="attribute">renderas</tag> values</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <tag>bridgehead</tag> element allows the author to insert a
heading without regard to the logical structure of the document. This
variable controls how the values provided in the <tag class="attribute">renderas</tag> attribute
map to HTML. If there is no mapping for the specified rendering, it is
rendered as a <tag namespace="http://www.w3.org/1999/xhtml">div</tag>.
</para>
</refsection>
</refentry>

<refentry xml:id="v_chunk"><indexterm><primary>variable</primary><secondary>chunk</secondary></indexterm>
<?db filename="v_chunk"?>
<refmeta>
<refentrytitle>$v:chunk</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}chunk</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:chunk</refname>
<refpurpose>Are we chunking on this run?</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>If <varname>v:chunk</varname><indexterm><primary>variable</primary><secondary>v:chunk</secondary></indexterm> is true, then the stylesheets are
producing chunked output. See <xref linkend="chunking"/>.</para>
</refsection>
</refentry>

<refentry xml:id="v_chunk-filter-namespaces"><indexterm><primary>variable</primary><secondary>chunk-filter-namespaces</secondary></indexterm>
<?db filename="v_chunk-filter-namespaces"?>
<refmeta>
<refentrytitle>$v:chunk-filter-namespaces</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}chunk-filter-namespaces</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:chunk-filter-namespaces</refname>
<refpurpose>Namespace context for chunking expressions</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When the <parameter>chunk-include</parameter><indexterm><primary>param</primary><secondary>chunk-include</secondary></indexterm> and
<parameter>chunk-exclude</parameter><indexterm><primary>param</primary><secondary>chunk-exclude</secondary></indexterm> expressions are evaluated,
the namespace bindings in this variable will be in-scope.</para>
</refsection>
</refentry>

<refentry xml:id="v_chunk-renumber-footnotes"><indexterm><primary>variable</primary><secondary>chunk-renumber-footnotes</secondary></indexterm>
<?db filename="v_chunk-renumber-footnotes"?>
<refmeta>
<refentrytitle>$v:chunk-renumber-footnotes</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}chunk-renumber-footnotes</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:chunk-renumber-footnotes</refname>
<refpurpose>Renumber footnotes when chunking?</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Footnotes are generally numbered (or otherwise marked,
see <parameter>footnote-numeration</parameter><indexterm><primary>param</primary><secondary>footnote-numeration</secondary></indexterm>) sequentially throughout a document.
If the document is being broken
<link linkend="chunking">into chunks</link>, it may seem odd if the only
footnote in a chunk is labeled “<superscript>5</superscript>”. If
<varname>v:chunk-renumber-footnotes</varname><indexterm><primary>variable</primary><secondary>v:chunk-renumber-footnotes</secondary></indexterm> is true, the stylesheets
will attempt to renumber footnotes in each chunk so that they begin at the
first mark in each chunk.</para>
<note>
<para>If your document uses <tag>footnoteref</tag> and the reference and the
footnote are in different chunks, this may lead to very confusing numeration!</para>
</note>
</refsection>
</refentry>

<refentry xml:id="v_dbe_DYNAMIC-PROFILE-EVAL-ERROR"><indexterm><primary>variable</primary><secondary>DYNAMIC-PROFILE-EVAL-ERROR</secondary></indexterm>
<?db filename="v_dbe_DYNAMIC-PROFILE-EVAL-ERROR"?>
<refmeta>
<refentrytitle>$err:DYNAMIC-PROFILE-EVAL-ERROR</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/errors}DYNAMIC-PROFILE-EVAL-ERROR</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$err:DYNAMIC-PROFILE-EVAL-ERROR</refname>
<refpurpose>Error evaluating dynamic profile expression</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This error is raised if the variable referenced in a dynamic profile
expression (see <xref linkend="profiling"/>) is not available and the
<parameter>dynamic-profile-error</parameter><indexterm><primary>param</primary><secondary>dynamic-profile-error</secondary></indexterm> configuration is
“<literal>error</literal>”.</para>
</refsection>
</refentry>

<refentry xml:id="v_dbe_DYNAMIC-PROFILE-SYNTAX-ERROR"><indexterm><primary>variable</primary><secondary>DYNAMIC-PROFILE-SYNTAX-ERROR</secondary></indexterm>
<?db filename="v_dbe_DYNAMIC-PROFILE-SYNTAX-ERROR"?>
<refmeta>
<refentrytitle>$err:DYNAMIC-PROFILE-SYNTAX-ERROR</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/errors}DYNAMIC-PROFILE-SYNTAX-ERROR</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$err:DYNAMIC-PROFILE-SYNTAX-ERROR</refname>
<refpurpose>Internal error processing dynamic profiles</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This is an internal error. It indicates that the syntax of a
dynamic profiling expression was unrecognized. Since dynamic profiling
should only be applied to expressions that <emphasis>have</emphasis>
been recognized, this error should never happen.
</para>
</refsection>
</refentry>

<refentry xml:id="v_dbe_INTERNAL-HIGHLIGHT-ERROR"><indexterm><primary>variable</primary><secondary>INTERNAL-HIGHLIGHT-ERROR</secondary></indexterm>
<?db filename="v_dbe_INTERNAL-HIGHLIGHT-ERROR"?>
<refmeta>
<refentrytitle>$err:INTERNAL-HIGHLIGHT-ERROR</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/errors}INTERNAL-HIGHLIGHT-ERROR</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$err:INTERNAL-HIGHLIGHT-ERROR</refname>
<refpurpose>Internal error in syntax highlighting</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This is an internal error that should never happen. It indicates
that stylesheet processing of program listings attempted to use the syntax
highlighter when the syntax highlighter was known to be unavailable.
If you see this error, please file
<link xlink:href="https://github.com/docbook/xslTNG/issues">an issue</link>
for it.
</para>
</refsection>
</refentry>

<refentry xml:id="v_dbe_INTERNAL-RENUMBER-ERROR"><indexterm><primary>variable</primary><secondary>INTERNAL-RENUMBER-ERROR</secondary></indexterm>
<?db filename="v_dbe_INTERNAL-RENUMBER-ERROR"?>
<refmeta>
<refentrytitle>$err:INTERNAL-RENUMBER-ERROR</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/errors}INTERNAL-RENUMBER-ERROR</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$err:INTERNAL-RENUMBER-ERROR</refname>
<refpurpose>Internal error in chunk formatting</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This is an internal error that should never happen. It indicates
that stylesheet processing of footnotes during “chunking” has gone
awry. If you see this error, please file
<link xlink:href="https://github.com/docbook/xslTNG/issues">an issue</link>
for it.
</para>
</refsection>
</refentry>

<refentry xml:id="v_dbe_INVALID-AREAREFS"><indexterm><primary>variable</primary><secondary>INVALID-AREAREFS</secondary></indexterm>
<?db filename="v_dbe_INVALID-AREAREFS"?>
<refmeta>
<refentrytitle>$err:INVALID-AREAREFS</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/errors}INVALID-AREAREFS</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$err:INVALID-AREAREFS</refname>
<refpurpose>Callout area refers to invalid target</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This error indicates that a <tag>calloutlist</tag> includes an ID/IDREF
link to a callout, but the element identified by the ID is not an <tag>areaset</tag>,
<tag>area</tag>, or <tag>callout</tag>.
</para>
<para>This
<link xlink:href="https://github.com/docbook/docbook/issues/151">should</link>
be identified as a validation error by a Schematron rule.
</para>
</refsection>
</refentry>

<refentry xml:id="v_dbe_INVALID-CALS"><indexterm><primary>variable</primary><secondary>INVALID-CALS</secondary></indexterm>
<?db filename="v_dbe_INVALID-CALS"?>
<refmeta>
<refentrytitle>$err:INVALID-CALS</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/errors}INVALID-CALS</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$err:INVALID-CALS</refname>
<refpurpose>CALS table is invalid</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This error is raised if a CALS table is invalid. The following
error conditions give rise to this error:</para>
<itemizedlist spacing="compact">
<listitem>
<para>The number of columns in the table exceeds the specified
<tag class="attribute">cols</tag> value on <tag>tgroup</tag>.
</para></listitem>
<listitem>
<para>There is a named reference to a <tag>colspec</tag> but no <tag>colspec</tag>
with that name exists.</para>
</listitem>
<listitem>
<para>There is a named reference to a <tag>spanspec</tag> but no <tag>spanspec</tag>
with that name exists.</para>
</listitem>
</itemizedlist>
</refsection>
</refentry>

<refentry xml:id="v_dbe_INVALID-CONSTRAINT"><indexterm><primary>variable</primary><secondary>INVALID-CONSTRAINT</secondary></indexterm>
<?db filename="v_dbe_INVALID-CONSTRAINT"?>
<refmeta>
<refentrytitle>$err:INVALID-CONSTRAINT</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/errors}INVALID-CONSTRAINT</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$err:INVALID-CONSTRAINT</refname>
<refpurpose>Incorrect constraint reference</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This error is raised if a <tag>constraint</tag> link points to something
other than a <tag>constraintdef</tag>.</para>
<para>This
<link xlink:href="https://github.com/docbook/docbook/issues/152">should</link>
be identified as a validation error by a Schematron rule.
</para>
</refsection>
</refentry>

<refentry xml:id="v_dbe_INVALID-DYNAMIC-PROFILE-ERROR"><indexterm><primary>variable</primary><secondary>INVALID-DYNAMIC-PROFILE-ERROR</secondary></indexterm>
<?db filename="v_dbe_INVALID-DYNAMIC-PROFILE-ERROR"?>
<refmeta>
<refentrytitle>$err:INVALID-DYNAMIC-PROFILE-ERROR</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/errors}INVALID-DYNAMIC-PROFILE-ERROR</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$err:INVALID-DYNAMIC-PROFILE-ERROR</refname>
<refpurpose>Invalid value specified for <parameter>dynamic-profile-error</parameter><indexterm><primary>param</primary><secondary>dynamic-profile-error</secondary></indexterm></refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This error is raised if the value of
<parameter>dynamic-profile-error</parameter><indexterm><primary>param</primary><secondary>dynamic-profile-error</secondary></indexterm> is not a recognized value.
</para>
</refsection>
</refentry>

<refentry xml:id="v_dbe_INVALID-INJECT"><indexterm><primary>variable</primary><secondary>INVALID-INJECT</secondary></indexterm>
<?db filename="v_dbe_INVALID-INJECT"?>
<refmeta>
<refentrytitle>$err:INVALID-INJECT</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/errors}INVALID-INJECT</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$err:INVALID-INJECT</refname>
<refpurpose>Invalid callout area specification</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This error is raised if a <tag>programlistingco</tag> or
<tag>screenco</tag> contains invalid areas. This can arise from invalid
markup, unsupported units in an area, or unparseable coordinates in an area.
</para>
</refsection>
</refentry>

<refentry xml:id="v_dbe_INVALID-NAME-STYLE"><indexterm><primary>variable</primary><secondary>INVALID-NAME-STYLE</secondary></indexterm>
<?db filename="v_dbe_INVALID-NAME-STYLE"?>
<refmeta>
<refentrytitle>$err:INVALID-NAME-STYLE</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/errors}INVALID-NAME-STYLE</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$err:INVALID-NAME-STYLE</refname>
<refpurpose>Invalid name style</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This error indicates that a request was made to format a personal
name (see <code role="template">t:person-name</code>) with an unknown style name.
</para>
</refsection>
</refentry>

<refentry xml:id="v_dbe_INVALID-PRODUCTIONRECAP"><indexterm><primary>variable</primary><secondary>INVALID-PRODUCTIONRECAP</secondary></indexterm>
<?db filename="v_dbe_INVALID-PRODUCTIONRECAP"?>
<refmeta>
<refentrytitle>$err:INVALID-PRODUCTIONRECAP</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/errors}INVALID-PRODUCTIONRECAP</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$err:INVALID-PRODUCTIONRECAP</refname>
<refpurpose>Incorrect production reference</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This error is raised if a <tag>productionrecap</tag> link points to something
other than a <tag>production</tag>.</para>
<para>This
<link xlink:href="https://github.com/docbook/docbook/issues/152">should</link>
be identified as a validation error by a Schematron rule.
</para>
</refsection>
</refentry>

<refentry xml:id="v_dbe_INVALID-RESULTS-REQUESTED"><indexterm><primary>variable</primary><secondary>INVALID-RESULTS-REQUESTED</secondary></indexterm>
<?db filename="v_dbe_INVALID-RESULTS-REQUESTED"?>
<refmeta>
<refentrytitle>$err:INVALID-RESULTS-REQUESTED</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/errors}INVALID-RESULTS-REQUESTED</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$err:INVALID-RESULTS-REQUESTED</refname>
<refpurpose>Invalid result form parameter</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This error is raised if the
<code>$result</code> parameter passed to <code role="template">t:docbook</code> is
not one of “<literal>raw-results</literal>”, “<literal>chunked-results</literal>”,
or “<literal>main-document</literal>”.</para>
</refsection>
</refentry>

<refentry xml:id="v_dbe_INVALID-TEMPLATE"><indexterm><primary>variable</primary><secondary>INVALID-TEMPLATE</secondary></indexterm>
<?db filename="v_dbe_INVALID-TEMPLATE"?>
<refmeta>
<refentrytitle>$err:INVALID-TEMPLATE</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/errors}INVALID-TEMPLATE</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$err:INVALID-TEMPLATE</refname>
<refpurpose>Invalid template reference</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This error is raised if a template reference names a template that
does not exist.</para>
</refsection>
</refentry>

<refentry xml:id="v_dbe_INVALID_TRANSFORM"><indexterm><primary>variable</primary><secondary>INVALID-TRANSFORM</secondary></indexterm>
<?db filename="v_dbe_INVALID_TRANSFORM"?>
<refmeta>
<refentrytitle>$err:INVALID-TRANSFORM</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/errors}INVALID-TRANSFORM</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$err:INVALID-TRANSFORM</refname>
<refpurpose>Error processing a transform</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The lists of transforms in <parameter>transform-original</parameter><indexterm><primary>param</primary><secondary>transform-original</secondary></indexterm>
<parameter>transform-before</parameter><indexterm><primary>param</primary><secondary>transform-before</secondary></indexterm>, and <parameter>transform-after</parameter><indexterm><primary>param</primary><secondary>transform-after</secondary></indexterm>
must either be strings (the stylesheet location) or a map that specifies
the stylesheet location and other properties.</para>
<para>This error is raised if an element of the list is neither a map nor
a string.</para>
</refsection>
</refentry>

<refentry xml:id="v_debug"><indexterm><primary>variable</primary><secondary>debug</secondary></indexterm>
<?db filename="v_debug"?>
<refmeta>
<refentrytitle>$v:debug</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}debug</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:debug</refname>
<refpurpose>Debugging flags</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <varname>v:debug</varname><indexterm><primary>variable</primary><secondary>v:debug</secondary></indexterm> variable contains a sequence of
debugging flags. These are derived from tokenizing the
<parameter>debug</parameter><indexterm><primary>param</primary><secondary>debug</secondary></indexterm> parameter value.</para>
</refsection>
</refentry>

<refentry xml:id="v_formal-object-title-placement"><indexterm><primary>variable</primary><secondary>formal-object-title-placement</secondary></indexterm>
<?db filename="v_formal-object-title-placement"?>
<refmeta>
<refentrytitle>$v:formal-object-title-placement</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}formal-object-title-placement</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:formal-object-title-placement</refname>
<refpurpose>Placement of formal object titles</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This variable, usually derived from
<parameter>formal-object-title-placement</parameter><indexterm><primary>param</primary><secondary>formal-object-title-placement</secondary></indexterm> is a map from
element (local) names to placements. The placement is either
“<literal>before</literal>” or “<literal>after</literal>”.
</para>
</refsection>
</refentry>

<refentry xml:id="v_highlight-js-head-elements"><indexterm><primary>variable</primary><secondary>highlight-js-head-elements</secondary></indexterm>
<?db filename="v_highlight-js-head-elements"?>
<refmeta>
<refentrytitle>$v:highlight-js-head-elements</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}highlight-js-head-elements</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:highlight-js-head-elements</refname>
<refpurpose>CSS and JavaScript to support highlight.js</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>If the <quote><literal>highlight.js</literal></quote> syntax highlighter is
selected (see <parameter>verbatim-syntax-highlighter</parameter><indexterm><primary>param</primary><secondary>verbatim-syntax-highlighter</secondary></indexterm>), these elements are
added to the <tag namespace="http://www.w3.org/1999/xhtml">head</tag> element to
load and configure the highlighter.</para>
<para>Starting with the <citetitle>DocBook xslTNG Stylesheets</citetitle> version 1.4.1,
any <tag namespace="http://www.w3.org/1999/xhtml">link</tag> elements will be
added to the <tag namespace="http://www.w3.org/1999/xhtml">head</tag> element
<emphasis>before</emphasis> links to user-defined CSS files so that property overrides
may be specified.</para>
</refsection>
</refentry>

<refentry xml:id="v_image-nominal-height"><indexterm><primary>variable</primary><secondary>image-nominal-height</secondary></indexterm>
<?db filename="v_image-nominal-height"?>
<refmeta>
<refentrytitle>$v:image-nominal-height</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}image-nominal-height</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:image-nominal-height</refname>
<refpurpose>Nominal height of an image</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>If the extension functions necessary to determine the intrinsic height
of an image are unavailable, or if the height cannot be determined, this value
will be used as the assumed intrinsic height of the image. This is generally the
parsed value of <parameter>image-nominal-height</parameter><indexterm><primary>param</primary><secondary>image-nominal-height</secondary></indexterm>.</para>
</refsection>
</refentry>

<refentry xml:id="v_image-nominal-width"><indexterm><primary>variable</primary><secondary>image-nominal-width</secondary></indexterm>
<?db filename="v_image-nominal-width"?>
<refmeta>
<refentrytitle>$v:image-nominal-width</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}image-nominal-width</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:image-nominal-width</refname>
<refpurpose>Nominal width of an image</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>If the extension functions necessary to determine the intrinsic width
of an image are unavailable, or if the width cannot be determined, this value
will be used as the assumed intrinsic width of the image. This is generally the
parsed value of <parameter>image-nominal-width</parameter><indexterm><primary>param</primary><secondary>image-nominal-width</secondary></indexterm>.</para>
</refsection>
</refentry>

<refentry xml:id="v_invisible-characters"><indexterm><primary>variable</primary><secondary>invisible-characters</secondary></indexterm>
<?db filename="v_invisible-characters"?>
<refmeta>
<refentrytitle>$v:invisible-characters</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}invisible-characters</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:invisible-characters</refname>
<refpurpose>A list of characters that are invisible in verbatim environments</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When callouts are being inserted into a verbatim environment, the
stylesheets must count the characters in each line in order to find the correct
column. The characters in this list are considered invisible and do not
increase the column count as they’re passed.
</para>
</refsection>
</refentry>

<refentry xml:id="v_mediaobject-input-base-uri"><indexterm><primary>variable</primary><secondary>mediaobject-input-base-uri</secondary></indexterm>
<?db filename="v_mediaobject-input-base-uri"?>
<refmeta>
<refentrytitle>$v:mediaobject-input-base-uri</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}mediaobject-input-base-uri</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:mediaobject-input-base-uri</refname>
<refpurpose>Base URI of images and other media in the XML sources</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This value is calculated from the
<parameter>mediaobject-input-base-uri</parameter><indexterm><primary>param</primary><secondary>mediaobject-input-base-uri</secondary></indexterm> parameter. If the
parameter is the empty string, then this value is the empty sequence. Otherwise,
this value is the absolute URI that results from resolving the value of the
<parameter>mediaobject-input-base-uri</parameter><indexterm><primary>param</primary><secondary>mediaobject-input-base-uri</secondary></indexterm> parameter against
the static base URI of the stylesheet.
</para>
</refsection>
</refentry>

<refentry xml:id="v_mediaobject-output-base-uri"><indexterm><primary>variable</primary><secondary>mediaobject-output-base-uri</secondary></indexterm>
<?db filename="v_mediaobject-output-base-uri"?>
<refmeta>
<refentrytitle>$v:mediaobject-output-base-uri</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}mediaobject-output-base-uri</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:mediaobject-output-base-uri</refname>
<refpurpose>Base URI of images and other media in the output</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This value is calculated from the
<parameter>mediaobject-output-base-uri</parameter><indexterm><primary>param</primary><secondary>mediaobject-output-base-uri</secondary></indexterm> parameter. If the
parameter is the empty string, then this value is the empty sequence. Otherwise,
this value is the value of the
<parameter>mediaobject-output-base-uri</parameter><indexterm><primary>param</primary><secondary>mediaobject-output-base-uri</secondary></indexterm> parameter, which is assumed
to be absolute. A trailing slash will be added to the parameter value if
it is not present.</para>
</refsection>
</refentry>

<refentry xml:id="v_nominal-page-width"><indexterm><primary>variable</primary><secondary>nominal-page-width</secondary></indexterm>
<?db filename="v_nominal-page-width"?>
<refmeta>
<refentrytitle>$v:nominal-page-width</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}nominal-page-width</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:nominal-page-width</refname>
<refpurpose>The nominal page width</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>To calculate the width of the columns in some complex CALS
tables, the stylesheets need to know the page width. The
<parameter>nominal-page-width</parameter><indexterm><primary>param</primary><secondary>nominal-page-width</secondary></indexterm> is used for this
value. It is generally the value of <parameter>nominal-page-width</parameter><indexterm><primary>param</primary><secondary>nominal-page-width</secondary></indexterm>
parsed as a length (see <xref linkend="units"/>).</para>
</refsection>
</refentry>

<refentry xml:id="v_olink-databases"><indexterm><primary>variable</primary><secondary>olink-databases</secondary></indexterm>
<?db filename="v_olink-databases"?>
<refmeta>
<refentrytitle>$v:olink-databases</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}olink-databases</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:olink-databases</refname>
<refpurpose>External olink databases</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <varname>v:olink-databases</varname><indexterm><primary>variable</primary><secondary>v:olink-databases</secondary></indexterm> variable is usually derived from the
<parameter>olink-databases</parameter><indexterm><primary>param</primary><secondary>olink-databases</secondary></indexterm> parameter. It must contain a sequence of
olink target databases.</para>
</refsection>
</refentry>

<refentry xml:id="v_personal-name-styles"><indexterm><primary>variable</primary><secondary>personal-name-styles</secondary></indexterm>
<?db filename="v_personal-name-styles"?>
<refmeta>
<refentrytitle>$v:personal-name-styles</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}personal-name-styles</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$personal-name-styles</refname>
<refpurpose>The list of known personal name styles</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The stylesheets can format personal names in a variety of ways.
This variable contains the list of known ways, see
<code role="template">t:person-name</code>.
</para>
</refsection>
</refentry>

<refentry xml:id="v_prism-js-head-elements"><indexterm><primary>variable</primary><secondary>prism-js-head-elements</secondary></indexterm>
<?db filename="v_prism-js-head-elements"?>
<refmeta>
<refentrytitle>$v:prism-js-head-elements</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}prism-js-head-elements</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:prism-js-head-elements</refname>
<refpurpose>CSS and JavaScript to support Prism</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>If the <quote><literal>prism</literal></quote> syntax highlighter is
selected (see <parameter>verbatim-syntax-highlighter</parameter><indexterm><primary>param</primary><secondary>verbatim-syntax-highlighter</secondary></indexterm>), these elements are
added to the <tag namespace="http://www.w3.org/1999/xhtml">head</tag> element to
load and configure the highlighter.</para>
<para>Starting with the <citetitle>DocBook xslTNG Stylesheets</citetitle> version 1.4.1,
any <tag namespace="http://www.w3.org/1999/xhtml">link</tag> elements will be
added to the <tag namespace="http://www.w3.org/1999/xhtml">head</tag> element
<emphasis>before</emphasis> links to user-defined CSS files so that property overrides
may be specified.</para>
</refsection>
</refentry>

<refentry xml:id="v_standard-transforms"><indexterm><primary>variable</primary><secondary>standard-transforms</secondary></indexterm>
<?db filename="v_standard-tranasforms"?>
<refmeta>
<refentrytitle>$v:standard-transforms</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}standard-transforms</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:standard-transforms</refname>
<refpurpose>The standard pre-processing transformations</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This variable contains the list of preprocessing transforms
applied to each document. You can add transformations that operate
on the original document
(<parameter>transform-original</parameter><indexterm><primary>param</primary><secondary>transform-original</secondary></indexterm>) or on the result of
these transforms, but before the DocBook HTML transformation occurs
(<parameter>transform-before</parameter><indexterm><primary>param</primary><secondary>transform-before</secondary></indexterm>), or after
the HTML transformation (<parameter>transform-after</parameter><indexterm><primary>param</primary><secondary>transform-after</secondary></indexterm>).</para>
<para>You shouldn’t need to modify this variable unless you want to
remove or reorder the standard transforms, or insert your own
into the middle.</para>
</refsection>
</refentry>

<refentry xml:id="v_templates"><indexterm><primary>variable</primary><secondary>templates</secondary></indexterm>
<?db filename="v_templates"?>
<refmeta>
<refentrytitle>$v:templates</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}templates</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:templates</refname>
<refpurpose>Custom templates for title pages</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The stylesheets use templates, as described in <xref linkend="header-templates"/>,
to determine the formatting of title pages<footnote><para>The term “title pages”
should be understood very broadly here. Anything that has a title has a title page, even
if that “page” consists of only a single heading.</para></footnote>. Any templates provided in
<varname>v:templates</varname><indexterm><primary>variable</primary><secondary>v:templates</secondary></indexterm> will be used preferentially to whatever builtin templates
exist.</para>
</refsection>
</refentry>

<refentry xml:id="v_theme-list"><indexterm><primary>variable</primary><secondary>theme-list</secondary></indexterm>
<?db filename="v_theme-list"?>
<refmeta>
<refentrytitle>$v:theme-list</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}theme-list</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:theme-list</refname>
<refpurpose>Enumerates available themes</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This variable is part of the experimental themes feature. It
enumerates the available themes. Each theme has three parts, a name,
an ID, and (optionally) an indication of whether or not it’s a “dark”
theme.</para>
<para>Themes are implemented in CSS. If the
<parameter>theme-picker</parameter><indexterm><primary>param</primary><secondary>theme-picker</secondary></indexterm> is enabled, it will be possible
for the reader to select a theme. The theme names are used for this
purpose.</para>
<para>The ID value is used as a class on the
<tag namespace="http://www.w3.org/1999/xhtml">html</tag> element.
Everything else about the theme is implemented in CSS. To add a new theme,
provide a set of CSS rules that apply when the ID class is in effect.</para>
<para>The dark mode setting is only used as a default. If the document
does not specify a <parameter>default-theme</parameter><indexterm><primary>param</primary><secondary>default-theme</secondary></indexterm>, if the user
has never selected a theme, if the user has enabled dark mode at the
operating system level, and if the browser makes this fact available,
the first “dark” theme will automatically be selected.</para>
</refsection>
</refentry>

<refentry xml:id="v_title-properties"><indexterm><primary>variable</primary><secondary>title-properties</secondary></indexterm>
<?db filename="v_title-properties"?>
<refmeta>
<refentrytitle>$v:title-properties</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}title-properties</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:title-properties</refname>
<refpurpose>Controls how titles are formatted</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Titles are complicated. They occur all over the place (on books,
on chapters, on sections, on figures, on formal paragraphs, etc.) and
they need to be rendered differently in different contexts. You are
always free to write your own templates to completely customize the
formatting, but the stylesheets provide five declarative properties that
you can select for each title. As long as your formatting requirements
are satisfied by these properties, you don’t have two write custom
templates to do the formatting.</para>
<para>The properties are label, number, number format, inherit, and “label-toc”.
Consider the title in <xref linkend="fig.title-properties"/>.</para>

<figure xml:id="fig.title-properties">
<title>Title Properties</title>
<mediaobject>
<alt>Illustration of title properties in a section title.</alt>
<imageobject>
<imagedata fileref="media/title-properties.png"/>
</imageobject>
<textobject>
<para>This image shows the title “Section 3.4 Changing the print head”
identifying “Section” as the label, “3.4” as the number, and “3.” as
the inherited number.</para>
</textobject>
</mediaobject>
</figure>

<para>For any title context, identified by an XPath expression, you
can set the <literal>label</literal> and <literal>number</literal>
properties to specify whether or not those elements should appear.
If <literal>inherit</literal> is true, the number of the parent element
is included (so the figure might be section 4 in chapter 3, for example).
The <literal>number-format</literal> property determines what style
of numeration is used (arabic, lower- or upper-alpha, or lower- or
upper-roman, for example).</para>

<para>The last property, <literal>label-toc</literal>, determines whether
or not the label appears in the table of contents. This can be used, for example,
to suppress the label “Figure” at the beginning of every figure in a list
of figures.</para>

<para>The stylesheets search this list sequentially and the first match
is used. Observe that <varname>v:user-title-properties</varname><indexterm><primary>variable</primary><secondary>v:user-title-properties</secondary></indexterm> always comes
first; if you want to override the default values, you can put your overrides
in there. You do not have to redefine the entire list.</para>
</refsection>
</refentry>

<refentry xml:id="v_titlepage-default"><indexterm><primary>variable</primary><secondary>titlepage-default</secondary></indexterm>
<?db filename="v_titlepage-default"?>
<refmeta>
<refentrytitle>$v:titlepage-default</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}titlepage-default</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:titlepage-default</refname>
<refpurpose>Default template for title pages</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Title pages, taken loosely to mean anything with a <tag>title</tag>,
are formatted using templates, see <xref linkend="header-templates"/>.
If a template doesn’t exist for a particular context, the
<varname>v:titlepage-default</varname><indexterm><primary>variable</primary><secondary>v:titlepage-default</secondary></indexterm> template is used.
</para>
</refsection>
</refentry>

<refentry xml:id="v_toc-close"><indexterm><primary>variable</primary><secondary>toc-close</secondary></indexterm>
<?db filename="v_toc-close"?>
<refmeta>
<refentrytitle>$v:toc-close</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}toc-close</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:toc-close</refname>
<refpurpose>Persistent ToC close button</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The contents of this variable will be rendered as the “close”
icon for the persistent ToC.</para>
</refsection>
</refentry>

<refentry xml:id="v_toc-open"><indexterm><primary>variable</primary><secondary>toc-open</secondary></indexterm>
<?db filename="v_toc-open"?>
<refmeta>
<refentrytitle>$v:toc-open</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}toc-open</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:toc-open</refname>
<refpurpose>Persistent ToC open button</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The contents of this variable will be rendered as the “open”
icon for the persistent ToC.</para>
</refsection>
</refentry>

<refentry xml:id="v_unit-scale"><indexterm><primary>variable</primary><secondary>unit-scale</secondary></indexterm>
<?db filename="v_unit-scale"?>
<refmeta>
<refentrytitle>$v:unit-scale</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}unit-scale</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:unit-scale</refname>
<refpurpose>List of known measurement units and their sizes</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <varname>v:unit-scale</varname><indexterm><primary>variable</primary><secondary>v:unit-scale</secondary></indexterm> map contains a set of
measurement units and their absolute length in terms of pixels (as
computed with <parameter>pixels-per-inch</parameter><indexterm><primary>param</primary><secondary>pixels-per-inch</secondary></indexterm>).</para>
<para>Recognized units at the time of this writing are shown in
<xref linkend="fig.units"/>.</para>

<figure xml:id="fig.units">
<title>Recognized units of measure</title>
<informaltable>
<tgroup cols="2">
<colspec align="right" colsep="1"/>
<thead>
<row rowsep="1"><entry>Unit</entry><entry>Size</entry>
</row>
</thead>
<tbody>
<row><entry><literal>px</literal></entry>
<entry><code>1.0</code></entry>
</row>
<row><entry><literal>in</literal></entry>
<entry><code><varname>pixels-per-inch</varname><indexterm><primary>variable</primary><secondary>pixels-per-inch</secondary></indexterm></code></entry>
</row>
<row><entry><literal>m</literal></entry>
<entry><code><varname>pixels-per-inch</varname><indexterm><primary>variable</primary><secondary>pixels-per-inch</secondary></indexterm> div 2.54 * 100.0</code></entry>
</row>
<row><entry><literal>cm</literal></entry>
<entry><code><varname>pixels-per-inch</varname><indexterm><primary>variable</primary><secondary>pixels-per-inch</secondary></indexterm> div 2.54</code></entry>
</row>
<row><entry><literal>mm</literal></entry>
<entry><code><varname>pixels-per-inch</varname><indexterm><primary>variable</primary><secondary>pixels-per-inch</secondary></indexterm> div 25.4</code></entry>
</row>
<row><entry><literal>pt</literal></entry>
<entry><code><varname>pixels-per-inch</varname><indexterm><primary>variable</primary><secondary>pixels-per-inch</secondary></indexterm> div 72.0</code></entry>
</row>
<row><entry><literal>pc</literal></entry>
<entry><code><varname>pixels-per-inch</varname><indexterm><primary>variable</primary><secondary>pixels-per-inch</secondary></indexterm> div 6.0</code></entry>
</row>
<row><entry><literal>em</literal></entry>
<entry><code><varname>pixels-per-inch</varname><indexterm><primary>variable</primary><secondary>pixels-per-inch</secondary></indexterm> div 6.0</code></entry>
</row>
<row><entry><literal><link linkend="oldmeasure">barleycorn</link></literal></entry>
<entry><code><varname>pixels-per-inch</varname><indexterm><primary>variable</primary><secondary>pixels-per-inch</secondary></indexterm> div 3.0</code></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</figure>
<para>See also <xref linkend="units"/>.</para>
</refsection>
</refentry>

<refentry xml:id="v_user-title-properties"><indexterm><primary>variable</primary><secondary>user-title-properties</secondary></indexterm>
<?db filename="v_user-title-properties"?>
<refmeta>
<refentrytitle>$v:user-title-properties</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}user-title-properties</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:user-title-properties</refname>
<refpurpose>Controls how titles are formatted</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This variable contains user-supplied overrides to
<varname>v:title-properties</varname><indexterm><primary>variable</primary><secondary>v:title-properties</secondary></indexterm>. See that variable for more details.
</para>
</refsection>
</refentry>

<refentry xml:id="v_user-xref-properties"><indexterm><primary>variable</primary><secondary>user-xref-properties</secondary></indexterm>
<?db filename="v_user-xref-properties"?>
<refmeta>
<refentrytitle>$v:user-xref-properties</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}user-xref-properties</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:user-xref-properties</refname>
<refpurpose>Controls how cross-references are formatted</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This variable contains user-supplied overrides to
<varname>v:xref-properties</varname><indexterm><primary>variable</primary><secondary>v:xref-properties</secondary></indexterm>. See that variable for more details.
</para>
</refsection>
</refentry>

<refentry xml:id="v_verbatim-callouts"><indexterm><primary>variable</primary><secondary>verbatim-callouts</secondary></indexterm>
<?db filename="v_verbatim-callouts"?>
<refmeta>
<refentrytitle>$v:verbatim-callouts</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}verbatim-callouts</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:verbatim-callouts</refname>
<refpurpose>A list determining how callouts are processed</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This value is a sequence constructed automatically from the
<parameter>verbatim-callouts</parameter><indexterm><primary>param</primary><secondary>verbatim-callouts</secondary></indexterm> parameter.</para>
</refsection>
</refentry>

<refentry xml:id="v_verbatim-line-style"><indexterm><primary>variable</primary><secondary>verbatim-line-style</secondary></indexterm>
<?db filename="v_verbatim-line-style"?>
<refmeta>
<refentrytitle>$v:verbatim-line-style</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}verbatim-line-style</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:verbatim-line-style</refname>
<refpurpose>List of verbatim elements to be rendered in the line style</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The elements whose local names appear in this list will be
formatted using the line verbatim style by default.
For a discussion of verbatim elements and styles, see
<xref linkend="verbstyle"/>.</para>

<para>This list is
usually constructed from the <parameter>verbatim-line-style</parameter><indexterm><primary>param</primary><secondary>verbatim-line-style</secondary></indexterm> parameter.
</para>
</refsection>
</refentry>

<refentry xml:id="v_verbatim-number-every-nth"><indexterm><primary>variable</primary><secondary>verbatim-number-every-nth</secondary></indexterm>
<?db filename="v_verbatim-number-every-nth"?>
<refmeta>
<refentrytitle>$v:verbatim-number-every-nth</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}verbatim-number-every-nth</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:verbatim-number-every-nth</refname>
<refpurpose>Line numbering frequency</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When formatting verbatim environments with line numbers,
every <parameter>verbatim-number-every-nth</parameter><indexterm><primary>param</primary><secondary>verbatim-number-every-nth</secondary></indexterm> line is numbered.
</para>
<para>This value is
usually constructed from the <parameter>verbatim-number-every-nth</parameter><indexterm><primary>param</primary><secondary>verbatim-number-every-nth</secondary></indexterm> parameter.
</para>
</refsection>
</refentry>

<refentry xml:id="v_verbatim-number-first-line"><indexterm><primary>variable</primary><secondary>verbatim-number-first-line</secondary></indexterm>
<?db filename="v_verbatim-number-first-line"?>
<refmeta>
<refentrytitle>$v:verbatim-number-first-line</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}verbatim-number-first-line</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:verbatim-number-first-line</refname>
<refpurpose>Always number the first line of a verbatim listing?</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When formatting verbatim environments with line numbers,
the first line will be numbered (irrespective of the setting of
<varname>v:verbatim-number-every-nth</varname><indexterm><primary>variable</primary><secondary>v:verbatim-number-every-nth</secondary></indexterm> if this value
<glossterm>is true</glossterm>.
</para>
<para>This value is
usually constructed from the <parameter>verbatim-number-first-line</parameter><indexterm><primary>param</primary><secondary>verbatim-number-first-line</secondary></indexterm> parameter.
</para>
</refsection>
</refentry>

<refentry xml:id="v_verbatim-number-minlines"><indexterm><primary>variable</primary><secondary>verbatim-number-minlines</secondary></indexterm>
<?db filename="v_verbatim-number-minlines"?>
<refmeta>
<refentrytitle>$v:verbatim-number-minlines</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}verbatim-number-minlines</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:verbatim-number-minlines</refname>
<refpurpose>Shortest listing to number</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When formatting verbatim environments with line numbers,
environments less than
<parameter>verbatim-number-minlines</parameter><indexterm><primary>param</primary><secondary>verbatim-number-minlines</secondary></indexterm> in length will
not be numbered.
</para>
<para>This value is
usually constructed from the <parameter>verbatim-number-minlines</parameter><indexterm><primary>param</primary><secondary>verbatim-number-minlines</secondary></indexterm> parameter.
</para>
</refsection>
</refentry>

<refentry xml:id="v_verbatim-numbered-elements"><indexterm><primary>variable</primary><secondary>verbatim-numbered-elements</secondary></indexterm>
<?db filename="v_verbatim-numbered-elements"?>
<refmeta>
<refentrytitle>$v:verbatim-numbered-elements</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}verbatim-numbered-elements</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:verbatim-numbered-elements</refname>
<refpurpose>Identifies verbatim elements that should have line numbers</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>A list of the verbatim environments that should be numbered.
</para>
<para>This value is
usually constructed from the <parameter>verbatim-numbered-elements</parameter><indexterm><primary>param</primary><secondary>verbatim-numbered-elements</secondary></indexterm> parameter.
</para>
</refsection>
</refentry>

<refentry xml:id="v_verbatim-plain-style"><indexterm><primary>variable</primary><secondary>verbatim-plain-style</secondary></indexterm>
<?db filename="v_verbatim-plain-style"?>
<refmeta>
<refentrytitle>$v:verbatim-plain-style</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}verbatim-plain-style</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:verbatim-plain-style</refname>
<refpurpose>List of verbatim elements to be rendered in the plain style</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The elements whose local names appear in this list will be
formatted using the plain verbatim style by default.
For a discussion of verbatim elements and styles, see
<xref linkend="verbstyle"/>.</para>

<para>This list is
usually constructed from the <parameter>verbatim-plain-style</parameter><indexterm><primary>param</primary><secondary>verbatim-plain-style</secondary></indexterm> parameter.
</para>
</refsection>
</refentry>

<refentry xml:id="v_verbatim-properties"><indexterm><primary>variable</primary><secondary>verbatim-properties</secondary></indexterm>
<?db filename="v_verbatim-properties"?>
<refmeta>
<refentrytitle>$v:verbatim-properties</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}verbatim-properties</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:verbatim-properties</refname>
<refpurpose>Controls the verbatim properties of an element</refpurpose>
<refclass role="noinitializer">variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When processing a verbatim environment, this array of maps is consulted to
determine what properties apply to the verbatim environment. Most simple, global
customizations of verbatim environments can be achieved by setting the
<parameter>verbatim-line-style</parameter><indexterm><primary>param</primary><secondary>verbatim-line-style</secondary></indexterm>, <parameter>verbatim-plain-style</parameter><indexterm><primary>param</primary><secondary>verbatim-plain-style</secondary></indexterm>,
<parameter>verbatim-callouts</parameter><indexterm><primary>param</primary><secondary>verbatim-callouts</secondary></indexterm>, and
<parameter>verbatim-numbered-elements</parameter><indexterm><primary>param</primary><secondary>verbatim-numbered-elements</secondary></indexterm> parameters.
</para>
</refsection>
</refentry>

<refentry xml:id="v_verbatim-space"><indexterm><primary>variable</primary><secondary>verbatim-space</secondary></indexterm>
<?db filename="v_verbatim-space"?>
<refmeta>
<refentrytitle>$v:verbatim-space</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}verbatim-space</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:verbatim-space</refname>
<refpurpose>The space character to use when padding verbatim lines</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When a verbatim line has to be padded in order to get a callout to appear in
the correct column, this character will be used as the padding character.
For a discussion of verbatim elements and styles, see
<xref linkend="verbstyle"/>.
</para>
<para>This character is usually constructed from the
<parameter>verbatim-space</parameter><indexterm><primary>param</primary><secondary>verbatim-space</secondary></indexterm> parameter.
Unlike the <varname>verbatim-space</varname><indexterm><primary>variable</primary><secondary>verbatim-space</secondary></indexterm>, this variable must be a node not a string.
</para>
</refsection>
</refentry>

<refentry xml:id="v_verbatim-syntax-highlight-languages"><indexterm><primary>variable</primary><secondary>verbatim-syntax-highlight-languages</secondary></indexterm>
<?db filename="v_verbatim-syntax-highlight-languages"?>
<refmeta>
<refentrytitle>$v:verbatim-syntax-highlight-languages</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}verbatim-syntax-highlight-languages</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:verbatim-syntax-highlight-languages</refname>
<refpurpose>Languages for which syntax highlighting should be performed</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <parameter>verbatim-syntax-highlight-languages</parameter><indexterm><primary>param</primary><secondary>verbatim-syntax-highlight-languages</secondary></indexterm> is a single
string for the convenience of users. This variable contains the languages as a list.
</para>
</refsection>
</refentry>

<refentry xml:id="v_verbatim-syntax-highlight-options"><indexterm><primary>variable</primary><secondary>verbatim-syntax-highlight-options</secondary></indexterm>
<?db filename="v_verbatim-syntax-highlight-options"?>
<refmeta>
<refentrytitle>$v:verbatim-syntax-highlight-options</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}verbatim-syntax-highlight-options</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:verbatim-syntax-highlight-options</refname>
<refpurpose>Syntax highlighting options</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>If the <link xlink:href="https://pygments.org/">Pygments</link><indexterm>
<primary>Pygments</primary></indexterm><indexterm>
<primary>Syntax highlighting</primary><secondary>Pygments</secondary></indexterm>
syntax highlighter is applied, the
<varname>verbatim-syntax-highlight-options</varname><indexterm><primary>variable</primary><secondary>verbatim-syntax-highlight-options</secondary></indexterm> are applied.
</para>
<para>Three options are recognized:</para>
<variablelist>
<varlistentry><term><literal>language</literal></term>
<listitem>
<para>The programming language to use for syntax highlighting. This option is required.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>show-command</literal></term>
<listitem>
<para>If the <literal>show-command</literal> option is true (“1”, “yes”, or “true”),
then the <command>pygmentize</command> command will be printed. This is a debugging option.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>show-result</literal></term>
<listitem>
<para>If the <literal>show-result</literal> option is true (“1”, “yes”, or “true”),
then the string returned from <command>pygmentize</command> will be printed. This is a
debugging option.
</para>
</listitem>
</varlistentry>
</variablelist>

<note>
<para>Syntax highlighting with Pygments requires spawning an external
process for each highlighted environment. This can add significantly
to the processing time if there are many such environments.</para>
</note>
</refsection>
</refentry>

<refentry xml:id="v_verbatim-syntax-highlight-pygments-options"><indexterm><primary>variable</primary><secondary>verbatim-syntax-highlight-pygments-options</secondary></indexterm>
<?db filename="v_verbatim-syntax-highlight-pygments-options"?>
<refmeta>
<refentrytitle>$v:verbatim-syntax-highlight-pygments-options</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}verbatim-syntax-highlight-pygments-options</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:verbatim-syntax-highlight-pygments-options</refname>
<refpurpose>Pygments options</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>If the <link xlink:href="https://pygments.org/">Pygments</link><indexterm>
<primary>Pygments</primary></indexterm><indexterm>
<primary>Syntax highlighting</primary><secondary>Pygments</secondary></indexterm>
syntax highlighter is applied, the
<varname>verbatim-syntax-highlight-pygments-options</varname><indexterm><primary>variable</primary><secondary>verbatim-syntax-highlight-pygments-options</secondary></indexterm> are applied.
</para>
<para>Each key/value pair in the map will be passed to <command>pygmentize</command>
as a <literal>-P<replaceable>key</replaceable>=<replaceable>value</replaceable></literal>
option.</para>
</refsection>
</refentry>

<refentry xml:id="v_verbatim-table-style"><indexterm><primary>variable</primary><secondary>verbatim-table-style</secondary></indexterm>
<?db filename="v_verbatim-table-style"?>
<refmeta>
<refentrytitle>$v:verbatim-table-style</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}verbatim-table-style</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:verbatim-table-style</refname>
<refpurpose>List of verbatim elements to be rendered in the table style</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The elements whose local names appear in this list will be
formatted using the line verbatim style by default.
For a discussion of verbatim elements and styles, see
<xref linkend="verbstyle"/>.</para>

<para>This list is
usually constructed from the <parameter>verbatim-table-style</parameter><indexterm><primary>param</primary><secondary>verbatim-table-style</secondary></indexterm> parameter.
</para>
</refsection>
</refentry>

<refentry xml:id="v_VERSION"><indexterm><primary>variable</primary><secondary>VERSION</secondary></indexterm>
<?db filename="v_VERSION"?>
<refmeta>
<refentrytitle>$v:VERSION</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}VERSION</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:VERSION</refname>
<refpurpose>The stylesheet version</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This variable holds the version number of the stylesheets.</para>
</refsection>
</refentry>

<refentry xml:id="v_VERSION-ID"><indexterm><primary>variable</primary><secondary>VERSION-ID</secondary></indexterm>
<?db filename="v_VERSION-ID"?>
<refmeta>
<refentrytitle>$v:VERSION-ID</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}VERSION-ID</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:VERSION-ID</refname>
<refpurpose>A unique version identifier</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Generally speaking the <varname>VERSION</varname><indexterm><primary>variable</primary><secondary>VERSION</secondary></indexterm> is sufficient to
identify the stylesheets. The <varname>VERSION-ID</varname><indexterm><primary>variable</primary><secondary>VERSION-ID</secondary></indexterm> adds a unique identifier
derived from the latest
<link xlink:href="https://en.wikipedia.org/wiki/Git">git</link>
commit.</para>
</refsection>
</refentry>

<refentry xml:id="v_xref-properties"><indexterm><primary>variable</primary><secondary>xref-properties</secondary></indexterm>
<?db filename="v_xref-properties"?>
<refmeta>
<refentrytitle>$v:xref-properties</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/variables}xref-properties</refmiscinfo>
</refmeta>
<refnamediv>
<refname>$v:xref-properties</refname>
<refpurpose>Controls how cross-references are formatted</refpurpose>
<refclass>variable</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Cross-references, like <link linkend="v_title-properties">title properties</link>,
are complicated. They can occur almost anywhere and several styles are possible.
</para>

<figure xml:id="fig.xref-properties-1">
<title>Cross-reference Properties (numbered)</title>
<mediaobject>
<alt>Illustration of cross-reference properties in a numbered section reference</alt>
<imageobject>
<imagedata fileref="media/xref-properties-1.png"/>
</imageobject>
<textobject>
<para>This image shows the cross-reference “Section 3.4, Changing the print head”
identifying “Section” as the label, “3.4” as the number, and “, ” as
number separator and “Changing the print head” as the title.</para>
</textobject>
</mediaobject>
</figure>

<para>For documents with numbered sections, a style such as the one shown in
<xref linkend="fig.xref-properties-1"/> is common. Here the label, number, and title 
are sufficient.</para>

<figure xml:id="fig.xref-properties-2">
<title>Cross-reference Properties (contextual)</title>
<mediaobject>
<alt>Illustration of cross-reference properties in an unnumbered section reference</alt>
<imageobject>
<imagedata fileref="media/xref-properties-2.png"/>
</imageobject>
<textobject>
<para>This image shows the title “Section 3.4 Changing the print head”
identifying “Section” as the label, “3.4” as the number, and “3.” as
the inherited number.</para>
</textobject>
</mediaobject>
</figure>

<para>For documents without section numbers, a different approach is required.
In <xref linkend="fig.xref-properties-2"/>, we see how a prefix (which can be literal text
or a key into a localization) precedes the title. If an inherit reference is defined, the
cross reference will include a reference to that element as well. A separator can be placed
between them. If the format for the inherited reference also specifies an inherited reference,
the process will continue.</para>

</refsection>
</refentry>

</reference>
<reference version="5.0" xml:id="functions">
<info>
<?db filename="functions"?>
<title>Function reference</title>
</info>

<refentry xml:id="f_mediaobject-viewport"><indexterm><primary>function</primary><secondary>mediaobject-viewport</secondary></indexterm>
<?db filename="f_mediaobject-viewport"?>
<refmeta>
<refentrytitle>f:mediaobject-viewport</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}mediaobject-viewport#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:mediaobject-viewport</refname>
<refpurpose>Construct the “viewport” for media objects</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>If your DocBook markup for media objects includes any of the size or scaling
adjustment attributes, this function is called to construct the HTML markup that
implements those adjustments.</para>
</refsection>
</refentry>

<refentry xml:id="f_absolute-length"><indexterm><primary>function</primary><secondary>absolute-length</secondary></indexterm>
<?db filename="f_absolute-length"?>
<refmeta>
<refentrytitle>f:absolute-length</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}absolute-length#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:absolute-length</refname>
<refpurpose>Returns the absolute length of a unit of measurement</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>For a given unit of measurement, returns the absolute length in terms
of pixels. For a discussion of units, see <xref linkend="units"/>.
</para>
<para>See also
<varname>pixels-per-inch</varname><indexterm><primary>variable</primary><secondary>pixels-per-inch</secondary></indexterm>,
<varname>default-length-magnitude</varname><indexterm><primary>variable</primary><secondary>default-length-magnitude</secondary></indexterm>, and
<varname>default-length-unit</varname><indexterm><primary>variable</primary><secondary>default-length-unit</secondary></indexterm>.
</para>
</refsection>
</refentry>

<refentry xml:id="f_attributes"><indexterm><primary>function</primary><secondary>attributes</secondary></indexterm>
<?db filename="f_attributes"?>
<refmeta>
<refentrytitle>f:attributes</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}attributes#2</refmiscinfo>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}attributes#4</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:attributes</refname>
<refpurpose>Returns the attribute that apply to an output element</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Most output elements have attributes: any <tag class="attribute">xml:id</tag>
attributes in the source are reflected in the output as
<code>id</code> attributes, most elements get a <code>class</code>
attribute, etc. The <function>f:attributes</function> function is called to determine
what those attributes should be.</para>
<para>In practice, the way this usually works is the element is processed in the
<code role="mode">m:attributes</code> mode and that template calls <function>f:attributes</function>
to generate the actual attribute nodes.</para>
</refsection>
</refentry>

<refentry xml:id="f_cals-colsep"><indexterm><primary>function</primary><secondary>cals-colsep</secondary></indexterm>
<?db filename="f_cals-colsep"?>
<refmeta>
<refentrytitle>f:cals-colsep</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}cals-colsep#3</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:cals-colsep</refname>
<refpurpose>Returns the “colsep” value associated with a CALS table cell</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The column separator, or “colsep”, associated with a CALS table cell
depends on a variety of factors: <tag>colspec</tag>, and <tag>spanspec</tag>
elements as well as the attributes on the cell itself and its ancestors.</para>
<para>This function returns the value that applies to the specified cell.</para>
</refsection>
</refentry>

<refentry xml:id="f_cals-rowsep"><indexterm><primary>function</primary><secondary>cals-rowsep</secondary></indexterm>
<?db filename="f_cals-rowsep"?>
<refmeta>
<refentrytitle>f:cals-rowsep</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}cals-rowsep#3</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:cals-rowsep</refname>
<refpurpose>Returns the “rowsep” value associated with a CALS table cell</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The row separator, or “rowsep”, associated with a CALS table cell
depends on a variety of factors: <tag>colspec</tag>, and <tag>spanspec</tag>
elements as well as the attributes on the cell itself and its ancestors.</para>
<para>This function returns the value that applies to the specified cell.</para>
</refsection>
</refentry>

<refentry xml:id="f_check-gentext"><indexterm><primary>function</primary><secondary>check-gentext</secondary></indexterm>
<?db filename="f_check-gentext"?>
<refmeta>
<refentrytitle>f:check-gentext</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}check-gentext#3</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:check-gentext</refname>
<refpurpose>Returns generated text</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Like <function>f:gentext</function>, this function returns the
generated text appropriate for its arguments. However, if there is no
appropriate generated text, this function returns an empty sequence
<emphasis>without</emphasis> generating any warning messages.
</para>
</refsection>
</refentry>

<refentry xml:id="f_chunk"><indexterm><primary>function</primary><secondary>chunk</secondary></indexterm>
<?db filename="f_chunk"?>
<refmeta>
<refentrytitle>f:chunk</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}chunk#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:chunk</refname>
<refpurpose>Returns chunking attributes</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This function returns the
<tag class="attribute">db-chunk</tag> and perhaps other chunking-related attributes
for the given node. </para>
</refsection>
</refentry>

<refentry xml:id="f_chunk-filename"><indexterm><primary>function</primary><secondary>chunk-filename</secondary></indexterm>
<?db filename="f_chunk-filename"?>
<refmeta>
<refentrytitle>f:chunk-filename</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}chunk-filename#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:chunk-filename</refname>
<refpurpose>Returns the filename to use for a particular chunk</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When chunking, see <xref linkend="chunking"/>, this function is
called to determine the filename for a chunk. The default implementation considers
relevant <tag class="pi">db</tag><indexterm><primary>db processing instruction</primary>
</indexterm> processing instructions
(<literal>filename</literal><indexterm>
<primary>db processing instruction</primary>
<secondary>annotations pseudo-attribute</secondary>
</indexterm>,
<literal>href</literal><indexterm>
<primary>db processing instruction</primary>
<secondary>annotations pseudo-attribute</secondary>
</indexterm>, and
<literal>basename</literal><indexterm>
<primary>db processing instruction</primary>
<secondary>annotations pseudo-attribute</secondary>
</indexterm> pseudo-attributes) as well as the generated ID of the element.
</para>
</refsection>
</refentry>

<refentry xml:id="f_chunk-title"><indexterm><primary>function</primary><secondary>chunk-title</secondary></indexterm>
<?db filename="f_chunk-title"?>
<refmeta>
<refentrytitle>f:chunk-title</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}chunk-title#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:chunk-title</refname>
<refpurpose>Returns the title of a chunk</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When the title of a neighboring chunk is required (for header or
footer navigation, for example), this function can be used to obtain
the title of that chunk.</para>
<para>This function must return the HTML-formatted title, not the DocBook title.
</para>
</refsection>
</refentry>

<refentry xml:id="f_css-length"><indexterm><primary>function</primary><secondary>css-length</secondary></indexterm>
<?db filename="f_css-length"?>
<refmeta>
<refentrytitle>f:css-length</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}css-length#2</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:css-length</refname>
<refpurpose>Returns a length in the format of a CSS property</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Returns the CSS property specified with the corresponding length, if the length
exists. Returns the empty sequence otherwise.</para>
</refsection>
</refentry>

<refentry xml:id="f_css-property"><indexterm><primary>function</primary><secondary>css-property</secondary></indexterm>
<?db filename="f_css-property"?>
<refmeta>
<refentrytitle>f:css-property</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}css-property#2</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:css-property</refname>
<refpurpose>Returns a CSS property for a given value</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>If the specified value exists, a string formatted as a CSS
property is returned. If the value doesn’t exist, an empty sequence is
returned.</para>
</refsection>
</refentry>

<refentry xml:id="f_date-format"><indexterm><primary>function</primary><secondary>date-format</secondary></indexterm>
<?db filename="f_date-format"?>
<refmeta>
<refentrytitle>f:date-format</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}date-format#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:date-format</refname>
<refpurpose>Returns the format string for a date</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Dates may be stored in a variety of formats and the <tag>pubdate</tag>
element even allows inline markup. The <function>f:date-format</function> function
determines how a date will be formatted:</para>
<itemizedlist>
<listitem>
<para>If the date contains embedded markup, the special value
“<literal>apply-templates</literal>” is returned to indicate that string formatting
isn’t appropriate.</para>
</listitem>
<listitem>
<para>If the date conforms to an <biblioref linkend="iso8601"/> date, the
<parameter>date-date-format</parameter><indexterm><primary>param</primary><secondary>date-date-format</secondary></indexterm> string is returned.</para>
</listitem>
<listitem>
<para>If the date conforms to an <biblioref linkend="iso8601"/> dateTime, the
<parameter>date-dateTime-format</parameter><indexterm><primary>param</primary><secondary>date-dateTime-format</secondary></indexterm> string is returned.</para>
</listitem>
<listitem>
<para>If the date does not conform to either of those date formats,
“<literal>apply-templates</literal>” is returned.</para>
</listitem>
</itemizedlist>

<para>If the date conforms to a date or dateTime, the author may override
the format string by providing a
<tag class="pi">db</tag><indexterm><primary>db processing instruction</primary>
</indexterm> processing instruction with a
<literal>date-format</literal><indexterm>
<primary>db processing instruction</primary>
<secondary>date-format pseudo-attribute</secondary>
</indexterm> pseudo-attribute.</para>

<para><xref linkend="ex-date-format"/> shows an example of
several dates that may be formatted in more familiar forms.</para>

<example xml:id="ex-date-format">
<title>Several dates in ISO 8601 formats</title>
<programlisting language="xml" linenumbering="unnumbered">
&lt;para&gt;The Unix epoch begins at
&lt;date&gt;1970-01-01T00:00:00Z&lt;/date&gt;.
Grace Hopper was born on &lt;date&gt;1906-12-09&lt;/date&gt;.
That was a &lt;date&gt;&lt;?db date-format="[F]"?&gt;1906-12-09&lt;/date&gt;.
I was born on a &lt;date&gt;Friday&lt;/date&gt;.&lt;/para&gt;
</programlisting>
</example>

<para>With default formats, these are formatted as shown:</para>

<informalfigure xml:id="fig-date-format">
<para>The Unix epoch begins at
<date>1970-01-01T00:00:00Z</date>.
Grace Hopper was born on <date>1906-12-09</date>.
That was a <date><?db date-format="[F]"?>1906-12-09</date>.
I was born on a <date>Friday</date>.</para>
</informalfigure>

</refsection>
</refentry>

<refentry xml:id="f_empty-length"><indexterm><primary>function</primary><secondary>empty-length</secondary></indexterm>
<?db filename="f_empty-length"?>
<refmeta>
<refentrytitle>f:empty-length</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}empty-length#0</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:empty-length</refname>
<refpurpose>Returns a map that represents an empty length</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Lengths are compound objects. Lengths consist of
a magnitude (a number) and a unit: 3 inches, for example, or 11.9
<phrase xml:id="barleycorn">barleycorns</phrase> in the case of absolute
lengths. For relative lengths, the unit is something relative like percent.</para>
<para>These are represented as maps internally and <function>f:empty-length</function>
returns a length with no magnitude or units.
</para>
<annotation role="wide tall" condition="$annotation-style=javascript" annotates="barleycorn">
<para>Yes, that’s a real unit. It’s equal to ⅓ of an inch. I’ll leave
it <link xlink:href="https://en.wikipedia.org/wiki/Barleycorn_(unit)">to
Wikipedia</link> to explain the details. Just looking at the chart of
imperial units makes me want to add them all!</para>

<mediaobject>
<alt>English imperial lengths</alt>
<imageobject>
<imagedata fileref="media/English_Length_Units_Graph.svg"/>
<imagedata fileref="media/English_Length_Units_Graph.png"/>
</imageobject>
<textobject>
<para>A graph showing the derivations of English imperial measurements: 12 inches
to the foot, 3 feet to the yard, etc.</para>
</textobject>
</mediaobject>

<para>Image credit: 42CrMo4, Christoph Päper</para>
</annotation>
</refsection>
</refentry>

<refentry xml:id="f_equal-lengths"><indexterm><primary>function</primary><secondary>equal-lengths</secondary></indexterm>
<?db filename="f_equal-lengths"?>
<refmeta>
<refentrytitle>f:equal-lengths</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}equal-lengths#2</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:equal-lengths</refname>
<refpurpose>Returns true if two lengths are equal</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Lengths (see <xref linkend="units"/>) are stored in maps and so are not
directly comparable. This function returns true if two lengths are equal.</para>
</refsection>
</refentry>

<refentry xml:id="f_generate-id"><indexterm><primary>function</primary><secondary>generate-id</secondary></indexterm>
<?db filename="f_generate-id"?>
<refmeta>
<refentrytitle>f:generate-id</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}generate-id#1</refmiscinfo>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}generate-id#2</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:generate-id</refname>
<refpurpose>Generate a unique identifier for an element</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This function returns a unique ID for an element. The ID is
generated from the names of the ancestors and preceding siblings of
the element. This value will be consistent across different
transformations as long as the ancestors and preceding siblings remain
unchanged.</para>
<para>If <code>use-xml-id</code> is true
and there’s an element with a <tag class="attribute">xml:id</tag> attribute among
the ancestors, the unique identifier is rooted at that element, rather
than traversing all the way to the root of the document.</para>
<para>Disabling this feature by setting <code>use-xml-id</code>
to false allows for the creation of globally unique IDs with
<function>f:unique-id</function>.</para>
</refsection>
</refentry>

<refentry xml:id="f_gentext"><indexterm><primary>function</primary><secondary>gentext</secondary></indexterm>
<?db filename="f_gentext"?>
<refmeta>
<refentrytitle>f:gentext</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}gentext#2</refmiscinfo>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}gentext#3</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:gentext</refname>
<refpurpose>Returns generated text</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Returns the generated text associated with the specified key in
the specified context for the specified node. If key is not provided,
the element name of the node is used.</para>
<para>For example, if the <function>f:language</function> of the
<code>$node</code> is English, then in the “title” context, the
generated text for the key “tableofcontents” is “Table of Contents”.
If the language is French, then the generated text is
“Table des matières”.</para>
<para>The contexts and the keys are defined in the locale files.</para>
</refsection>
</refentry>

<refentry xml:id="f_gentext-letters"><indexterm><primary>function</primary><secondary>gentext-letters</secondary></indexterm>
<?db filename="f_gentext-letters"?>
<refmeta>
<refentrytitle>f:gentext-letters</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}gentext-letters#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:gentext-letters</refname>
<refpurpose>Returns the letters for the in-scope language</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This function works calls <function>f:language</function> on the specified
node and then calls <function>f:gentext-letters-for-language</function> with that
language.
</para>
</refsection>
</refentry>

<refentry xml:id="f_gentext-letters-for-language"><indexterm><primary>function</primary><secondary>gentext-letters-for-language</secondary></indexterm>
<?db filename="f_gentext-letters-for-language"?>
<refmeta>
<refentrytitle>f:gentext-letters-for-language</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}gentext-letters-for-language#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:gentext-letters-for-language</refname>
<refpurpose>Returns the letters for a language</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Returns a language-specific list of letters. These are used, for example,
to construct the divisions in an index.</para>
</refsection>
</refentry>

<refentry xml:id="f_highlight-verbatim"><indexterm><primary>function</primary><secondary>highlight-verbatim</secondary></indexterm>
<?db filename="f_highlight-verbatim"?>
<refmeta>
<refentrytitle>f:highlight-verbatim</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}highlight-verbatim#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:highlight-verbatim</refname>
<refpurpose>Syntax highlight verbatim element?</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Returns true if the specified verbatim environment should have
syntax highlighting applied to it. This depends on the
<tag class="attribute">language</tag> specified on the environment and the
<parameter>verbatim-syntax-highlight-languages</parameter><indexterm><primary>param</primary><secondary>verbatim-syntax-highlight-languages</secondary></indexterm> parameter.</para>
</refsection>
</refentry>

<refentry xml:id="f_href"><indexterm><primary>function</primary><secondary>href</secondary></indexterm>
<?db filename="f_href"?>
<refmeta>
<refentrytitle>f:href</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}href#2</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:href</refname>
<refpurpose>Returns the href link to a node</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This function generates a value for an HTML <code>href</code> attribute
at the position of the context that will link to the node.
</para>
</refsection>
</refentry>

<refentry xml:id="f_id"><indexterm><primary>function</primary><secondary>id</secondary></indexterm>
<?db filename="f_id"?>
<refmeta>
<refentrytitle>f:id</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}id#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:id</refname>
<refpurpose>Returns an ID for the element</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This function returns the ID of the element. If the element has
an <tag class="attribute">xml:id</tag> attribute, the value of that attribute is returned.
Otherwise, the function constructs a unique ID value for the element.</para>
<para>The simplest way to construct a unique ID is with the <function>f:generate-id</function>
function. However, those values are only unique within the context of a single transformation
and tend to vary over time. This can break anchors used in published documents and leads
to spurious differences between documents.</para>
<para>The stylesheets generate their own unique IDs with <function>f:generate-id</function>.
</para>
</refsection>
</refentry>

<refentry xml:id="f_intra-number-separator"><indexterm><primary>function</primary><secondary>intra-number-separator</secondary></indexterm>
<?db filename="f_intra-number-separator"?>
<refmeta>
<refentrytitle>f:intra-number-separator</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}intra-number-separator#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:intra-number-separator</refname>
<refpurpose>Return the intra-number separator</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When a compound number appears in a title, this function is used to obtain
the intra number separator. The most common separator is “.” which results in numbers
such as “Section 3.4”. If the function returned “*”, the section title would
be rendered as “Section 3*4”.
</para>
</refsection>
</refentry>

<refentry xml:id="f_is-empty-length"><indexterm><primary>function</primary><secondary>is-empty-length</secondary></indexterm>
<?db filename="f_is-empty-length"?>
<refmeta>
<refentrytitle>f:is-empty-length</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}is-empty-length#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:is-empty-length</refname>
<refpurpose>Tests if a length is empty</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Returns true if the length is empty.
For a discussion of units and lengths, see <xref linkend="units"/>.
</para>
</refsection>
</refentry>

<refentry xml:id="f_is-true"><indexterm><primary>function</primary><secondary>is-true</secondary></indexterm>
<?db filename="f_is-true"?>
<refmeta>
<refentrytitle>f:is-true</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}is-true#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:is-true</refname>
<refpurpose>Determines if a given value represents “true”</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>There are several conventions for indicating “true” or “false”.
XSLT uses the words “yes” and “no” in many places. The XML Schema data
type for <type>xs:boolean</type> uses “true” and “false” but also “1”
and “0”.</para>
<para>The <function>f:is-true</function> function returns
<code>true()</code> for any of “<code>true()</code>”, “yes”, “true”,
or a value that can be cast to an integer if that integer is not
zero. It returns
<code>false()</code>
for any of “<code>false()</code>”, “no”, “false”, a value that can be
cast to an integer that is zero, or the empty sequence.</para>
<para>It reports an error for any other value and returns “<code>true()</code>”.
</para>
</refsection>
</refentry>

<refentry xml:id="f_l10n-language"><indexterm><primary>function</primary><secondary>l10n-language</secondary></indexterm>
<?db filename="f_l10n-language"?>
<refmeta>
<refentrytitle>f:l10n-language</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}l10n-language#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:l10n-language</refname>
<refpurpose>Returns the best matching localization language</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This function returns the localization language that best
matches the language of the <code>$target</code> node. The default language
will be returned if there is no localization available for that language.</para>
</refsection>
</refentry>

<refentry xml:id="f_label-separator"><indexterm><primary>function</primary><secondary>label-separator</secondary></indexterm>
<?db filename="f_label-separator"?>
<refmeta>
<refentrytitle>f:label-separator</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}label-separator#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:label-separator</refname>
<refpurpose>Returns the label separator</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The label separator separates a label from the number or title that follows it.</para>
</refsection>
</refentry>

<refentry xml:id="f_language"><indexterm><primary>function</primary><secondary>language</secondary></indexterm>
<?db filename="f_language"?>
<refmeta>
<refentrytitle>f:language</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}language#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:language</refname>
<refpurpose>Returns the language associated with an element</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Returns the value of the nearest in-scope <tag class="attribute">xml:lang</tag> attribute
or <parameter>default-language</parameter><indexterm><primary>param</primary><secondary>default-language</secondary></indexterm> if no such attribute exists.
</para>
</refsection>
</refentry>

<refentry xml:id="f_length-string"><indexterm><primary>function</primary><secondary>length-string</secondary></indexterm>
<?db filename="f_length-string"?>
<refmeta>
<refentrytitle>f:length-string</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}length-string#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:length-string</refname>
<refpurpose>Returns the string representation of a length</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>For a given length (see <xref linkend="units"/>), returns the relative
or absolute length formatted as a string. Relative lengths are formatted
as the length followed by a literal “<literal>*</literal>” (e.g., “3*”). Absolute lengths
are formatted as the length followed by the unit (e.g., “2.54cm”).
</para>
</refsection>
</refentry>

<refentry xml:id="f_length-units"><indexterm><primary>function</primary><secondary>length-units</secondary></indexterm>
<?db filename="f_length-units"?>
<refmeta>
<refentrytitle>f:length-units</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}length-units#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:length-units</refname>
<refpurpose>Returns the units associated with a length</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>For a given length (see <xref linkend="units"/>), returns the units
associated with the length. Returns an empty sequence for relative lengths.</para>
</refsection>
</refentry>

<refentry xml:id="f_locales"><indexterm><primary>function</primary><secondary>locales</secondary></indexterm>
<?db filename="f_locales"?>
<refmeta>
<refentrytitle>f:locales</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}locales#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:locales</refname>
<refpurpose>Returns the locales detected in the document</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This function returns the locales (languages) detected in the document.
It always returns the <varname>default-language</varname><indexterm><primary>variable</primary><secondary>default-language</secondary></indexterm> and “<code>en</code>” as well.
This function replaces the <code>$v:locales</code> variable.</para>
</refsection>
</refentry>

<refentry xml:id="f_make-length"><indexterm><primary>function</primary><secondary>make-length</secondary></indexterm>
<?db filename="f_make-length"?>
<refmeta>
<refentrytitle>f:make-length</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}make-length#1</refmiscinfo>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}make-length#2</refmiscinfo>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}make-length#3</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:make-length</refname>
<refpurpose>Construct a length from constituent parts</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>These functions construct a length (see <xref linkend="units"/>) from 
either a relative magnitude, an absolute magnitude and a unit, or 
both.
</para>
</refsection>
</refentry>

<refentry xml:id="f_number-separator"><indexterm><primary>function</primary><secondary>number-separator</secondary></indexterm>
<?db filename="f_number-separator"?>
<refmeta>
<refentrytitle>f:number-separator</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}number-separator#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:number-separator</refname>
<refpurpose>Returns the number separator</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The number separator separates a number (in a title) from the
title that follows it.</para>
</refsection>
</refentry>

<refentry xml:id="f_object-align"><indexterm><primary>function</primary><secondary>object-align</secondary></indexterm>
<?db filename="f_object-align"?>
<refmeta>
<refentrytitle>f:object-align</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}object-align#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:object-align</refname>
<refpurpose>Returns the alignment of a media object</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>By default, this function simply returns the value of the object’s
<tag class="attribute">align</tag> attribute.</para>
</refsection>
</refentry>

<refentry xml:id="f_object-contentheight"><indexterm><primary>function</primary><secondary>object-contentheight</secondary></indexterm>
<?db filename="f_object-contentheight"?>
<refmeta>
<refentrytitle>f:object-contentheight</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}object-contentheight#2</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:object-contentheight</refname>
<refpurpose>Returns the content height of an object</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Returns the content height, for reasons of historical accident,
in the <tag class="attribute">contentdepth</tag> attribute. This function returns the
height of an object as a length (see <xref linkend="units"/>), if it
has one. If the height is specified as a percentage, and the <glossterm>intrinsic size</glossterm>
of the object is known, the an absolute length equal to that percentage of the
intrinsic size is returned.</para>

<para>If <parameter>image-ignore-scaling</parameter><indexterm><primary>param</primary><secondary>image-ignore-scaling</secondary></indexterm> is true, or no
<tag class="attribute">contentdepth</tag> is specified for the object, the empty sequence is
returned.</para>
</refsection>
</refentry>

<refentry xml:id="f_object-contentwidth"><indexterm><primary>function</primary><secondary>object-contentwidth</secondary></indexterm>
<?db filename="f_object-contentwidth"?>
<refmeta>
<refentrytitle>f:object-contentwidth</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}object-contentwidth#2</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:object-contentwidth</refname>
<refpurpose>Returns the content width of an object</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Returns the content width. This function returns the
width of an object as a length (see <xref linkend="units"/>), if it
has one. If the width is specified as a percentage, and the <glossterm>intrinsic size</glossterm>
of the object is known, the an absolute length equal to that percentage of the
intrinsic size is returned.</para>

<para>If <parameter>image-ignore-scaling</parameter><indexterm><primary>param</primary><secondary>image-ignore-scaling</secondary></indexterm> is true, or no
<tag class="attribute">contentwidth</tag> is specified for the object, the empty
sequence is returned.</para>
</refsection>
</refentry>

<refentry xml:id="f_object-height"><indexterm><primary>function</primary><secondary>object-height</secondary></indexterm>
<?db filename="f_object-height"?>
<refmeta>
<refentrytitle>f:object-height</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}object-height#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:object-height</refname>
<refpurpose>Returns the height (depth) of a <tag>mediaobject</tag></refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The height of a <tag>mediaobject</tag> is specified, for reasons of historical
accident, in the <tag class="attribute">depth</tag> attribute. This function returns the
height of an object as a length (see <xref linkend="units"/>), if it has one.
If <parameter>image-ignore-scaling</parameter><indexterm><primary>param</primary><secondary>image-ignore-scaling</secondary></indexterm> is true, or no <tag class="attribute">depth</tag>
is specified for the object, the empty sequence is returned.</para>
</refsection>
</refentry>

<refentry xml:id="f_object-properties"><indexterm><primary>function</primary><secondary>object-properties</secondary></indexterm>
<?db filename="f_object-properties"?>
<refmeta>
<refentrytitle>f:object-properties</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}object-properties#1</refmiscinfo>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}object-properties#2</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:object-properties</refname>
<refpurpose>Returns the properties of an object</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>If the <link linkend="extensions">extension functions</link>
are available, the stylesheets will interrogate images for their
properties. The goal is to return, at a minimum, the height and width
of the image. This is used to compute viewport and scaling factors.
If the image metadata extension is available, then considerably more information
my be returned in the map.
</para>
<para>
For example, the image metadata properties of the Amaryllis photograph
in <xref linkend="fig.amaryllis"/> are:</para>

<?guide-properties-as-table media/amaryllis.jpg?>

<figure xml:id="fig.amaryllis">
<title>An amaryllis</title>
<mediaobject>
<alt>A photograph of an amaryllis</alt>
<imageobject>
<imagedata fileref="media/amaryllis.jpg"/>
</imageobject>
<textobject>
<para>Several rich, red amaryllis blossoms on a black
background.</para>
</textobject>
</mediaobject>
</figure>
</refsection>
</refentry>

<refentry xml:id="f_object-scale"><indexterm><primary>function</primary><secondary>object-scale</secondary></indexterm>
<?db filename="f_object-scale"?>
<refmeta>
<refentrytitle>f:object-scale</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}object-scale#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:object-scale</refname>
<refpurpose>Returns the scaling factor for an object</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Returns the scaling factor for an object. Scaling only applies if
<parameter>image-ignore-scaling</parameter><indexterm><primary>param</primary><secondary>image-ignore-scaling</secondary></indexterm> is false and the object has a
<tag class="attribute">scale</tag> attribute.
</para>
</refsection>
</refentry>

<refentry xml:id="f_object-scalefit"><indexterm><primary>function</primary><secondary>object-scalefit</secondary></indexterm>
<?db filename="f_object-scalefit"?>
<refmeta>
<refentrytitle>f:object-scalefit</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}object-scalefit#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:object-scalefit</refname>
<refpurpose>Scale object to fit?</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This function determines whether or not an object should be scaled
to fit its container.
</para>
</refsection>
</refentry>

<refentry xml:id="f_object-valign"><indexterm><primary>function</primary><secondary>object-valign</secondary></indexterm>
<?db filename="f_object-valign"?>
<refmeta>
<refentrytitle>f:object-valign</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}object-valign#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:object-valign</refname>
<refpurpose>Returns the vertical alignment of a media object</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>By default, this function simply returns the value of the object’s
<tag class="attribute">valign</tag> attribute. If it doesn’t have a
<tag class="attribute">valign</tag> attribute, the value “<literal>middle</literal>” is returned, because
that’s what previous versions of stylesheets for DocBook did.
</para>
</refsection>
</refentry>

<refentry xml:id="f_object-width"><indexterm><primary>function</primary><secondary>object-width</secondary></indexterm>
<?db filename="f_object-width"?>
<refmeta>
<refentrytitle>f:object-width</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}object-width#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:object-width</refname>
<refpurpose>Returns the width of a <tag>mediaobject</tag></refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This function returns the
width of an object as a length (see <xref linkend="units"/>), if it has one.
If <parameter>image-ignore-scaling</parameter><indexterm><primary>param</primary><secondary>image-ignore-scaling</secondary></indexterm> is true, or no <tag class="attribute">width</tag>
is specified for the object, the empty length is returned.</para>
</refsection>
</refentry>

<refentry xml:id="f_orderedlist-item-numeration"><indexterm><primary>function</primary><secondary>orderedlist-item-numeration</secondary></indexterm>
<?db filename="f_orderedlist-item-numeration"?>
<refmeta>
<refentrytitle>f:orderedlist-item-numeration</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}orderedlist-item-numeration#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:orderedlist-item-numeration</refname>
<refpurpose>Returns the item numeration format for an ordered list</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Computes the numeration for the specified list item.
See <parameter>orderedlist-item-numeration</parameter><indexterm><primary>param</primary><secondary>orderedlist-item-numeration</secondary></indexterm>.</para>
</refsection>
</refentry>

<refentry xml:id="f_orderedlist-item-number"><indexterm><primary>function</primary><secondary>orderedlist-item-number</secondary></indexterm>
<?db filename="f_orderedlist-item-number"?>
<refmeta>
<refentrytitle>f:orderedlist-item-number</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}orderedlist-item-number#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:orderedlist-item-number</refname>
<refpurpose>Returns the item number of an item in an ordered list</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Returns the item number of a list item. This is always an integer, even if it will
be formatted as a letter, roman numeral, or other symbol. For nested lists, this function
returns the fully qualified item number. For example, for the second item in the fourth item in the
third item of a list, it will return <literal>(2, 4, 3)</literal>.</para>
</refsection>
</refentry>

<refentry xml:id="f_orderedlist-startingnumber"><indexterm><primary>function</primary><secondary>orderedlist-startingnumber</secondary></indexterm>
<?db filename="f_orderedlist-startingnumber"?>
<refmeta>
<refentrytitle>f:orderedlist-startingnumber</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}orderedlist-startingnumber#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:orderedlist-startingnumber</refname>
<refpurpose>Returns the starting number of an ordered list</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>In most <tag>orderedlist</tag> elements, the first item in the list
is item number “1”. However, the <tag class="attribute">startingnumber</tag> attribute can specify
a different initial number and, in the case of continued lists, the starting number
depends on the ending number of the preceding list.</para>
<para>The <function>f:orderedlist-startingnumber</function> returns the number
of the first list item in an ordered list.</para>
</refsection>
</refentry>

<refentry xml:id="f_parse-length"><indexterm><primary>function</primary><secondary>parse-length</secondary></indexterm>
<?db filename="f_parse-length"?>
<refmeta>
<refentrytitle>f:parse-length</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}parse-length#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:parse-length</refname>
<refpurpose>Parse a string into a length</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This function parses a string such as “4in” or “3.14cm” or “50%”
into a length. It will fall back to a distance of the
<parameter>default-length-magnitude</parameter><indexterm><primary>param</primary><secondary>default-length-magnitude</secondary></indexterm> and
<parameter>default-length-unit</parameter><indexterm><primary>param</primary><secondary>default-length-unit</secondary></indexterm> if the string cannot be parsed
as a length.
</para>
</refsection>
</refentry>

<refentry xml:id="f_pi"><indexterm><primary>function</primary><secondary>pi</secondary></indexterm>
<?db filename="f_pi"?>
<refmeta>
<refentrytitle>f:pi</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}pi#2</refmiscinfo>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}pi#3</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:pi</refname>
<refpurpose>Returns DocBook processing-instruction property values</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Several DocBook elements have alternate presentations that can be
specified with global parameters. Many of them can also be set on a per-element
basis with a <tag class="pi">db</tag><indexterm>
<primary>db processing instruction</primary>
</indexterm> processing instruction.
The date format, for example, can be changed in this way as described
in the <function>f:date-format</function> function.</para>
<para>The <function>f:pi</function> function takes a context and the name
of a property. It returns the value specified for that property from all of the
<tag class="pi">db</tag> processing instructions in the
specified context. The three argument version allows you to specify a default
value. It will be returned if there are no values specified for the property
in that context.</para>
</refsection>
</refentry>

<refentry xml:id="f_pi-attributes"><indexterm><primary>function</primary><secondary>pi-attributes</secondary></indexterm>
<?db filename="f_pi-attributes"?>
<refmeta>
<refentrytitle>f:pi-attributes</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}pi-attributes#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:pi-attributes</refname>
<refpurpose>Returns processing-instruction pseudo-attributes as attributes</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Using pseudo-attributes in a
<tag class="pi">db</tag><indexterm>
<primary>db processing instruction</primary>
</indexterm> processing instruction is a convenient mechanism
for providing additional options to the stylesheets. But processing them
is tedious. This function gathers together the pseudo-attributes specified
in a series of processing instructions and returns them as attributes on
an element. If the same property occurs more than once in the sequence,
the last value will be returned.</para>
</refsection>
</refentry>

<refentry xml:id="f_post-label-punctuation"><indexterm><primary>function</primary><secondary>post-label-punctuation</secondary></indexterm>
<?db filename="f_post-label-punctuation"?>
<refmeta>
<refentrytitle>f:post-label-punctuation</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}post-label-punctuation#1</refmiscinfo>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}post-label-punctuation#2</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:post-label-punctuation</refname>
<refpurpose>Punctuation that follows a label</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Titles consist of an optional label, followed by an optional number, followed
by the title. In some contexts, additional prefixes and suffixes may also be involved.
In the title “Chapter 1 Introduction”, the word “Chapter” is the label, “1”
is the number, and “Introduction” is the title.</para>
<para>When a label appears in a title, the
<function>f:post-label-punctuation</function> function determines what
punctuation, if any, should follow it.
</para>
</refsection>
</refentry>

<refentry xml:id="f_refsection"><indexterm><primary>function</primary><secondary>refsection</secondary></indexterm>
<?db filename="f_refsection"?>
<refmeta>
<refentrytitle>f:refsection</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}refsection#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:refsection</refname>
<refpurpose>Is this a section in a <tag>refentry</tag>?</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Returns true if the node is a section in a <tag>refentry</tag>, a
<tag>refsection</tag>, <tag>refsect1</tag>, <tag>refsect2</tag>, or <tag>refsect3</tag>
element.</para>
</refsection>
</refentry>

<refentry xml:id="f_relative-length"><indexterm><primary>function</primary><secondary>relative-length</secondary></indexterm>
<?db filename="f_relative-length"?>
<refmeta>
<refentrytitle>f:relative-length</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}relative-length#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:relative-length</refname>
<refpurpose>Returns the relative portion of a length, if it has one</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>For a given length, returns the relative length if it has one.
For lengths that have no relative component, returns 0.0.
For a discussion of units, see <xref linkend="units"/>.
</para>
</refsection>
</refentry>

<refentry xml:id="f_section"><indexterm><primary>function</primary><secondary>section</secondary></indexterm>
<?db filename="f_section"?>
<refmeta>
<refentrytitle>f:section</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}section#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:section</refname>
<refpurpose>Is this a section?</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Returns true if the node is a section, a
<tag>section</tag> or <tag>sect<replaceable>1</replaceable>-<replaceable>5</replaceable></tag>
element.</para>
</refsection>
</refentry>

<refentry xml:id="f_section-depth"><indexterm><primary>function</primary><secondary>section-depth</secondary></indexterm>
<?db filename="f_section-depth"?>
<refmeta>
<refentrytitle>f:section-depth</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}section-depth#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:section-depth</refname>
<refpurpose>Returns the section depth of a node</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Returns the section depth of a node, that is, how many section elements
are among its ancestors.</para>
</refsection>
</refentry>

<refentry xml:id="f_spaces"><indexterm><primary>function</primary><secondary>spaces</secondary></indexterm>
<?db filename="f_spaces"?>
<refmeta>
<refentrytitle>f:spaces</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}spaces#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:spaces</refname>
<refpurpose>Returns a string of spaces</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This function returns a string of <code>$length</code> spaces.
If <code>$length</code>:</para>
<itemizedlist spacing="compact">
<listitem>
<para>is empty, an empty sequence is returned.</para>
</listitem>
<listitem>
<para>is an integer, or castable to an integer, a string of that length is
returned. If the length is negative, an empty sequence is returned.</para>
</listitem>
<listitem>
<para>is anything else, the length of the string value of <code>$length</code>
is used as the length.</para>
</listitem>
</itemizedlist>

<para>In other words:</para>
<itemizedlist spacing="compact">
<listitem><para><code>f:spaces(())</code> is ‘<code>()</code>’,</para>
</listitem>
<listitem><para><code>f:spaces(0)</code> is ‘’ (no spaces),</para>
</listitem>
<listitem><para><code>f:spaces(-1)</code> is ‘<code>()</code>’,</para>
</listitem>
<listitem><para><code>f:spaces(2)</code> is ‘  ’ (two spaces),</para>
</listitem>
<listitem><para><code>f:spaces("1")</code> is ‘ ’ (one space), and</para>
</listitem>
<listitem><para><code>f:spaces("test")</code> is ‘    ’ (four spaces).</para>
</listitem>
</itemizedlist>

<para>This function accepts a sequence to support the empty sequence.
If it’s passed a sequence of more than one item, it treats that as if
the string values of the items had been concatenated together. This can
have slightly surprising consequences as “<code>('a', '3', '0')</code>”
will return a string of three spaces whereas 
“<code>('0', '3', '0')</code>” will return a string of thirty.
</para>

</refsection>
</refentry>

<refentry xml:id="f_step-number"><indexterm><primary>function</primary><secondary>step-number</secondary></indexterm>
<?db filename="f_step-number"?>
<refmeta>
<refentrytitle>f:step-number</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}step-number#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:step-number</refname>
<refpurpose>Returns the step number of a step in an procedure</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Returns the step number of step in a procedure. This is always
an integer, even if it will be formatted as a letter, roman numeral,
or other symbol. For steps nested in side <tag>substeps</tag>, this
function returns the fully qualified item number. For example, for the
second substep in the fourth substep in the third step of a procedure, it will
return <literal>(2, 4, 3)</literal>.</para>
</refsection>
</refentry>

<refentry xml:id="f_step-numeration"><indexterm><primary>function</primary><secondary>step-numeration</secondary></indexterm>
<?db filename="f_step-numeration"?>
<refmeta>
<refentrytitle>f:step-numeration</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}step-numeration#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:step-numeration</refname>
<refpurpose>Returns the step numeration format for a step</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Computes the numeration for the specified step.
See <parameter>procedure-step-numeration</parameter><indexterm><primary>param</primary><secondary>procedure-step-numeration</secondary></indexterm>.</para>
</refsection>
</refentry>

<refentry xml:id="f_syntax-highlight"><indexterm><primary>function</primary><secondary>syntax-highlight</secondary></indexterm>
<?db filename="f_syntax-highlight"?>
<refmeta>
<refentrytitle>f:syntax-highlight</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}syntax-highlight#1</refmiscinfo>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}syntax-highlight#2</refmiscinfo>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}syntax-highlight#3</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:syntax-highlight</refname>
<refpurpose>Performs syntax highlighting</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Verbatim environments that specify a <tag class="attribute">language</tag> can be syntax highlighted.
Syntax highlighting adds additional spans so that, for example, CSS can be used to make
keyword bold or quoted strings a different color.</para>
<para>Syntax highlighting requires an extension function. The list of languages that
will be syntax highlighted is taken from
<parameter>verbatim-syntax-highlight-languages</parameter><indexterm><primary>param</primary><secondary>verbatim-syntax-highlight-languages</secondary></indexterm>.
</para>
</refsection>
</refentry>

<refentry xml:id="f_target"><indexterm><primary>function</primary><secondary>target</secondary></indexterm>
<?db filename="f_target"?>
<refmeta>
<refentrytitle>f:target</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}target#2</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:target</refname>
<refpurpose>Returns the element identified by a particular id</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The item with the specified ID that is in the same document as
<code>$context</code> item is returned.
</para>
</refsection>
</refentry>

<refentry xml:id="f_template"><indexterm><primary>function</primary><secondary>template</secondary></indexterm>
<?db filename="f_template"?>
<refmeta>
<refentrytitle>f:template</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}template#2</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:template</refname>
<refpurpose>Returns the title page template for an element</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Returns the title page template that should be used for an element.
If no template is found, returns the <code>$default</code> template.</para>
</refsection>
</refentry>

<refentry xml:id="f_tokenize-on-char"><indexterm><primary>function</primary><secondary>tokenize-on-char</secondary></indexterm>
<?db filename="f_tokenize-on-char"?>
<refmeta>
<refentrytitle>f:tokenize-on-char</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}tokenize-on-char#2</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:tokenize-on-char</refname>
<refpurpose>Tokenize a string at a specific character</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This function tokenizes a string at a specific character (not a regular
expression). If the specified character is a regular expression meta-character, it
is automatically escaped.</para>
</refsection>
</refentry>

<refentry xml:id="f_unique-id"><indexterm><primary>function</primary><secondary>unique-id</secondary></indexterm>
<?db filename="f_unique-id"?>
<refmeta>
<refentrytitle>f:unique-id</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}unique-id#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:unique-id</refname>
<refpurpose>Returns an ID for the element</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This function returns a globally unique ID for the element. This allows
a transformation to disambiguate between different elements that happen to have
the same <tag class="attribute">xml:id</tag>, as can occur if transclusion is performed.
</para>
</refsection>
</refentry>

<refentry xml:id="f_verbatim-highlight"><indexterm><primary>function</primary><secondary>verbatim-highlight</secondary></indexterm>
<?db filename="f_verbatim-highlight"?>
<refmeta>
<refentrytitle>f:verbatim-highlight</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}verbatim-highlight#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:verbatim-highlight</refname>
<refpurpose>Returns the highlight properties for a verbatim environment</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Verbatim elements can be styled in a variety of ways, see
<xref linkend="verbstyle"/>. This function returns the highlight settings
for a particular verbatim environment.</para>
<para>If the style for this environment is explicitly “plain”, then no
highlight settings are returned (this avoids a bunch of warning messages).
Otherwise, if a
<tag class="pi">db</tag><indexterm><primary>db processing instruction</primary>
</indexterm> processing instruction with a
<literal>verbatim-highlight</literal><indexterm>
<primary>db processing instruction</primary>
<secondary>verbatim-highlight pseudo-attribute</secondary>
</indexterm> pseudo-attribute is present,
it is returned. If there’s no PI, then the default
settings for this kind of environment are returned.</para>
</refsection>
</refentry>

<refentry xml:id="f_verbatim-numbered"><indexterm><primary>function</primary><secondary>verbatim-numbered</secondary></indexterm>
<?db filename="f_verbatim-numbered"?>
<refmeta>
<refentrytitle>f:verbatim-numbered</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}verbatim-numbered#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:verbatim-numbered</refname>
<refpurpose>Returns true if the listing should be numbered</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <function>f:verbatim-numbered</function> function returns true of
the specified verbatim listing should be numbered. This will be true if:
</para>
<itemizedlist>
<listitem>
<para>The <tag class="attribute">linenumbering</tag> attribute is specified and has the
value <literal>numbered</literal>,
</para>
</listitem>
<listitem>
<para>the element’s name is listed in
<parameter>verbatim-numbered-elements</parameter><indexterm><primary>param</primary><secondary>verbatim-numbered-elements</secondary></indexterm>, or
</para>
</listitem>
<listitem>
<para>a
<tag class="pi">db</tag><indexterm><primary>db processing instruction</primary>
</indexterm> processing instruction with a
<literal>verbatim-numbered</literal><indexterm>
<primary>db processing instruction</primary>
<secondary>verbatim-numbered pseudo-attribute</secondary>
</indexterm> <glossterm>pseudo-attribute</glossterm> that
<glossterm>is true</glossterm> is specified.
</para>
</listitem>
</itemizedlist>

<para>There are two overriding conditions that will force the value to
be false: first, if the <tag class="attribute">linenumbering</tag> attribute is specified and has the
value <literal>unnumbered</literal>, the listing will not be numbered.
Second if the listing has a
<tag class="pi">db</tag><indexterm><primary>db processing instruction</primary>
</indexterm> processing instruction with a
<literal>verbatim-style</literal><indexterm>
<primary>db processing instruction</primary>
<secondary>verbatim-style pseudo-attribute</secondary>
</indexterm> pseudo attribute that specifies the “plain” style. Listings
in the plain style cannot be numbered, attempting to do so will generate
a warning message from the stylesheets.
</para>
</refsection>
</refentry>

<refentry xml:id="f_verbatim-style"><indexterm><primary>function</primary><secondary>verbatim-style</secondary></indexterm>
<?db filename="f_verbatim-style"?>
<refmeta>
<refentrytitle>f:verbatim-style</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}verbatim-style#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:verbatim-style</refname>
<refpurpose>Returns the style of a verbatim listing</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <function>f:verbatim-style</function> function returns the style
of presentation that should be used for the
specified verbatim listing.
</para>
<para>If a
<tag class="pi">db</tag><indexterm><primary>db processing instruction</primary>
</indexterm> processing instruction with a
<literal>verbatim-style</literal><indexterm>
<primary>db processing instruction</primary>
<secondary>verbatim-style pseudo-attribute</secondary>
</indexterm> <glossterm>pseudo-attribute</glossterm> is present,
the value of that pseudo-attribute will be returned.
Otherwise, it will be “<literal>lines</literal>” if the
element’s name is listed in
<parameter>verbatim-line-style</parameter><indexterm><primary>param</primary><secondary>verbatim-line-style</secondary></indexterm>, 
“<literal>plain</literal>” if the
element’s name is listed in
<parameter>verbatim-plain-style</parameter><indexterm><primary>param</primary><secondary>verbatim-plain-style</secondary></indexterm>, or “<literal>raw</literal>”.
</para>
</refsection>
</refentry>

<refentry xml:id="f_verbatim-trim-trailing"><indexterm><primary>function</primary><secondary>verbatim-trim-trailing</secondary></indexterm>
<?db filename="f_verbatim-trim-trailing"?>
<refmeta>
<refentrytitle>f:verbatim-trim-trailing</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}verbatim-trim-trailing#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:verbatim-trim-trailing</refname>
<refpurpose>Return true if trailing blank lines should be trimmed</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This function examines a verbatim environment, the <literal>$context</literal>,
and returns true if trailing blank lines should be trimmed from it.
A <tag class="pi">db</tag><indexterm><primary>db processing instruction</primary>
</indexterm> processing instruction with a
<literal>verbatim-trim-trailing</literal><indexterm>
<primary>db processing instruction</primary>
<secondary>verbatim-trim-trailing pseudo-attribute</secondary>
</indexterm> pseudo-attribute may be used to override the
<parameter>verbatim-trim-trailing-blank-lines</parameter><indexterm><primary>param</primary><secondary>verbatim-trim-trailing-blank-lines</secondary></indexterm> parameter on a
case-by-case basis.
</para>
</refsection>
</refentry>

<refentry xml:id="f_xlink-style"><indexterm><primary>function</primary><secondary>xlink-style</secondary></indexterm>
<?db filename="f_xlink-style"?>
<refmeta>
<refentrytitle>f:xlink-style</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}xlink-style#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:xlink-style</refname>
<refpurpose>Returns the XLink style for this document</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The stylesheets support XLink extended links. See
<parameter>xlink-style</parameter><indexterm><primary>param</primary><secondary>xlink-style</secondary></indexterm> for more details.
</para>
</refsection>
</refentry>

<refentry xml:id="f_xpointer-idref"><indexterm><primary>function</primary><secondary>xpointer-idref</secondary></indexterm>
<?db filename="f_xpointer-idref"?>
<refmeta>
<refentrytitle>f:xpointer-idref</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/functions}xpointer-idref#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>f:xpointer-idref</refname>
<refpurpose>Parses an XPointer for a same-document ID reference</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>In DocBook, there are generally two ways to refer to other
elements in the current document by ID: using the <tag class="attribute">linkend</tag>
(or <tag class="attribute">linkends</tag>) attribute or using the <tag class="attribute">xlink:href</tag>
attribute.</para>
<para>The <function>f:xpointer-idref</function> function returns the
ID portion of an XPointer that is a reference to another ID in the
current document.</para>
<para>In other words:
</para>
<itemizedlist spacing="compact">
<listitem><para><code>f:xpointer-idref('#foo')</code> is <code>foo</code>,</para>
</listitem>
<listitem><para><code>f:xpointer-idref('id(foo)')</code> is <code>foo</code>,</para>
</listitem>
<listitem><para>and <code>f:xpointer-idref('http://example.org/#foo')</code>
is the empty sequence.</para></listitem>
</itemizedlist>
</refsection>
</refentry>

<refentry xml:id="ext_cwd"><indexterm><primary>function</primary><secondary>cwd</secondary></indexterm>
<?db filename="ext_cwd"?>
<refmeta>
<refentrytitle>ext:cwd</refentrytitle>
<refmiscinfo>{http://docbook.org/extensions/xslt}cwd#0</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ext:cwd</refname>
<refpurpose>Returns the current working directory</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsynopsisdiv>
  <funcsynopsis>
    <funcprototype>
      <funcdef>
        <type>xs:string</type>
        <function>ext:cwd</function>
      </funcdef>
      <void/>
    </funcprototype>
  </funcsynopsis>
</refsynopsisdiv>
<refsection>
<title>Description</title>
<para>This extension function returns the current working directory from which
the processor was executed.</para>
</refsection>
</refentry>

<refentry xml:id="ext_image-metadata"><indexterm><primary>function</primary><secondary>image-metadata</secondary></indexterm>
<?db filename="ext_image-metadata"?>
<refmeta>
<refentrytitle>ext:image-metadata</refentrytitle>
<refmiscinfo>{http://docbook.org/extensions/xslt}image-metadata#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ext:image-metadata</refname>
<refpurpose>Return intrinsic properties of an image</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsynopsisdiv>
  <funcsynopsis>
    <funcprototype>
      <funcdef>
        <type>map(*)</type>
        <function>ext:image-metadata</function>
      </funcdef>
      <paramdef>
        <parameter>filename</parameter>
        <type>xs:string</type>
      </paramdef>
    </funcprototype>
  </funcsynopsis>
</refsynopsisdiv>
<refsection>
<title>Description</title>
<para>This extension function returns a map of metadata properties
about the image, including its <glossterm>intrinsic size</glossterm>:
its width and height in pixels. If the size can be determined, the map
returned will have a “<literal>width</literal>” key whose value is the
width of the image and a “<literal>height</literal>” key whose value
is the height of the image. Both sizes will be integer values.</para>

<para>This function uses the <biblioref linkend="metadata-extractor"/>
library. The map may contain other properties as well.</para>

<itemizedlist>
<listitem>
<para>If the media was successfully parsed with <citetitle>metadata-extractor</citetitle>,
all of the properties identified by the extractor will be returned. Each property
name will be converted to lowercase and spaces will be replaced with hyphens.
(In other words, a property with the tag name “Palette Colour Count” will appear
in the map with a key of “palette-colour-count”.)</para>
<para>Property values that appear to be data/time values<footnote>
<para>A value that matches the regular expression
“<literal>^\d\d\d\d:\d\d:\d\d \d\d:\d\d:\d\d$</literal>” is assumed to be a date/time.
This is the format of date/time values used in EXIF metadata for most
properties that have a date/time value.</para></footnote> will be converted to
strings that are valid ISO 8601 date/time values. Any control characters that can’t appear
in XML but that appear in a value will be replaced with Unicode references,
<literal>\u</literal><replaceable>xxxx</replaceable>. For example, a null byte will be
replaced with <literal>\u0000</literal>.</para>
</listitem>
<listitem>
<para>If the media isn’t successfully parsed with <citetitle>metadata-extractor</citetitle>,
</para>
<itemizedlist>
<listitem>
<para>If it appears to be a PDF document, the function will search for the
“<literal>MediaBox</literal>” or “<literal>CropBox</literal>” in the first 100 lines
of the PDF. If either is found, its dimensions are used to calculate the width and height.
If both are present, <literal>CropBox</literal> is preferred.
</para>
</listitem>
<listitem>
<para>If it appears to be an SVG document, the function will search
for <tag class="attribute">width</tag> and <tag class="attribute">height</tag> attributes on the root
element. All of the attributes of the root element will be returned as
properties, using <glossterm baseform="Clark name">Clark
names</glossterm>.
</para>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>

<para>If the <literal>width</literal> and <literal>height</literal> properties
exist, they will always be integers. This means that if an image has a property
with the name  <literal>width</literal> or <literal>height</literal> and its value
isn’t an integer, it will not be returned.</para>

<para>If the <parameter>debug</parameter><indexterm><primary>param</primary><secondary>debug</secondary></indexterm> parameter includes the token
<literal>image-properties</literal>, the stylesheets will print every property
returned in an <tag>xsl:message</tag>.</para>
</refsection>
</refentry>

<refentry xml:id="ext_image-properties"><indexterm><primary>function</primary><secondary>image-properties</secondary></indexterm>
<?db filename="ext_image-properties"?>
<refmeta>
<refentrytitle>ext:image-properties</refentrytitle>
<refmiscinfo>{http://docbook.org/extensions/xslt}image-properties#1</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ext:image-properties</refname>
<refpurpose>Return intrinsic properties of an image</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsynopsisdiv>
  <funcsynopsis>
    <funcprototype>
      <funcdef>
        <type>map(*)</type>
        <function>ext:image-properties</function>
      </funcdef>
      <paramdef>
        <parameter>filename</parameter>
        <type>xs:string</type>
      </paramdef>
    </funcprototype>
  </funcsynopsis>
</refsynopsisdiv>
<refsection>
<title>Description</title>
<para>This extension function returns the <glossterm>intrinsic size</glossterm> of
an image: its width and height in pixels. If the size can be determined, the map returned
will have a “<literal>width</literal>” key whose value is the width of the image and
a “<literal>height</literal>” key whose value is the height of the image. Both sizes
will be integral numbers of pixels.</para>
<para>The <function>ext:image-metadata</function> function provides better results.
It should be preferred unless the <biblioref linkend="metadata-extractor"/> libraries
are unavailable.</para>
</refsection>
</refentry>

<refentry xml:id="ext_pygmentize"><indexterm><primary>function</primary><secondary>pygmentize</secondary></indexterm>
<?db filename="ext_pygmentize"?>
<refmeta>
<refentrytitle>ext:pygmentize</refentrytitle>
<refmiscinfo>{http://docbook.org/extensions/xslt}pygmentize#1</refmiscinfo>
<refmiscinfo>{http://docbook.org/extensions/xslt}pygmentize#2</refmiscinfo>
<refmiscinfo>{http://docbook.org/extensions/xslt}pygmentize#3</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ext:pygmentize</refname>
<refpurpose>Syntax highlight a listing with pygmentize</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsynopsisdiv>
  <funcsynopsis>
    <funcprototype>
      <funcdef>
        <type>xs:string</type>
        <function>ext:pygmentize</function>
      </funcdef>
      <paramdef>
        <parameter>listing</parameter>
        <type>xs:string</type>
      </paramdef>
    </funcprototype>
  </funcsynopsis>
  <funcsynopsis>
    <funcprototype>
      <funcdef>
        <function>ext:pygmentize</function>
        <type>xs:string</type>
      </funcdef>
      <paramdef>
        <parameter>listing</parameter>
        <type>xs:string</type>
      </paramdef>
      <paramdef>
        <parameter>options</parameter>
        <type>item()</type>
      </paramdef>
    </funcprototype>
  </funcsynopsis>
  <funcsynopsis>
    <funcprototype>
      <funcdef>
        <type>xs:string</type>
        <function>ext:pygmentize</function>
      </funcdef>
      <paramdef>
        <parameter>listing</parameter>
        <type>xs:string</type>
      </paramdef>
      <paramdef>
        <parameter>options</parameter>
        <type>item()</type>
      </paramdef>
      <paramdef>
        <parameter>pygments-options</parameter>
        <type>map(xs:string,xs:string)</type>
      </paramdef>
    </funcprototype>
  </funcsynopsis>
</refsynopsisdiv>
<refsection>
<title>Description</title>
<para>This extension function runs the <command>pygmentize</command> command to
add syntax highlighting to a listing.</para>
<para>The second argument can either be map, in which case the key-value pairs of the map
constitute the options, or it can be a single string. If it’s a single string, it’s
interpreted as if it was a map with the key “<literal>language</literal>” and the string
as the value.</para>
<para>The third argument must be a map. Each key-value pair will be passed to
<command>pygmentize</command> as “<literal>-P</literal><replaceable>key</replaceable><literal>=</literal><replaceable>value</replaceable>”.
</para>
<para>The function returns the string output from <command>pygmentize</command>. It must
be parsed with <literal>parse-xml</literal> if you wish to process it as XML.</para>
<para>Be aware that <command>pygmentize</command> strips leading blank
lines off of the source listing. If you’re selecting portions of a
listing with XInclude, make sure not to select leading blank lines in
the listing if you are trying to accurately count the lines.</para>
</refsection>
</refentry>

<refentry xml:id="ext_pygmentize-available"><indexterm><primary>function</primary><secondary>pygmentize-available</secondary></indexterm>
<?db filename="ext_pygmentize-available"?>
<refmeta>
<refentrytitle>ext:pygmentize-available</refentrytitle>
<refmiscinfo>{http://docbook.org/extensions/xslt}pygmentize-available#0</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ext:pygmentize-available</refname>
<refpurpose>Returns true if pygmentize is available</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsynopsisdiv>
  <funcsynopsis>
    <funcprototype>
      <funcdef>
        <type>xs:boolean</type>
        <function>ext:pygmentize-available</function>
      </funcdef>
      <void/>
    </funcprototype>
  </funcsynopsis>
</refsynopsisdiv>
<refsection>
<title>Description</title>
<para>In order to run Pygments on listings,
the <function>ext:pygmentize</function> extension function must be available
<emphasis>and</emphasis> the <command>pygmentize</command> command must be available
on the host system.</para>
<para>This function returns true if it successfully finds the
<command>pygmentize</command> command on the system path.</para>
</refsection>
</refentry>

<refentry xml:id="ext_xinclude"><indexterm><primary>function</primary><secondary>xinclude</secondary></indexterm>
<?db filename="ext_xinclude"?>
<refmeta>
<refentrytitle>ext:xinclude</refentrytitle>
<refmiscinfo>{http://docbook.org/extensions/xslt}xinclude#1</refmiscinfo>
<refmiscinfo>{http://docbook.org/extensions/xslt}xinclude#2</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ext:xinclude</refname>
<refpurpose>Performs XInclude processing</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsynopsisdiv>
  <funcsynopsis>
    <funcprototype>
      <funcdef>
        <type>node()*</type>
        <function>ext:xinclude</function>
      </funcdef>
      <paramdef>
        <parameter>node</parameter>
        <type>node()</type>
      </paramdef>
    </funcprototype>
  </funcsynopsis>
  <funcsynopsis>
    <funcprototype>
      <funcdef>
        <type>node()*</type>
        <function>ext:xinclude</function>
      </funcdef>
      <paramdef>
        <parameter>node</parameter>
        <type>node()</type>
      </paramdef>
      <paramdef>
        <parameter>options</parameter>
        <type>map(xs:QName, item()*)</type>
      </paramdef>
    </funcprototype>
  </funcsynopsis>
</refsynopsisdiv>
<refsection>
<title>Description</title>
<para>Performs XInclude processing on <code>node</code> and all of its
descendants. The options “<literal>fixup-xml-base</literal>” and
“<literal>fixup-xml-lang</literal>” are <code>true()</code> by default.</para>
</refsection>
</refentry>

<refentry xml:id="ext_validate-with-relax-ng"><indexterm><primary>function</primary><secondary>validate-with-relax-ng</secondary></indexterm>
<?db filename="ext_validate-with-relax-ng"?>
<refmeta>
<refentrytitle>ext:validate-with-relax-ng</refentrytitle>
<refmiscinfo>{http://docbook.org/extensions/xslt}validate-with-relax-ng#2</refmiscinfo>
<refmiscinfo>{http://docbook.org/extensions/xslt}validate-with-relax-ng#3</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ext:validate-with-relax-ng</refname>
<refpurpose>Returns the current working directory</refpurpose>
<refclass>function</refclass>
</refnamediv>
<refsynopsisdiv>
  <funcsynopsis>
    <funcprototype>
      <funcdef>
        <type>map(xs:string, item())</type>
        <function>ext:validate-with-relax-ng</function>
      </funcdef>
      <paramdef>
        <parameter>node</parameter>
        <type>node()</type>
      </paramdef>
      <paramdef>
        <parameter>schema</parameter>
        <type>item()</type>
      </paramdef>
    </funcprototype>
  </funcsynopsis>
  <funcsynopsis>
    <funcprototype>
      <funcdef>
        <type>map(xs:string, item())</type>
        <function>ext:validate-with-relax-ng</function>
      </funcdef>
      <paramdef>
        <parameter>node</parameter>
        <type>node()</type>
      </paramdef>
      <paramdef>
        <parameter>schema</parameter>
        <type>item()</type>
      </paramdef>
      <paramdef>
        <parameter>options</parameter>
        <type>map(xs:string, xs:string)</type>
      </paramdef>
    </funcprototype>
  </funcsynopsis>
</refsynopsisdiv>
<refsection>
<title>Description</title>
<para>This extension function validates the <code>node</code> provided
against the <code>schema</code>. The <code>schema</code> can be either a
string (the URI of the RELAX NG grammar file) or a node (a RELAX NG grammar
document). There is no support for the RELAX NG Compact Syntax at this time.
</para>
<para>The available options are <code>assert-valid</code> which defaults to
<code>true()</code>
and <code>dtd-compatibility</code> which isn’t actually supported yet.</para>
<para>If <code>assert-valid</code> is <code>true()</code> and the document is
not valid according to the grammar provided, an exception is raised.</para>
<para>If <code>assert-valid</code> is <code>false()</code>, or the document
is valid, the map returned will contain the following keys:</para>

<variablelist>
<varlistentry><term><literal>valid</literal></term>
<listitem>
<para>A boolean indicating whether or not the document was valid.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>document</literal></term>
<listitem>
<para>The validated document. Today, this always returns the same node, but
it may eventually return an augmented document.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>errors</literal></term>
<listitem>
<para>An array of maps containing the <literal>type</literal>
(<code>warning</code>, <code>error</code>, or <code>fatal-error</code>),
<literal>message</literal>,
<literal>line</literal>, and <literal>column</literal> where an error occurred.
If the document is valid, the <literal>errors</literal> key will not be present.
</para>
</listitem>
</varlistentry>
</variablelist>
</refsection>
</refentry>

</reference>
<reference version="5.0" xml:id="templates">
<info>
  <?db filename="templates"?>
  <title>Template reference</title>
</info>

<refentry xml:id="t_audio-fallback"><indexterm><primary>template</primary><secondary>audio-fallback</secondary></indexterm>
<?db filename="t_audio-fallback"?>
<refmeta>
<refentrytitle>t:audio-fallback</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}audio-fallback</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:audio-fallback</refname>
<refpurpose>Generate fallback for audio</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This template is called to generate fallback for an 
<tag namespace="http://www.w3.org/1999/xhtml">audio</tag> element.
</para>
</refsection>
</refentry>

<refentry xml:id="t_biblioentry"><indexterm><primary>template</primary><secondary>biblioentry</secondary></indexterm>
<?db filename="t_biblioentry"?>
<refmeta>
<refentrytitle>t:biblioentry</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}biblioentry</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:biblioentry</refname>
<refpurpose>Format a <tag>biblioentry</tag> element</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Unlike <tag>bibliomixed</tag>, where the author is expected to
provide most of the formatting, <tag>biblioentry</tag> is a bag of
metadata. On the one hand, this opens up the possibility of producing
different bibliographic styles from the same entry. On the other hand, it
greatly complicates formatting.</para>
<para>The default <code role="template">t:biblioentry</code> template uses a
header template (see <xref linkend="header-templates"/>).</para>
</refsection>
</refentry>

<refentry xml:id="t_bottom-nav"><indexterm><primary>template</primary><secondary>bottom-nav</secondary></indexterm>
<?db filename="t_bottom-nav"?>
<refmeta>
<refentrytitle>t:bottom-nav</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}bottom-nav</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:bottom-nav</refname>
<refpurpose>Generate bottom-of-page navigation links</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This template generates the bottom-of-page <tag>nav</tag> element. When
chunking is performed, this should provide links between pages.</para>
</refsection>
</refentry>

<refentry xml:id="t_chunk-cleanup"><indexterm><primary>template</primary><secondary>chunk-cleanup</secondary></indexterm>
<?db filename="t_chunk-cleanup"?>
<refmeta>
<refentrytitle>t:chunk-cleanup</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}chunk-cleanup</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:chunk-cleanup</refname>
<refpurpose>Cleanup the HTML markup for a DocBook document</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This mode performs cleanup tasks on the HTML document that
results from DocBook processing. This process
moves footnotes and annotations when necessary, generates navigation
elements, etc.</para>
</refsection>
</refentry>

<refentry xml:id="t_chunk-footnotes"><indexterm><primary>template</primary><secondary>chunk-footnotes</secondary></indexterm>
<?db filename="t_chunk-footnotes"?>
<refmeta>
<refentrytitle>t:chunk-footnotes</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}chunk-footnotes</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:chunk-footnotes</refname>
<refpurpose>Processes footnotes in a chunk</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When chunking is being performed (see <xref linkend="chunking"/>),
all of the footnotes that should appear in a chunk are processed with this template.
</para>
</refsection>
</refentry>

<refentry xml:id="t_chunk-output"><indexterm><primary>template</primary><secondary>chunk-output</secondary></indexterm>
<?db filename="t_chunk-output"?>
<refmeta>
<refentrytitle>t:chunk-output</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}chunk-output</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:chunk-output</refname>
<refpurpose>Generate chunked output for a DocBook document</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This mode processes the <parameter>persistent-toc</parameter><indexterm><primary>param</primary><secondary>persistent-toc</secondary></indexterm> if
requested and generates individual documents for each chunk. Like the
XPath <code>transform</code> function, this template returns a map.
You must process the map to store the documents.</para>
</refsection>
</refentry>

<refentry xml:id="t_docbook"><indexterm><primary>template</primary><secondary>docbook</secondary></indexterm>
<?db filename="t_docbook"?>
<refmeta>
<refentrytitle>t:docbook</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}docbook</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:docbook</refname>
<refpurpose>Process a DocBook document</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This mode processes a DocBook document. It’s usually called
automatically by the root template in the stylesheets. You only need to call
it explicitly if you have an override for the root template and want to
do some specialized processing.
</para>
<para>The template has a single parameter, <literal>return</literal>, which selects
what should be constructed by the template:</para>

<variablelist>
<varlistentry><term><literal>main-document</literal>, the default value</term>
<listitem>
<para>Returns the primary output of the stylesheet.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>raw-results</literal></term>
<listitem>
<para>Returns a map with two keys, <literal>document</literal> containing the original
DocBook document processed and <literal>output</literal> containing the transformed
result.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>chunked-results</literal></term>
<listitem>
<para>Returns a map with two keys, <literal>document</literal> containing the original
DocBook document processed and <literal>chunks</literal> containing a map from
output URIs to documents.</para>
</listitem>
</varlistentry>
</variablelist>

<para>Any other value is <link linkend="v_dbe_INVALID-RESULTS-REQUESTED">an error</link>.
</para>
</refsection>
</refentry>

<refentry xml:id="t_generate-index"><indexterm><primary>template</primary><secondary>generate-index</secondary></indexterm>
<?db filename="t_generate-index"?>
<refmeta>
<refentrytitle>t:generate-index</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}generate-index</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:generate-index</refname>
<refpurpose>Generate a back-of-the-book style index</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This template is called when an empty <tag>index</tag> tag is found
the document and automatic index generation is enabled. Automatic index
generation is enabled if
either the <parameter>generate-index</parameter><indexterm><primary>param</primary><secondary>generate-index</secondary></indexterm> <glossterm>is true</glossterm>
or a
<tag class="pi">db</tag><indexterm><primary>db processing instruction</primary>
</indexterm> processing instruction with an
<literal>autoindex</literal><indexterm>
<primary>db processing instruction</primary>
<secondary>autoindex pseudo-attribute</secondary>
</indexterm> pseudo-attribute is true. If the <literal>autoindex</literal> pseudo-attribute
is explicitly false, automatic index generation is suppressed for the index in which
it appears.
</para>
</refsection>
</refentry>

<refentry xml:id="t_index-zone-reference"><indexterm><primary>template</primary><secondary>index-zone-reference</secondary></indexterm>
<?db filename="t_index-zone-reference"?>
<refmeta>
<refentrytitle>t:index-zone-reference</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}index-zone-reference</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:index-zone-reference</refname>
<refpurpose>Process index zone references</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This template is called to generate index references for terms that have
a <tag class="attribute">zone</tag> attribute. It is only called when generating an index.</para>
</refsection>
</refentry>

<refentry xml:id="t_inline"><indexterm><primary>template</primary><secondary>inline</secondary></indexterm>
<?db filename="t_inline"?>
<refmeta>
<refentrytitle>t:inline</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}inline</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:inline</refname>
<refpurpose>Process an inline element</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>All of the inline elements are processed by <code role="template">t:inline</code>.
This provides a common place to handle the fact that any of them might be a link.
Several parameters exist to handle variations in presentation:</para>

<variablelist>
<varlistentry><term><code>namemap</code></term>
<listitem>
<para>Maps the element to a particular HTML element. Defaults to
<tag namespace="http://www.w3.org/1999/xhtml">span</tag>.
</para>
</listitem>
</varlistentry>
<varlistentry><term><code>class</code></term>
<listitem>
<para>A list of tokens that should be added to the element’s <tag class="attribute">class</tag> attribute.
</para>
</listitem>
</varlistentry>
<varlistentry><term><code>local-name-as-class</code></term>
<listitem>
<para>If this is true, the local name of the DocBook element being processed will
be added to the classes.
</para>
</listitem>
</varlistentry>
<varlistentry><term><code>content</code></term>
<listitem>
<para>The element content. By default, this is obtained by applying XSLT templates to
the element’s content.</para>
</listitem>
</varlistentry>
<varlistentry><term><code>extra-attributes</code></term>
<listitem>
<para>Extra attributes to be added to the element.
</para>
</listitem>
</varlistentry>
</variablelist>
</refsection>
</refentry>

<refentry xml:id="t_mediaobject-img"><indexterm><primary>template</primary><secondary>mediaobject-img</secondary></indexterm>
<?db filename="t_mediaobject-img"?>
<refmeta>
<refentrytitle>t:mediaobject-img</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}mediaobject-img</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:mediaobject-img</refname>
<refpurpose>Generate a mediaobject img</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This template is called to generate the
<tag namespace="http://www.w3.org/1999/xhtml">img</tag> element for
a media object.
</para>
</refsection>
</refentry>

<refentry xml:id="t_person-name"><indexterm><primary>template</primary><secondary>person-name</secondary></indexterm>
<?db filename="t_person-name"?>
<refmeta>
<refentrytitle>t:person-name</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}person-name</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:person-name</refname>
<refpurpose>Formats a personal name</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This template formats a personal name according to the specified style.
This template must only be called when the current context item is a
<tag>personname</tag>. The <tag>personname</tag> element can be used
in two different ways, it can just contain the name:</para>

<programlisting language="xml" linenumbering="unnumbered">&lt;personname&gt;Norman Walsh&lt;/personname&gt;</programlisting>

<para>or it can contain the name with markup:</para>

<programlisting language="xml" linenumbering="unnumbered">&lt;personname&gt;&lt;givenname&gt;Norman&lt;/givenname&gt;
&lt;surname&gt;Walsh&lt;/surname&gt;&lt;/personname&gt;</programlisting>

<para>How the name is formatted depends on which form of markup is used
and which style is selected. Several styles are supported:</para>

<orderedlist>
<listitem>
<para>If the name contains no markup, it is simply formatted as is.
</para>
</listitem>
<listitem>
<para>If the style is “<literal>FAMILY-given</literal>”, it is formatted
with <code role="template">t:person-name-family-given</code> and generally produces
the family name in upper case followed by the given name. For example: “WALSH Norman”.
</para>
</listitem>
<listitem>
<para>If the style is “<literal>last-first</literal>”, it is formatted
with <code role="template">t:person-name-last-first</code> and generally produces
the family name followed by the given name separated by a comma.
For example: “Walsh, Norman”.
</para>
</listitem>
<listitem>
<para>If the style is “<literal>first-last</literal>”, it is formatted
with <code role="template">t:person-name-first-last</code> and generally produces
the given name followed by the family name. For example: “Norman Walsh”.
</para>
</listitem>
<listitem>
<para>Any other value raises <errorcode>dbe:INVALID-NAME-STYLE</errorcode>.
</para>
</listitem>
</orderedlist>

<note>
<title>Given names</title>
<para>Historically, DocBook used <tag>firstname</tag> for the given name of a person.
In DocBook 5.1, the <tag>givenname</tag> element was introduced as an
alternative. The stylesheets treat them identically.</para>
</note>

<para>The stylesheets attempt to determine what style to use for each
<tag>personname</tag>:</para>

<orderedlist>
<listitem>
<para>First, by looking at that the <tag class="attribute">role</tag> attribute
on that element. If any of styles from the
<varname>v:personal-name-styles</varname><indexterm><primary>variable</primary><secondary>v:personal-name-styles</secondary></indexterm> list appear in the role,
that style will be selected. (If more than one style appears, the
results are undefined.)</para>
</listitem>
<listitem>
<para>If the <tag>personname</tag> doesn’t identify a style, and if it’s a child of
<tag>author</tag>, <tag>editor</tag>, or <tag>othercredit</tag>, the <tag class="attribute">role</tag>
attirbute of its parent is inspected.</para>
</listitem>
<listitem>
<para>If a style still hasn’t been selected and the in-context language
localization file contains a “<literal>personname</literal>” key, the value of that
key is taken as the style.</para>
</listitem>
<listitem>
<para>Failing all those options, the <parameter>default-personal-name-style</parameter><indexterm><primary>param</primary><secondary>default-personal-name-style</secondary></indexterm>
is selected.</para>
</listitem>
</orderedlist>

<para>Personal names are notoriously complicated (see
<biblioref linkend="falsehoods-about-names"/>). DocBook includes several tags
for identifying parts of names:</para>

<variablelist>
<varlistentry><term><tag>firstname</tag> or <tag>givenname</tag></term>
<listitem>
<para>for a given name,</para>
</listitem>
</varlistentry>
<varlistentry><term><tag>surname</tag></term>
<listitem>
<para>for a family name,</para>
</listitem>
</varlistentry>
<varlistentry><term><tag>lineage</tag></term>
<listitem>
<para>for lineage (such as “Jr” or “III”),</para>
</listitem>
</varlistentry>
<varlistentry><term><tag>honorific</tag></term>
<listitem>
<para>for an honorific title (such as “Dr” or “Ms”), and</para>
</listitem>
</varlistentry>
<varlistentry><term><tag>othername</tag></term>
<listitem>
<para>for everything else.</para>
</listitem>
</varlistentry>
</variablelist>

<para>In all likelihood, if your document contains a variety of personal names,
you will need to use roles to disambiguate special cases and you will have to
provide alternate or additional templates to format them.</para>

</refsection>
</refentry>

<refentry xml:id="t_person-name-family-given"><indexterm><primary>template</primary><secondary>person-name-family-given</secondary></indexterm>
<?db filename="t_person-name-family-given"?>
<refmeta>
<refentrytitle>t:person-name-family-given</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}person-name-family-given</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:person-name-family-given</refname>
<refpurpose>Formats a personal name in the “FAMILY-given” style</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The “<literal>FAMILY-given</literal>” style formats a personal
name as the family name (<tag>surname</tag>) in upper-case, followed
by the first given name (if there is one), followed by the text
“<literal>[FAMILY given]</literal>”. See <code role="template">t:person-name</code>.</para>

<para><xref linkend="ex-family-given"/> shows an example of a personal
name to be formatted with the “<literal>FAMILY-given</literal>” style.</para>

<example xml:id="ex-family-given">
<title>The FAMILY-given name style</title>
<programlisting language="xml" linenumbering="unnumbered">
&lt;para&gt;The author is
&lt;personname role="FAMILY-given"&gt;
      &lt;givenname&gt;Norman&lt;/givenname&gt;
      &lt;surname&gt;Walsh&lt;/surname&gt;
      &lt;othername&gt;David&lt;/othername&gt;
   &lt;/personname&gt;.&lt;/para&gt;
</programlisting>
</example>

<para>That would be formatted as:</para>

<informalfigure xml:id="fig-family-given">
<para>The author is
<personname role="FAMILY-given">
<givenname>Norman</givenname><surname>Walsh</surname>
<othername>David</othername>
</personname>.</para>
</informalfigure>

</refsection>
</refentry>

<refentry xml:id="t_person-name-first-last"><indexterm><primary>template</primary><secondary>person-name-first-last</secondary></indexterm>
<?db filename="t_person-name-first-last"?>
<refmeta>
<refentrytitle>t:person-name-first-last</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}person-name-first-last</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:person-name-first-last</refname>
<refpurpose>Formats a personal name in the “first-last” style</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The “<literal>first-last</literal>” style formats a personal name
as: the first <tag>honorific</tag>, followed by
the given name, followed possibly by the “middle name”, followed by the
<tag>surname</tag>, followed by the <tag>lineage</tag>.
See <code role="template">t:person-name</code>.
</para>

<para>If an <tag>othername</tag> is provided and if
<parameter>othername-in-middle</parameter><indexterm><primary>param</primary><secondary>othername-in-middle</secondary></indexterm> is true, then the first
<tag>othername</tag> will be treated as a “middle name” and presented
between the given and family names.</para>

<para><xref linkend="ex-first-last"/> shows an example of a personal
name to be formatted with the “<literal>first-last</literal>” style.</para>

<example xml:id="ex-first-last">
<title>The first-last name style</title>
<programlisting language="xml" linenumbering="unnumbered">
&lt;para&gt;The author is
&lt;personname role="first-last"&gt;
      &lt;givenname&gt;Norman&lt;/givenname&gt;
      &lt;surname&gt;Walsh&lt;/surname&gt;
      &lt;othername&gt;David&lt;/othername&gt;
   &lt;/personname&gt;.&lt;/para&gt;
</programlisting>
</example>

<para>That would be formatted as:</para>

<informalfigure xml:id="fig-first-last">
<para>The author is
<personname role="first-last">
<givenname>Norman</givenname><surname>Walsh</surname>
<othername>David</othername>
</personname>.</para>
</informalfigure>

</refsection>
</refentry>

<refentry xml:id="t_person-name-last-first"><indexterm><primary>template</primary><secondary>person-name-last-first</secondary></indexterm>
<?db filename="t_person-name-last-first"?>
<refmeta>
<refentrytitle>t:person-name-last-first</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}person-name-last-first</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:person-name-last-first</refname>
<refpurpose>Formats a personal name in the “last-first” style</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The “<literal>last-first</literal>” style formats a personal
name as the family name (<tag>surname</tag>) followed
by the first given name (if there is one). If both a family name and a given name
are present, they are separated by a comma. See <code role="template">t:person-name</code>.</para>

<para><xref linkend="ex-last-first"/> shows an example of a personal
name to be formatted with the “<literal>last-first</literal>” style.</para>

<example xml:id="ex-last-first">
<title>The last-first name style</title>
<programlisting language="xml" linenumbering="unnumbered">
&lt;para&gt;The author is
&lt;personname role="last-first"&gt;
      &lt;givenname&gt;Norman&lt;/givenname&gt;
      &lt;surname&gt;Walsh&lt;/surname&gt;
      &lt;othername&gt;David&lt;/othername&gt;
   &lt;/personname&gt;.&lt;/para&gt;
</programlisting>
</example>

<para>That would be formatted as:</para>

<informalfigure xml:id="fig-last-first">
<para>The author is
<personname role="last-first">
<givenname>Norman</givenname><surname>Walsh</surname>
<othername>David</othername>
</personname>.</para>
</informalfigure>
</refsection>
</refentry>

<refentry xml:id="t_person-name-list"><indexterm><primary>template</primary><secondary>person-name-list</secondary></indexterm>
<?db filename="t_person-name-list"?>
<refmeta>
<refentrytitle>t:person-name-list</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}person-name-list</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:person-name-list</refname>
<refpurpose>Formats a sequence of personal names</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Formats a sequence of names:</para>
<itemizedlist>
<listitem>
<para>If the sequence consists of a single name, it is formatted.
</para>
</listitem>
<listitem>
<para>If the sequence consists of exactly two names, they are
formatted with “and” between them where “and” is taken from the
in-scope language localization file. It is the item with the key
“<literal>author-sep2</literal>”.</para>
</listitem>
<listitem>
<para>If the sequence consists of more than two names, all but the
last are separated by “, “ (the localization item with the key
“<literal>author-sep</literal>”). The last is separated by “, and”
(the localization item with the key “<literal>author-seplast</literal>”).
</para>
</listitem>
</itemizedlist>
</refsection>
</refentry>

<refentry xml:id="t_table-footnotes"><indexterm><primary>template</primary><secondary>table-footnotes</secondary></indexterm>
<?db filename="t_table-footnotes"?>
<refmeta>
<refentrytitle>t:table-footnotes</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}table-footnotes</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:table-footnotes</refname>
<refpurpose>Process table footnotes</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <code role="template">t:table-footnotes</code> template is called
to process footnotes at the bottom of a table.</para>
</refsection>
</refentry>

<refentry xml:id="t_top-nav"><indexterm><primary>template</primary><secondary>top-nav</secondary></indexterm>
<?db filename="t_top-nav"?>
<refmeta>
<refentrytitle>t:top-nav</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}top-nav</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:top-nav</refname>
<refpurpose>Generate top-of-page navigation links</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This template generates the top-of-page <tag>nav</tag> element. When
chunking is performed, this should provide links between pages.</para>
</refsection>
</refentry>

<refentry xml:id="t_video-fallback"><indexterm><primary>template</primary><secondary>video-fallback</secondary></indexterm>
<?db filename="t_video-fallback"?>
<refmeta>
<refentrytitle>t:video-fallback</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}video-fallback</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:video-fallback</refname>
<refpurpose>Generate fallback for video</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This template is called to generate fallback for an 
<tag namespace="http://www.w3.org/1999/xhtml">video</tag> element.
</para>
</refsection>
</refentry>

<refentry xml:id="t_xlink"><indexterm><primary>template</primary><secondary>xlink</secondary></indexterm>
<?db filename="t_xlink"?>
<refmeta>
<refentrytitle>t:xlink</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}xlink</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:xlink</refname>
<refpurpose>Supports hypertext linking</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>In DocBook, most elements can be links. The
<code role="template">t:xlink</code> template is called for each element that might
be participating in a link. This includes both simple links (any inline
element with an <tag class="attribute">xlink:href</tag> attribute) and extended links.
</para>
</refsection>
</refentry>

</reference>
<reference version="5.0" xml:id="modes">
<info>
  <?db filename="modes"?>
  <title>Mode reference</title>
</info>

<refentry xml:id="m_annotation-content"><indexterm><primary>mode</primary><secondary>annotation-content</secondary></indexterm>
<?db filename="m_annotation-content"?>
<refmeta>
<refentrytitle>m:annotation-content</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}annotation-content</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:annotation-content</refname>
<refpurpose>Mode for the content of annotations</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Annotations, like footnotes, have markers and wrappers that are necessary to support
their presentation. The <code role="mode">m:annotation-content</code> mode is used to process the
actual body of the annotation.</para>
</refsection>
</refentry>

<refentry xml:id="m_ansi"><indexterm><primary>mode</primary><secondary>ansi</secondary></indexterm>
<?db filename="m_ansi"?>
<refmeta>
<refentrytitle>m:ansi</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}ansi</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:ansi</refname>
<refpurpose>Mode for processing funcsynopsis elements in the “ANSI” style</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <tag>funcsynopsis</tag> element has several possible renderings.
This mode is used when the “ANSI” style of rendering has been selected
and a non-tabular layout is being used.
</para>
<para>See also: <code role="mode">m:ansi-table</code>, <code role="mode">m:kr</code>, <code role="mode">m:kr-table</code>,
<varname>funcsynopsis-default-style</varname><indexterm><primary>variable</primary><secondary>funcsynopsis-default-style</secondary></indexterm>,
<varname>funcsynopsis-table-threshold</varname><indexterm><primary>variable</primary><secondary>funcsynopsis-table-threshold</secondary></indexterm>, and
<varname>funcsynopsis-trailing-punctuation</varname><indexterm><primary>variable</primary><secondary>funcsynopsis-trailing-punctuation</secondary></indexterm>.
</para>
</refsection>
</refentry>

<refentry xml:id="m_ansi-table"><indexterm><primary>mode</primary><secondary>ansi-table</secondary></indexterm>
<?db filename="m_ansi-table"?>
<refmeta>
<refentrytitle>m:ansi-table</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}ansi-table</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:ansi-table</refname>
<refpurpose>Mode for processing funcsynopsis elements in the “ANSI” style</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <tag>funcsynopsis</tag> element has several possible renderings.
This mode is used when the “ANSI” style of rendering has been selected
and a table will be used for layout.
</para>
<para>See also: <code role="mode">m:ansi</code>, <code role="mode">m:kr</code>, <code role="mode">m:kr-table</code>,
<varname>funcsynopsis-default-style</varname><indexterm><primary>variable</primary><secondary>funcsynopsis-default-style</secondary></indexterm>,
<varname>funcsynopsis-table-threshold</varname><indexterm><primary>variable</primary><secondary>funcsynopsis-table-threshold</secondary></indexterm>, and
<varname>funcsynopsis-trailing-punctuation</varname><indexterm><primary>variable</primary><secondary>funcsynopsis-trailing-punctuation</secondary></indexterm>.
</para>
</refsection>
</refentry>

<refentry xml:id="m_attributes"><indexterm><primary>mode</primary><secondary>attributes</secondary></indexterm>
<?db filename="m_attributes"?>
<refmeta>
<refentrytitle>m:attributes</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}attributes</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:attributes</refname>
<refpurpose>Mode for processing attributes</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Each DocBook element in the source document produces a primary HTML element
in the result document. The attributes associated with that primary element are
obtained by processing the DocBook element in the <code role="mode">m:attributes</code> mode.
</para>
</refsection>
</refentry>

<refentry xml:id="m_biblioentry"><indexterm><primary>mode</primary><secondary>biblioentry</secondary></indexterm>
<?db filename="m_biblioentry"?>
<refmeta>
<refentrytitle>m:biblioentry</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}biblioentry</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:biblioentry</refname>
<refpurpose>Mode for processing <tag>biblioentry</tag> bibliographic entries</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>DocBook bibliographic entries come in two forms:
<link xlink:href="https://tdg.docbook.org/tdg/5.2/ch02.html#s.bibliography">raw
and cooked</link>. The <tag>biblioentry</tag> form is the “raw” form. The
<code role="mode">m:biblioentry</code> mode is used to process these elements.
</para>
</refsection>
</refentry>

<refentry xml:id="m_bibliomixed"><indexterm><primary>mode</primary><secondary>bibliomixed</secondary></indexterm>
<?db filename="m_bibliomixed"?>
<refmeta>
<refentrytitle>m:bibliomixed</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}bibliomixed</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:bibliomixed</refname>
<refpurpose>Mode for processing <tag>bibliomixed</tag> bibliographic entries</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>DocBook bibliographic entries come in two forms:
<link xlink:href="https://tdg.docbook.org/tdg/5.2/ch02.html#s.bibliography">raw
and cooked</link>. The <tag>bibliomixed</tag> form is the “cooked” form. The
<code role="mode">m:bibliomixed</code> mode is used to process these elements.
</para>
</refsection>
</refentry>

<refentry xml:id="m_callout-bug"><indexterm><primary>mode</primary><secondary>callout-bug</secondary></indexterm>
<?db filename="m_callout-bug"?>
<refmeta>
<refentrytitle>m:callout-bug</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}callout-bug</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:callout-bug</refname>
<refpurpose>Mode for producing callout marks</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Callouts are processed in this mode to produce the callout marks
(or “bugs”) used to indicate cross references between the callouts and their
corresponding areas. This mode should only produce the mark, for example
“①”. See <code role="mode">m:callout-link</code>.
</para>
<para>By default, callouts are numbered sequentially from 1 within each listing.
However, a 
<tag class="pi">db</tag><indexterm><primary>db processing instruction</primary>
</indexterm> processing instruction placed in the
<tag>areaspec</tag> can specify a different starting number.
If the <literal>starting-callout-number</literal><indexterm>
<primary>db processing instruction</primary>
<secondary>starting-callout-number pseudo-attribute</secondary>
</indexterm> pseudo-attribute is an integer, that’s used as the starting
number. If it has the special value “<literal>continues</literal>”, then numbering
continues sequentially after the last callout number used in the preceding verbatim listing.
</para>
</refsection>
</refentry>

<refentry xml:id="m_callout-link"><indexterm><primary>mode</primary><secondary>callout-link</secondary></indexterm>
<?db filename="m_callout-link"?>
<refmeta>
<refentrytitle>m:callout-link</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}callout-link</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:callout-link</refname>
<refpurpose>Mode for producing callout links</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Callouts in a <tag>calloutlist</tag> can link back to the corresponding
point in the listing or on the image. This mode is used to produce those links.</para>
</refsection>
</refentry>

<refentry xml:id="m_chunk-cleanup"><indexterm><primary>mode</primary><secondary>chunk-cleanup</secondary></indexterm>
<?db filename="m_chunk-cleanup"?>
<refmeta>
<refentrytitle>m:chunk-cleanup</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}chunk-cleanup</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:chunk-cleanup</refname>
<refpurpose>Post-process HTML chunks</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Every HTML chunk is processed with the
<code role="mode">m:chunk-cleanup</code> mode. This mode makes sure that footnotes
and annotations appear in the chunks where their references appear,
adds navigation to the top and bottom of each chunk, etc. 
See <xref linkend="chunking"/>.
</para>
</refsection>
</refentry>

<refentry xml:id="m_chunk-filename"><indexterm><primary>mode</primary><secondary>chunk-filename</secondary></indexterm>
<?db filename="m_chunk-filename"?>
<refmeta>
<refentrytitle>m:chunk-filename</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}chunk-filename</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:chunk-filename</refname>
<refpurpose>Selects the chunk filename</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Every element that is identified as a chunk,
see <xref linkend="chunking"/>, will be called in the <code role="mode">m:chunk-filename</code> mode
to obtain the filename for that chunk.</para>
</refsection>
</refentry>

<refentry xml:id="m_chunk-output"><indexterm><primary>mode</primary><secondary>chunk-output</secondary></indexterm>
<?db filename="m_chunk-output"?>
<refmeta>
<refentrytitle>m:chunk-output</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}chunk-output</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:chunk-output</refname>
<refpurpose>Performs the final-pass of processing on chunks</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Chunks (see <xref linkend="chunking"/>) are constructed in several
passes. The last pass is in the <code role="mode">m:chunk-output</code> mode. This mode makes
last minute adjustments and produces the individual chunk documents.</para>
</refsection>
</refentry>

<refentry xml:id="m_chunk-title"><indexterm><primary>mode</primary><secondary>chunk-title</secondary></indexterm>
<?db filename="m_chunk-title"?>
<refmeta>
<refentrytitle>m:chunk-title</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}chunk-title</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:chunk-title</refname>
<refpurpose>Generates the page title for the chunk</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The page title, the
<tag namespace="http://www.w3.org/1999/xhtml">title</tag> in the HTML
<tag namespace="http://www.w3.org/1999/xhtml">head</tag>, is generated by processing
the heading in this mode. This mode is responsible for removing markup from the title.
</para>
</refsection>
</refentry>

<refentry xml:id="m_chunk-write"><indexterm><primary>mode</primary><secondary>chunk-write</secondary></indexterm>
<?db filename="m_chunk-write"?>
<refmeta>
<refentrytitle>m:chunk-write</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}chunk-write</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:chunk-write</refname>
<refpurpose>Create result documents for chunks</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When all of the chunk processing is finished, each chunk is
processed in <code role="mode">m:chunk-write</code> mode. By default, this mode
creates XSL result documents for each chunk.
</para>
</refsection>
</refentry>

<refentry xml:id="m_copyright-years"><indexterm><primary>mode</primary><secondary>copyright-years</secondary></indexterm>
<?db filename="m_copyright-years"?>
<refmeta>
<refentrytitle>m:copyright-years</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}copyright-years</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:copyright-years</refname>
<refpurpose>Mode for processing copyright years</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <tag>year</tag> elements in a <tag>copyright</tag> are processed
in this mode. This mode handles the separation (and possible collapsing) of
years.</para>
<para>See also <varname>copyright-year-range-separator</varname><indexterm><primary>variable</primary><secondary>copyright-year-range-separator</secondary></indexterm>
and <varname>copyright-year-separator</varname><indexterm><primary>variable</primary><secondary>copyright-year-separator</secondary></indexterm>,
and <varname>copyright-collapse-years</varname><indexterm><primary>variable</primary><secondary>copyright-collapse-years</secondary></indexterm>.</para>
</refsection>
</refentry>

<refentry xml:id="m_crossref"><indexterm><primary>mode</primary><secondary>crossref</secondary></indexterm>
<?db filename="m_crossref"?>
<refmeta>
<refentrytitle>m:crossref</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}crossref</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:crossref</refname>
<refpurpose>Produce a cross-reference to the element</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <code role="mode">m:crossref</code> mode is used to generate a cross-reference.</para>
</refsection>
</refentry>

<refentry xml:id="m_crossref-inherit-separator"><indexterm><primary>mode</primary><secondary>crossref-inherit-separator</secondary></indexterm>
<?db filename="m_crossref-inherit-separator"?>
<refmeta>
<refentrytitle>m:crossref-inherit-separator</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}crossref-inherit-separator</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:crossref-inherit-separator</refname>
<refpurpose>Produce the inherit separator</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <code role="mode">m:crossref-inherit-separator</code> mode is used to generate the
text that should follow the element when an inherited reference is used.
</para>
</refsection>
</refentry>

<refentry xml:id="m_crossref-label"><indexterm><primary>mode</primary><secondary>crossref-label</secondary></indexterm>
<?db filename="m_crossref-label"?>
<refmeta>
<refentrytitle>m:crossref-label</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}crossref-label</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:crossref-label</refname>
<refpurpose>Produce the label in a cross-reference</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <code role="mode">m:crossref-label</code> mode is used to generate the
label in a cross-reference.
</para>
</refsection>
</refentry>

<refentry xml:id="m_crossref-label-separator"><indexterm><primary>mode</primary><secondary>crossref-label-separator</secondary></indexterm>
<?db filename="m_crossref-label-separator"?>
<refmeta>
<refentrytitle>m:crossref-label-separator</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}crossref-label-separator</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:crossref-label-separator</refname>
<refpurpose>Produce the cross-reference label separator</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <code role="mode">m:crossref-label-separator</code> mode is used to generate the
separator between a label and what follows it in a cross-reference.</para>
</refsection>
</refentry>

<refentry xml:id="m_crossref-number"><indexterm><primary>mode</primary><secondary>crossref-number</secondary></indexterm>
<?db filename="m_crossref-number"?>
<refmeta>
<refentrytitle>m:crossref-number</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}crossref-number</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:crossref-number</refname>
<refpurpose>Produce the number in a cross-reference</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <code role="mode">m:crossref-number</code> mode is used to generate the
number in a cross-reference.</para>
</refsection>
</refentry>

<refentry xml:id="m_crossref-number-separator"><indexterm><primary>mode</primary><secondary>crossref-number-separator</secondary></indexterm>
<?db filename="m_crossref-number-separator"?>
<refmeta>
<refentrytitle>m:crossref-number-separator</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}crossref-number-separator</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:crossref-number-separator</refname>
<refpurpose>Produce the cross-reference number separator</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <code role="mode">m:crossref-number-separator</code> mode is used to generate the
separator between a number and what follows it in a cross-reference.</para>
</refsection>
</refentry>

<refentry xml:id="m_crossref-prefix"><indexterm><primary>mode</primary><secondary>crossref-prefix</secondary></indexterm>
<?db filename="m_crossref-prefix"?>
<refmeta>
<refentrytitle>m:crossref-prefix</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}crossref-prefix</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:crossref-prefix</refname>
<refpurpose>Produce the cross-reference prefix</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <code role="mode">m:crossref-prefix</code> mode is used to generate any text
that precedes a cross reference.</para>
</refsection>
</refentry>

<refentry xml:id="m_crossref-suffix"><indexterm><primary>mode</primary><secondary>crossref-suffix</secondary></indexterm>
<?db filename="m_crossref-suffix"?>
<refmeta>
<refentrytitle>m:crossref-suffix</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}crossref-suffix</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:crossref-suffix</refname>
<refpurpose>Produce the cross-reference suffix</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <code role="mode">m:crossref-suffix</code> mode is used to generate any text
that follows a cross reference.</para>
</refsection>
</refentry>

<refentry xml:id="m_crossref-title"><indexterm><primary>mode</primary><secondary>crossref-title</secondary></indexterm>
<?db filename="m_crossref-title"?>
<refmeta>
<refentrytitle>m:crossref-title</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}crossref-title</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:crossref-title</refname>
<refpurpose>Produce the title in a cross-reference</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <code role="mode">m:crossref-title</code> mode formats the title in a cross-reference.
</para>
</refsection>
</refentry>

<refentry xml:id="m_details"><indexterm><primary>mode</primary><secondary>details</secondary></indexterm>
<?db filename="m_details"?>
<refmeta>
<refentrytitle>m:details</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}details</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:details</refname>
<refpurpose>Produce details about a media object</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This mode is used to produce the details about a media object, such as a long
description.</para>
</refsection>
</refentry>

<refentry xml:id="m_details-attribute"><indexterm><primary>mode</primary><secondary>details-attribute</secondary></indexterm>
<?db filename="m_details-attribute"?>
<refmeta>
<refentrytitle>m:details-attribute</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}details-attribute</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:details-attribute</refname>
<refpurpose>Produce the short summary for a media object</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This mode is used to produce a short detail summary about a
media object. This is most often used as the alt text for the
object.</para>
</refsection>
</refentry>

<refentry xml:id="m_docbook"><indexterm><primary>mode</primary><secondary>docbook</secondary></indexterm>
<?db filename="m_docbook"?>
<refmeta>
<refentrytitle>m:docbook</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}docbook</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:docbook</refname>
<refpurpose>The primary mode for processing DocBook elements</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <code role="mode">m:docbook</code> mode is the primary mode for processing
DocBook elements. Critically, this means that if you import the DocBook stylesheets
and wish to override some of the templates, you <emphasis>must</emphasis> make sure
that those templates are defined in the <code role="mode">m:docbook</code> mode.</para>
</refsection>
</refentry>

<refentry xml:id="m_footnote-number"><indexterm><primary>mode</primary><secondary>footnote-number</secondary></indexterm>
<?db filename="m_footnote-number"?>
<refmeta>
<refentrytitle>m:footnote-number</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}footnote-number</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:footnote-number</refname>
<refpurpose>Mode for generating footnote numbers</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>A <tag>footnote</tag> processed in <code role="mode">m:footnote-number</code> mode
renders the footnote number (or other symbol) associated with that footnote.
</para>
</refsection>
</refentry>

<refentry xml:id="m_footnotes"><indexterm><primary>mode</primary><secondary>footnotes</secondary></indexterm>
<?db filename="m_footnotes"?>
<refmeta>
<refentrytitle>m:footnotes</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}footnotes</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:footnotes</refname>
<refpurpose>Mode for processing footnotes</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Perhaps unsurprisingly, <tag>footnote</tag> elements are processed
in <code role="mode">m:footnotes</code>. On the first pass, they’re rendered inline with appropriate
footnote markers. The “chunk cleanup” pass moves them to an appropriate location.</para>
</refsection>
</refentry>

<refentry xml:id="m_generate-titlepage"><indexterm><primary>mode</primary><secondary>generate-titlepage</secondary></indexterm>
<?db filename="m_generate-titlepage"?>
<refmeta>
<refentrytitle>m:generate-titlepage</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}generate-titlepage</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:generate-titlepage</refname>
<refpurpose>Generate a title page</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>All “block” elements that have a <tag>title</tag> (or another
feature that constitutes a title) are processed in the
<code role="mode">m:generate-titlepage</code> mode to generate their “title page”.
Don’t be mislead by the term “title page”. For many elements, the title page
consists of nothing more than a single header element.
</para>
</refsection>
</refentry>

<refentry xml:id="m_headline"><indexterm><primary>mode</primary><secondary>headline</secondary></indexterm>
<?db filename="m_headline"?>
<refmeta>
<refentrytitle>m:headline</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}headline</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:headline</refname>
<refpurpose>Produce a headline title</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This mode produces the “headline” title for an element. This generally appears in
the text where the element is formatted, but may also occur in the table of contents, the index,
and other places.</para>
</refsection>
</refentry>

<refentry xml:id="m_headline-label"><indexterm><primary>mode</primary><secondary>headline-label</secondary></indexterm>
<?db filename="m_headline-label"?>
<refmeta>
<refentrytitle>m:headline-label</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}headline-label</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:headline-label</refname>
<refpurpose>Produce the label for a headline title</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <code role="mode">m:headline-label</code> mode is used to generate the
label in a headline.
</para>
</refsection>
</refentry>

<refentry xml:id="m_headline-label-separator"><indexterm><primary>mode</primary><secondary>headline-label-separator</secondary></indexterm>
<?db filename="m_headline-label-separator"?>
<refmeta>
<refentrytitle>m:headline-label-separator</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}headline-label-separator</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:headline-label-separator</refname>
<refpurpose>Produce the headline label separator</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <code role="mode">m:headline-label-separator</code> mode is used to generate
the separator that follows a label
in a headline.
</para>
</refsection>
</refentry>

<refentry xml:id="m_headline-number"><indexterm><primary>mode</primary><secondary>headline-number</secondary></indexterm>
<?db filename="m_headline-number"?>
<refmeta>
<refentrytitle>m:headline-number</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}headline-number</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:headline-number</refname>
<refpurpose>Produce the headline number</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <code role="mode">m:headline-number</code> mode is used to generate
the number
in a headline.</para>
</refsection>
</refentry>

<refentry xml:id="m_headline-number-separator"><indexterm><primary>mode</primary><secondary>headline-number-separator</secondary></indexterm>
<?db filename="m_headline-number-separator"?>
<refmeta>
<refentrytitle>m:headline-number-separator</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}headline-number-separator</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:headline-number-separator</refname>
<refpurpose>Produce the headline number separator</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <code role="mode">m:headline-number-separator</code> mode is used to
generate the number separator
in a headline.
</para>
</refsection>
</refentry>

<refentry xml:id="m_headline-prefix"><indexterm><primary>mode</primary><secondary>headline-prefix</secondary></indexterm>
<?db filename="m_headline-prefix"?>
<refmeta>
<refentrytitle>m:headline-prefix</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}headline-prefix</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:headline-prefix</refname>
<refpurpose>Generate the headline prefix</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <code role="mode">m:headline-prefix</code> mode is used to
generate any text that should precede the text of
a headline.
</para>
</refsection>
</refentry>

<refentry xml:id="m_headline-suffix"><indexterm><primary>mode</primary><secondary>headline-suffix</secondary></indexterm>
<?db filename="m_headline-suffix"?>
<refmeta>
<refentrytitle>m:headline-suffix</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}headline-suffix</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:headline-suffix</refname>
<refpurpose>Produce the headline suffix</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <code role="mode">m:headline-suffix</code> mode is used to
generate any text that should follow the text of
a headline.
</para>
</refsection>
</refentry>

<refentry xml:id="m_headline-title"><indexterm><primary>mode</primary><secondary>headline-title</secondary></indexterm>
<?db filename="m_headline-title"?>
<refmeta>
<refentrytitle>m:headline-title</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}headline-title</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:headline-title</refname>
<refpurpose>Produce the headline title</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <code role="mode">m:headline-title</code> mode is used to format the
title element
in a headline.
</para>
</refsection>
</refentry>

<refentry xml:id="m_highlight-options"><indexterm><primary>mode</primary><secondary>highlight-options</secondary></indexterm>
<?db filename="m_highlight-options"?>
<refmeta>
<refentrytitle>m:highlight-options</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}highlight-options</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:highlight-options</refname>
<refpurpose>Determine the syntax highlighting options for an element</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>A verbatim element that will be syntax highlighted is processed in this mode
to determine the options for the syntax highlighter. The template must return a map.
The default template returns the <tag class="attribute">language</tag> attribute if one is present.
</para>
</refsection>
</refentry>

<refentry xml:id="m_html-body-script"><indexterm><primary>mode</primary><secondary>html-body-script</secondary></indexterm>
<?db filename="m_html-body-script"?>
<refmeta>
<refentrytitle>m:html-body-script</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}html-body-script</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:html-body-script</refname>
<refpurpose>Add script elements to the end of a document</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>One way to assure that JavaScript will only be invoked by the user agent
after the DOM tree has been constructed is to put the script elements for that
code at the end of the file.</para>
<para>The root element of each result document is formatted once in
the <code role="mode">m:html-body-script</code> mode. Any elements constructed in
this mode will be added to the end of the HTML
<tag namespace="http://www.w3.org/1999/xhtml">body</tag>.
The built-in implementation does nothing; this mode exists as an extensibility
point. See also <code role="mode">m:html-head-script</code>.</para>
</refsection>
</refentry>

<refentry xml:id="m_html-head"><indexterm><primary>mode</primary><secondary>html-head</secondary></indexterm>
<?db filename="m_html-head"?>
<refmeta>
<refentrytitle>m:html-head</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}html-head</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:html-head</refname>
<refpurpose>Construct the HTML
<tag namespace="http://www.w3.org/1999/xhtml">head</tag> element</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <code role="mode">m:html-head</code> mode is used to produce the
<tag namespace="http://www.w3.org/1999/xhtml">head</tag> element.
This should include all of the metadata, links, scripts, etc.
necessary to render the document correctly.
</para>
<para>It is not supposed to be necessary to override this template.
You can customize what is produced with the
<code role="mode">m:html-head-script</code>, <code role="mode">m:html-head-links</code>,
and <code role="mode">m:html-head-last</code> modes.</para>
<para>The order of elements produced in the
<tag namespace="http://www.w3.org/1999/xhtml">head</tag> is:</para>

<orderedlist>
<listitem>
<para>Elements generated by the stylesheets automatically
(<tag namespace="http://www.w3.org/1999/xhtml">title</tag>, scripts,
links, and other elements).
</para>
</listitem>
<listitem>
<para>Elements generated in <code role="mode">m:html-head-script</code> mode.
</para>
</listitem>
<listitem>
<para>Elements generated in <code role="mode">m:html-head-links</code> mode.
</para>
</listitem>
<listitem>
<para>Elements in the HTML namespace that are in the source document’s <tag>info</tag>.
</para>
</listitem>
<listitem>
<para>Elements generated in <code role="mode">m:html-head-last</code> mode.
</para>
</listitem>
</orderedlist>

<para>In addition, elements generated in <code role="mode">m:html-body-script</code>
occur near the end of the HTML
<tag namespace="http://www.w3.org/1999/xhtml">body</tag> element.</para>
</refsection>
</refentry>

<refentry xml:id="m_html-head-last"><indexterm><primary>mode</primary><secondary>html-head-last</secondary></indexterm>
<?db filename="m_html-head-last"?>
<refmeta>
<refentrytitle>m:html-head-last</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}html-head-last</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:html-head-last</refname>
<refpurpose>Add elements to the end of the head of a document</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Any elements constructed in <code role="mode">m:html-head-last</code> mode
will be added to the very end of the HTML
<tag namespace="http://www.w3.org/1999/xhtml">head</tag> element.
The built-in implementation does nothing; this mode exists as an extensibility
point.</para>
</refsection>
</refentry>

<refentry xml:id="m_html-head-links"><indexterm><primary>mode</primary><secondary>html-head-links</secondary></indexterm>
<?db filename="m_html-head-links"?>
<refmeta>
<refentrytitle>m:html-head-links</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}html-head-links</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:html-head-links</refname>
<refpurpose>Add link elements to the head of a document</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Any elements constructed in <code role="mode">m:html-head-links</code> mode
will be added to the HTML
<tag namespace="http://www.w3.org/1999/xhtml">head</tag> element.
The built-in implementation does nothing; this mode exists as an extensibility
point.</para>
</refsection>
</refentry>

<refentry xml:id="m_html-head-script"><indexterm><primary>mode</primary><secondary>html-head-script</secondary></indexterm>
<?db filename="m_html-head-script"?>
<refmeta>
<refentrytitle>m:html-head-script</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}html-head-script</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:html-head-script</refname>
<refpurpose>Add link elements to the head of a document</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Any elements constructed in <code role="mode">m:html-head-script</code> mode
will be added to the HTML
<tag namespace="http://www.w3.org/1999/xhtml">head</tag> element.
The built-in implementation does nothing; this mode exists as an extensibility
point.</para>
</refsection>
</refentry>

<refentry xml:id="m_htmltable"><indexterm><primary>mode</primary><secondary>htmltable</secondary></indexterm>
<?db filename="m_htmltable"?>
<refmeta>
<refentrytitle>m:htmltable</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}htmltable</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:htmltable</refname>
<refpurpose>Mode for processing HTML table elements</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Where DocBook uses the HTML table model, it copies the definitions
of the table elements (and the attributes on those elements) from HTML.
The <code role="mode">m:htmltable</code> mode simply copies those elements and attributes
to the result. When processing the contents of table cells, processing switches
back to <code role="mode">m:docbook</code> mode.
</para>
</refsection>
</refentry>

<refentry xml:id="m_imagemap"><indexterm><primary>mode</primary><secondary>imagemap</secondary></indexterm>
<?db filename="m_imagemap"?>
<refmeta>
<refentrytitle>m:imagemap</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}imagemap</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:imagemap</refname>
<refpurpose>Construct an HTML imagemap</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <tag>imageobjectco</tag> element is processed in this mode to construct
an HTML image
<tag namespace="http://www.w3.org/1999/xhtml">map</tag>.</para>
</refsection>
</refentry>

<refentry xml:id="m_index-div"><indexterm><primary>mode</primary><secondary>index-div</secondary></indexterm>
<?db filename="m_index-div"?>
<refmeta>
<refentrytitle>m:index-div</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}index-div</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:index-div</refname>
<refpurpose>Mode for generating divisions in an index</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Index processing, that is, the process of
<emphasis>generating</emphasis> an index, involves collecting all of
the <tag>indexterm</tag>s together, collating them, and rendering
them.
</para>
<para>The terms are grouped alphabetically and each group is processed
in the <code role="mode">m:index-div</code> mode.</para>
</refsection>
</refentry>

<refentry xml:id="m_index-primary"><indexterm><primary>mode</primary><secondary>index-primary</secondary></indexterm>
<?db filename="m_index-primary"?>
<refmeta>
<refentrytitle>m:index-primary</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}index-primary</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:index-primary</refname>
<refpurpose>Mode for generating primary index entries</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When generating an index, each distinct <tag>indexterm</tag> is
processed in <code role="mode">m:index-primary</code> mode to output its primary
entry.</para>
</refsection>
</refentry>

<refentry xml:id="m_index-secondary"><indexterm><primary>mode</primary><secondary>index-secondary</secondary></indexterm>
<?db filename="m_index-secondary"?>
<refmeta>
<refentrytitle>m:index-secondary</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}index-secondary</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:index-secondary</refname>
<refpurpose>Mode for generating secondary index entries</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When generating an index, each distinct secondary <tag>indexterm</tag> is
processed in <code role="mode">m:index-secondary</code> mode to output its secondary
entry.</para>
</refsection>
</refentry>

<refentry xml:id="m_index-see"><indexterm><primary>mode</primary><secondary>index-see</secondary></indexterm>
<?db filename="m_index-see"?>
<refmeta>
<refentrytitle>m:index-see</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}index-see</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:index-see</refname>
<refpurpose>Mode for generating index “see” entries</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When generating an index, each <tag>indexterm</tag> that defines a
“see” index cross-reference is
processed in <code role="mode">m:index-see</code> mode to output the cross-reference.
</para>
</refsection>
</refentry>

<refentry xml:id="m_index-seealso"><indexterm><primary>mode</primary><secondary>index-seealso</secondary></indexterm>
<?db filename="m_index-seealso"?>
<refmeta>
<refentrytitle>m:index-seealso</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}index-seealso</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:index-seealso</refname>
<refpurpose>Mode for generating index “see also” entries</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When generating an index, each <tag>indexterm</tag> that defines a
“see also” index cross-reference is
processed in <code role="mode">m:index-seealso</code> mode to output the cross-reference.
</para>
</refsection>
</refentry>

<refentry xml:id="m_index-tertiary"><indexterm><primary>mode</primary><secondary>index-tertiary</secondary></indexterm>
<?db filename="m_index-tertiary"?>
<refmeta>
<refentrytitle>m:index-tertiary</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}index-tertiary</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:index-tertiary</refname>
<refpurpose>Mode for generating index tertiary entries</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When generating an index, each distinct tertiary <tag>indexterm</tag> is
processed in <code role="mode">m:index-tertiary</code> mode to output its tertiary
entry.</para>
</refsection>
</refentry>

<refentry xml:id="m_kr"><indexterm><primary>mode</primary><secondary>kr</secondary></indexterm>
<?db filename="m_kr"?>
<refmeta>
<refentrytitle>m:kr</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}kr</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:kr</refname>
<refpurpose>Mode for processing funcsynopsis elements in the “K&amp;R” style</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <tag>funcsynopsis</tag> element has several possible renderings.
This mode is used when the “K&amp;R” style of rendering has been selected
and a non-tabular layout is being used.
</para>
<para>See also: <code role="mode">m:kr-table</code>, <code role="mode">m:ansi</code>, <code role="mode">m:ansi-table</code>,
<varname>funcsynopsis-default-style</varname><indexterm><primary>variable</primary><secondary>funcsynopsis-default-style</secondary></indexterm>,
<varname>funcsynopsis-table-threshold</varname><indexterm><primary>variable</primary><secondary>funcsynopsis-table-threshold</secondary></indexterm>, and
<varname>funcsynopsis-trailing-punctuation</varname><indexterm><primary>variable</primary><secondary>funcsynopsis-trailing-punctuation</secondary></indexterm>.
</para>
</refsection>
</refentry>

<refentry xml:id="m_kr-args"><indexterm><primary>mode</primary><secondary>kr-args</secondary></indexterm>
<?db filename="m_kr-args"?>
<refmeta>
<refentrytitle>m:kr-args</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}kr-args</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:kr-args</refname>
<refpurpose>Mode for processing function arguments</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This mode is used to process the parameters of a <tag>funcsynopsis</tag>
in th K&amp;R style. See <parameter>funcsynopsis-default-style</parameter><indexterm><primary>param</primary><secondary>funcsynopsis-default-style</secondary></indexterm>.</para>
</refsection>
</refentry>

<refentry xml:id="m_kr-table"><indexterm><primary>mode</primary><secondary>kr-table</secondary></indexterm>
<?db filename="m_kr-table"?>
<refmeta>
<refentrytitle>m:kr-table</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}kr-table</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:kr-table</refname>
<refpurpose>Mode for processing funcsynopsis elements in the “K&amp;R” style</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <tag>funcsynopsis</tag> element has several possible renderings.
This mode is used when the “K&amp;R” style of rendering has been selected
and a table will be used for layout.
</para>
<para>See also: <code role="mode">m:kr</code>, <code role="mode">m:ansi</code>, <code role="mode">m:ansi-table</code>,
<varname>funcsynopsis-default-style</varname><indexterm><primary>variable</primary><secondary>funcsynopsis-default-style</secondary></indexterm>,
<varname>funcsynopsis-table-threshold</varname><indexterm><primary>variable</primary><secondary>funcsynopsis-table-threshold</secondary></indexterm>, and
<varname>funcsynopsis-trailing-punctuation</varname><indexterm><primary>variable</primary><secondary>funcsynopsis-trailing-punctuation</secondary></indexterm>.
</para>
</refsection>
</refentry>

<refentry xml:id="m_kr-table-args"><indexterm><primary>mode</primary><secondary>kr-table-args</secondary></indexterm>
<?db filename="m_kr-table-args"?>
<refmeta>
<refentrytitle>m:kr-table-args</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}kr-table-args</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:kr-table-args</refname>
<refpurpose>Mode for processing function arguments in a table</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When the tabular presentation of a “K&amp;R”
<tag>funcsynopsis</tag> is being generated, this mode is used to process
the function arguments.
</para>
</refsection>
</refentry>

<refentry xml:id="m_link"><indexterm><primary>mode</primary><secondary>link</secondary></indexterm>
<?db filename="m_link"?>
<refmeta>
<refentrytitle>m:link</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}link</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:link</refname>
<refpurpose>Process inline links</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>DocBook allows <tag class="attribute">xlink:href</tag> to appear on most elements.
All inline elements are processed in <code role="mode">m:link</code> mode to add
a link around them if they specify an <tag class="attribute">xlink:href</tag>.
</para>
</refsection>
</refentry>

<refentry xml:id="m_list-of-equations"><indexterm><primary>mode</primary><secondary>list-of-equations</secondary></indexterm>
<?db filename="m_list-of-equations"?>
<refmeta>
<refentrytitle>m:list-of-equations</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}list-of-equations</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:list-of-equations</refname>
<refpurpose>Mode for generating a list of equations</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>If <parameter>lists-of-equations</parameter><indexterm><primary>param</primary><secondary>lists-of-equations</secondary></indexterm> <glossterm>is true</glossterm>, then a
list of equations will be generated. This mode is used to process the
<tag>equation</tag> elements (if any) to
produce that list.
</para>
</refsection>
</refentry>

<refentry xml:id="m_list-of-examples"><indexterm><primary>mode</primary><secondary>list-of-examples</secondary></indexterm>
<?db filename="m_list-of-examples"?>
<refmeta>
<refentrytitle>m:list-of-examples</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}list-of-examples</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:list-of-examples</refname>
<refpurpose>Mode for generating a list of examples</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>If <parameter>lists-of-examples</parameter><indexterm><primary>param</primary><secondary>lists-of-examples</secondary></indexterm> <glossterm>is true</glossterm>, then a
list of examples will be generated. This mode is used to process the
<tag>example</tag> elements (if any) to
produce that list.
</para>
</refsection>
</refentry>

<refentry xml:id="m_list-of-figures"><indexterm><primary>mode</primary><secondary>list-of-figures</secondary></indexterm>
<?db filename="m_list-of-figures"?>
<refmeta>
<refentrytitle>m:list-of-figures</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}list-of-figures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:list-of-figures</refname>
<refpurpose>Mode for generating a list of figures</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>If <parameter>lists-of-figures</parameter><indexterm><primary>param</primary><secondary>lists-of-figures</secondary></indexterm> <glossterm>is true</glossterm>, then a
list of figures will be generated. This mode is used to process the
<tag>figure</tag> elements (if any) to
produce that list.
</para>
</refsection>
</refentry>

<refentry xml:id="m_list-of-procedures"><indexterm><primary>mode</primary><secondary>list-of-procedures</secondary></indexterm>
<?db filename="m_list-of-procedures"?>
<refmeta>
<refentrytitle>m:list-of-procedures</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}list-of-procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:list-of-procedures</refname>
<refpurpose>Mode for generating a list of procedures</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>If <parameter>lists-of-procedures</parameter><indexterm><primary>param</primary><secondary>lists-of-procedures</secondary></indexterm> <glossterm>is true</glossterm>, then a
list of procedures will be generated. This mode is used to process the
<tag>procedure</tag> elements (if any) to
produce that list.
</para>
</refsection>
</refentry>

<refentry xml:id="m_list-of-tables"><indexterm><primary>mode</primary><secondary>list-of-tables</secondary></indexterm>
<?db filename="m_list-of-tables"?>
<refmeta>
<refentrytitle>m:list-of-tables</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}list-of-tables</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:list-of-tables</refname>
<refpurpose>Mode for generating a list of tables</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>If <parameter>lists-of-tables</parameter><indexterm><primary>param</primary><secondary>lists-of-tables</secondary></indexterm> <glossterm>is true</glossterm>, then a
list of tables will be generated. This mode is used to process the
<tag>table</tag> elements (if any) to
produce that list.
</para>
</refsection>
</refentry>

<refentry xml:id="m_list-of-titles"><indexterm><primary>mode</primary><secondary>list-of-titles</secondary></indexterm>
<?db filename="m_list-of-titles"?>
<refmeta>
<refentrytitle>m:list-of-titles</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}list-of-titles</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:list-of-titles</refname>
<refpurpose>Mode for generating a list-of-titles</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When a list of titles (figures, tables, equations, etc.) is created, each
element is processed in this mode to produce the list item that will appear in the
list.</para>
</refsection>
</refentry>

<refentry xml:id="m_mediaobject-info"><indexterm><primary>mode</primary><secondary>mediaobject-info</secondary></indexterm>
<?db filename="m_mediaobject-info"?>
<refmeta>
<refentrytitle>m:mediaobject-info</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}mediaobject-info</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:mediaobject-info</refname>
<refpurpose>Compute properties for a media object</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The media object elements are processed in this mode to extract
their properties (input and output URIs, content types, etc.).
See <xref linkend="processing-mediaobjects"/>.</para>
</refsection>
</refentry>

<refentry xml:id="m_mediaobject-uris"><indexterm><primary>mode</primary><secondary>mediaobject-uris</secondary></indexterm>
<?db filename="m_mediaobject-uris"?>
<refmeta>
<refentrytitle>m:mediaobject-uris</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}mediaobject-uris</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:mediaobject-uris</refname>
<refpurpose>Compute URIs for media objects</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The media object elements are processed in this mode to extract
their input and output URIs.</para>
</refsection>
</refentry>

<refentry xml:id="m_persistent-toc"><indexterm><primary>mode</primary><secondary>persistent-toc</secondary></indexterm>
<?db filename="m_persistent-toc"?>
<refmeta>
<refentrytitle>m:persistent-toc</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}persistent-toc</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:persistent-toc</refname>
<refpurpose>Mode for generating the persistent table of contents</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>If <parameter>persistent-toc</parameter><indexterm><primary>param</primary><secondary>persistent-toc</secondary></indexterm> <glossterm>is true</glossterm>, 
the document will be processed in this mode to produce the contents of the
persistent ToC. By default, this produces the same ToC as the
<code role="mode">m:toc</code> mode.</para>
</refsection>
</refentry>

<refentry xml:id="m_production-number"><indexterm><primary>mode</primary><secondary>production-number</secondary></indexterm>
<?db filename="m_production-number"?>
<refmeta>
<refentrytitle>m:production-number</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}production-number</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:production-number</refname>
<refpurpose>Mode for production numbers</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When a <tag>productionset</tag> is being formatted, the
<code role="mode">m:production-number</code> mode is used to produce the prodution numbers.
</para>
</refsection>
</refentry>

<refentry xml:id="m_pygments-options"><indexterm><primary>mode</primary><secondary>pygments-options</secondary></indexterm>
<?db filename="m_pygments-options"?>
<refmeta>
<refentrytitle>m:pygments-options</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}pygments-options</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:pygments-options</refname>
<refpurpose>Calculate the Pygments options for an element</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When the Pygments syntax highlighter is being used, every
element that will be highlighted is processed in this mode to generate
options for the Pygments process.</para>
</refsection>
</refentry>

<refentry xml:id="m_revhistory-list"><indexterm><primary>mode</primary><secondary>revhistory-list</secondary></indexterm>
<?db filename="m_revhistory-list"?>
<refmeta>
<refentrytitle>m:revhistory-list</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}revhistory-list</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:revhistory-list</refname>
<refpurpose>Mode to generate a “list” presentation of <tag>revhistory</tag></refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <tag>revhistory</tag> element can be rendered as a list or a table
(see <parameter>revhistory-style</parameter><indexterm><primary>param</primary><secondary>revhistory-style</secondary></indexterm>). The <code role="mode">m:revhistory-list</code> mode is used
to render it as a list.
</para>
</refsection>
</refentry>

<refentry xml:id="m_revhistory-table"><indexterm><primary>mode</primary><secondary>revhistory-table</secondary></indexterm>
<?db filename="m_revhistory-table"?>
<refmeta>
<refentrytitle>m:revhistory-table</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}revhistory-table</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:revhistory-table</refname>
<refpurpose>Mode to generate a “table” presentation of <tag>revhistory</tag></refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <tag>revhistory</tag> element can be rendered as a list or a table
(see <parameter>revhistory-style</parameter><indexterm><primary>param</primary><secondary>revhistory-style</secondary></indexterm>). The <code role="mode">m:revhistory-table</code> mode is used
to render it as a list.</para>
</refsection>
</refentry>

<refentry xml:id="m_seglist-table"><indexterm><primary>mode</primary><secondary>seglist-table</secondary></indexterm>
<?db filename="m_seglist-table"?>
<refmeta>
<refentrytitle>m:seglist-table</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}seglist-table</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:seglist-table</refname>
<refpurpose>Process a <tag>segmentedlist</tag> as a table</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Segmented lists can be presented in either a list format or a table format.
If the tabular format is selected, the <tag>segmentedlist</tag> is processed in this
mode to generate the table.</para>
</refsection>
</refentry>

<refentry xml:id="m_segtitle-in-seg"><indexterm><primary>mode</primary><secondary>segtitle-in-seg</secondary></indexterm>
<?db filename="m_segtitle-in-seg"?>
<refmeta>
<refentrytitle>m:segtitle-in-seg</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}segtitle-in-seg</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:segtitle-in-seg</refname>
<refpurpose>Mode for processing segment titles in a segment</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>In a <tag>segmentedlist</tag>, each <tag>segtitle</tag> is
processed once for each segment. This processing occurs in the
<code role="mode">m:segtitle-in-seg</code> mode.</para>
</refsection>
</refentry>

<refentry xml:id="m_synopfragment-bug"><indexterm><primary>mode</primary><secondary>synopfragment-bug</secondary></indexterm>
<?db filename="m_synopfragment-bug"?>
<refmeta>
<refentrytitle>m:synopfragment-bug</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}synopfragment-bug</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:synopfragment-bug</refname>
<refpurpose>Mode for generating the mark for a <tag>synopfragementref</tag></refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <tag>synopfragment</tag> element allows a synopsis (for example
a <tag>cmdsynopsis</tag>) to move common fragments out-of-line. The location
where these fragments occur in the primary synopsis is indicated with
a <tag>synopfragmentref</tag>. The stylesheets will generate a mark, analogous
to the marks used for footnotes or callouts, to connect the reference to the fragment.
The fragment will be processed in <code role="mode">m:synopfragment-bug</code> to produce
that mark.
</para>
</refsection>
</refentry>

<refentry xml:id="m_synopsis"><indexterm><primary>mode</primary><secondary>synopsis</secondary></indexterm>
<?db filename="m_synopsis"?>
<refmeta>
<refentrytitle>m:synopsis</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}synopsis</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:synopsis</refname>
<refpurpose>Mode for processing programming language synopses</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The elements of class, method, and field synopses are processed in this mode.
</para>
</refsection>
</refentry>

<refentry xml:id="m_title"><indexterm><primary>mode</primary><secondary>title</secondary></indexterm>
<?db filename="m_title"?>
<refmeta>
<refentrytitle>m:title</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}title</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:title</refname>
<refpurpose>Format a title</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This mode is used to format titles when they appear in headlines
or cross references.</para>
</refsection>
</refentry>

<refentry xml:id="m_titlepage"><indexterm><primary>mode</primary><secondary>titlepage</secondary></indexterm>
<?db filename="m_titlepage"?>
<refmeta>
<refentrytitle>m:titlepage</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}titlepage</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:titlepage</refname>
<refpurpose>Format elements for the title page</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Elements that appear on the title page are processed in this mode to
produce the text that will appear on the title page.</para>
</refsection>
</refentry>

<refentry xml:id="m_to-uppercase"><indexterm><primary>mode</primary><secondary>to-uppercase</secondary></indexterm>
<?db filename="m_to-uppercase"?>
<refmeta>
<refentrytitle>m:to-uppercase</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}to-uppercase</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:to-uppercase</refname>
<refpurpose>Produce content in upper-case</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When formatting personal names in a style that requires
converting a name to upper case
(see <xref linkend="t_person-name"/>), this mode is used to generate
the upper-case name.
</para>
</refsection>
</refentry>

<refentry xml:id="m_toc"><indexterm><primary>mode</primary><secondary>toc</secondary></indexterm>
<?db filename="m_toc"?>
<refmeta>
<refentrytitle>m:toc</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}toc</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:toc</refname>
<refpurpose>Mode for generating tables of contents</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Elements are processed in <code role="mode">m:toc</code> when automatically
constructing a Table of Contents (or, more generally, any list of elements).
</para>
<para>See also
<varname>generate-toc</varname><indexterm><primary>variable</primary><secondary>generate-toc</secondary></indexterm>,
<varname>generate-nested-toc</varname><indexterm><primary>variable</primary><secondary>generate-nested-toc</secondary></indexterm>,
<varname>annotate-toc</varname><indexterm><primary>variable</primary><secondary>annotate-toc</secondary></indexterm>,
<varname>lists-of-figures</varname><indexterm><primary>variable</primary><secondary>lists-of-figures</secondary></indexterm>,
<varname>lists-of-tables</varname><indexterm><primary>variable</primary><secondary>lists-of-tables</secondary></indexterm>,
<varname>lists-of-examples</varname><indexterm><primary>variable</primary><secondary>lists-of-examples</secondary></indexterm>,
<varname>lists-of-equations</varname><indexterm><primary>variable</primary><secondary>lists-of-equations</secondary></indexterm>,
<varname>lists-of-procedures</varname><indexterm><primary>variable</primary><secondary>lists-of-procedures</secondary></indexterm>, and
<varname>section-toc-depth</varname><indexterm><primary>variable</primary><secondary>section-toc-depth</secondary></indexterm>.</para>
</refsection>
</refentry>

<refentry xml:id="m_toc-entry"><indexterm><primary>mode</primary><secondary>toc-entry</secondary></indexterm>
<?db filename="m_toc-entry"?>
<refmeta>
<refentrytitle>m:toc-entry</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}toc-entry</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:toc-entry</refname>
<refpurpose>Format content for a list-of-titles</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When an element appears in the Table of Contents (or other list of titles),
it is formatted in this mode to produce the entry in the list.
</para>
</refsection>
</refentry>

<refentry xml:id="m_toc-nested"><indexterm><primary>mode</primary><secondary>toc-nested</secondary></indexterm>
<?db filename="m_toc-nested"?>
<refmeta>
<refentrytitle>m:toc-nested</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/modes}toc-nested</refmiscinfo>
</refmeta>
<refnamediv>
<refname>m:toc-nested</refname>
<refpurpose>What elements are “nested” in a Table of Contents</refpurpose>
<refclass>mode</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The elements processed in the <code role="mode">m:toc</code> mode determine where
a Table of Contents will appear. When a Table of Contents does appear, the children
of the starting element are processed in the <code role="mode">m:toc-nested</code> mode
to determine which of them appear. This mode, for example, handles the maximum nesting
depth of sections in the ToC.
</para>
</refsection>
</refentry>

</reference>
<reference version="5.0" xml:id="ref-pis">
<info>
  <?db filename="pis"?>
  <title>Processing instruction reference</title>
</info>

<refentry xml:id="pi_current-dateTime"><indexterm><primary>pi</primary><secondary/></indexterm>
<?db filename="pi_current-dateTime"?>
<refmeta>
<refentrytitle>current-dateTime</refentrytitle>
<refmiscinfo>current-dateTime</refmiscinfo>
</refmeta>
<refnamediv>
<refname>current-dateTime</refname>
<refpurpose>Resolves to a formatted date/time string</refpurpose>
<refclass>pi</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <tag class="pi">current-dateTime</tag> processing
instruction will be replaced by a formatted date and time. The date
and time is controlled by three pseudo-attributes:</para>

<variablelist>
<varlistentry><term><literal>dateTime</literal></term>
<listitem>
<para>The <biblioref linkend="iso8601"/> date or date/time to format.
If not specified, defaults to the current date/time. If a date (and
not a date/time) is specified, a default time of noon is assumed.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>offset</literal></term>
<listitem>
<para>An <biblioref linkend="iso8601"/> day/time duration or
year/month duration. This value will be added to the dateTime that is
to be formatted.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>format</literal></term>
<listitem>
<para>The format string to use. If not specified, the
<parameter>date-dateTime-format</parameter><indexterm><primary>param</primary><secondary>date-dateTime-format</secondary></indexterm> is used.
</para>
</listitem>
</varlistentry>
</variablelist>
<para>For example:</para>
<programlisting language="xml" linenumbering="unnumbered">&lt;para&gt;Published on
&lt;?current-dateTime format="[F]"?&gt;.&lt;/para&gt;</programlisting>
<para>Will render like this:</para>
<informalexample>
<para>Published on
<?current-dateTime format="[F]"?>.</para>
</informalexample>
</refsection>
</refentry>

<refentry xml:id="pi_db"><indexterm><primary>pi</primary><secondary/></indexterm>
<?db filename="pi_db"?>
<refmeta>
<refentrytitle>db</refentrytitle>
<refmiscinfo>db</refmiscinfo>
</refmeta>
<refnamediv>
<refname>db</refname>
<refpurpose>Provides additional control over rendering</refpurpose>
<refclass>pi</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <tag class="pi">db</tag> processing
instruction provides additional control over the rendering of a number
of elements. It doesn’t produce any output directly.</para>
<?guide-db-pi?>
</refsection>
</refentry>

<refentry xml:id="pi_DocBook-xslTNG-version"><indexterm><primary>pi</primary><secondary/></indexterm>
<?db filename="pi_docbook-xsltng-version"?>
<refmeta>
<refentrytitle>DocBook-xslTNG-version</refentrytitle>
<refmiscinfo>DocBook-xslTNG-version</refmiscinfo>
</refmeta>
<refnamediv>
<refname>DocBook-xslTNG-version</refname>
<refpurpose>Resolves to the DocBook stylesheet version</refpurpose>
<refclass>pi</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <tag class="pi">DocBook-xslTNG-version</tag> processing
instruction will be replaced by the version number of the
stylesheets.</para>
<para>For example:</para>
<programlisting language="xml" linenumbering="unnumbered">&lt;para&gt;This document was formatted with the &lt;citetitle&gt;DocBook
xslTNG Stylesheets&lt;/citetitle&gt;
version &lt;?DocBook-xslTNG-version?&gt;.&lt;/para&gt;</programlisting>
<para>Will render like this:</para>
<informalexample>
<para>This document was formatted with the <citetitle>DocBook
xslTNG Stylesheets</citetitle>
version <?DocBook-xslTNG-version?>.</para>
</informalexample>
</refsection>
</refentry>

<refentry xml:id="pi_system-property"><indexterm><primary>pi</primary><secondary/></indexterm>
<?db filename="pi_system-property"?>
<refmeta>
<refentrytitle>system-property</refentrytitle>
<refmiscinfo>system-property</refmiscinfo>
</refmeta>
<refnamediv>
<refname>system-property</refname>
<refpurpose>Resolves to an XSLT system property</refpurpose>
<refclass>pi</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <tag class="pi">system-property</tag> processing
instruction will be replaced by the corresponding system
property.</para>
<para>For example:</para>
<programlisting language="xml" linenumbering="unnumbered">&lt;para&gt;This document was formatted with
&lt;?system-property xsl:product-name?&gt;
version &lt;?system-property xsl:product-version?&gt; on
&lt;?current-dateTime format="[D01] [MNn,*-3] [Y0001]"?&gt;.
&lt;/para&gt;</programlisting>
<para>Will render like this:</para>
<informalexample>
<para>This document was formatted with
<?system-property xsl:product-name?>
version <?system-property xsl:product-version?> on
<?current-dateTime format="[D01] [MNn,*-3] [Y0001]"?>.
</para>
</informalexample>
</refsection>
</refentry>

</reference>
</part>
<appendix version="5.0" xml:id="gfdl">
<?db filename="gfdl"?>
<info>
<title>GNU Free Documentation License</title>
</info>

<literallayout class="normal">                GNU Free Documentation License
                   Version 1.1, March 2000

 Copyright (C) 2000  Free Software Foundation, Inc.
     51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.


0. PREAMBLE

The purpose of this License is to make a manual, textbook, or other
written document "free" in the sense of freedom: to assure everyone
the effective freedom to copy and redistribute it, with or without
modifying it, either commercially or noncommercially.  Secondarily,
this License preserves for the author and publisher a way to get
credit for their work, while not being considered responsible for
modifications made by others.

This License is a kind of "copyleft", which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.


1. APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work that contains a
notice placed by the copyright holder saying it can be distributed
under the terms of this License.  The "Document", below, refers to any
such manual or work.  Any member of the public is a licensee, and is
addressed as "you".

A "Modified Version" of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A "Secondary Section" is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall subject
(or to related matters) and contains nothing that could fall directly
within that overall subject.  (For example, if the Document is in part a
textbook of mathematics, a Secondary Section may not explain any
mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The "Invariant Sections" are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.

The "Cover Texts" are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.

A "Transparent" copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, whose contents can be viewed and edited directly and
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup has been designed to thwart or discourage
subsequent modification by readers is not Transparent.  A copy that is
not "Transparent" is called "Opaque".

Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input format, SGML
or XML using a publicly available DTD, and standard-conforming simple
HTML designed for human modification.  Opaque formats include
PostScript, PDF, proprietary formats that can be read and edited only
by proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the
machine-generated HTML produced by some word processors for output
purposes only.

The "Title Page" means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, "Title Page" means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.


2. VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.


3. COPYING IN QUANTITY

If you publish printed copies of the Document numbering more than 100,
and the Document's license notice requires Cover Texts, you must enclose
the copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a publicly-accessible computer-network location containing a complete
Transparent copy of the Document, free of added material, which the
general network-using public has access to download anonymously at no
charge using public-standard network protocols.  If you use the latter
option, you must take reasonably prudent steps, when you begin
distribution of Opaque copies in quantity, to ensure that this
Transparent copy will remain thus accessible at the stated location
until at least one year after the last time you distribute an Opaque
copy (directly or through your agents or retailers) of that edition to
the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.


4. MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

A. Use in the Title Page (and on the covers, if any) a title distinct
   from that of the Document, and from those of previous versions
   (which should, if there were any, be listed in the History section
   of the Document).  You may use the same title as a previous version
   if the original publisher of that version gives permission.
B. List on the Title Page, as authors, one or more persons or entities
   responsible for authorship of the modifications in the Modified
   Version, together with at least five of the principal authors of the
   Document (all of its principal authors, if it has less than five).
C. State on the Title page the name of the publisher of the
   Modified Version, as the publisher.
D. Preserve all the copyright notices of the Document.
E. Add an appropriate copyright notice for your modifications
   adjacent to the other copyright notices.
F. Include, immediately after the copyright notices, a license notice
   giving the public permission to use the Modified Version under the
   terms of this License, in the form shown in the Addendum below.
G. Preserve in that license notice the full lists of Invariant Sections
   and required Cover Texts given in the Document's license notice.
H. Include an unaltered copy of this License.
I. Preserve the section entitled "History", and its title, and add to
   it an item stating at least the title, year, new authors, and
   publisher of the Modified Version as given on the Title Page.  If
   there is no section entitled "History" in the Document, create one
   stating the title, year, authors, and publisher of the Document as
   given on its Title Page, then add an item describing the Modified
   Version as stated in the previous sentence.
J. Preserve the network location, if any, given in the Document for
   public access to a Transparent copy of the Document, and likewise
   the network locations given in the Document for previous versions
   it was based on.  These may be placed in the "History" section.
   You may omit a network location for a work that was published at
   least four years before the Document itself, or if the original
   publisher of the version it refers to gives permission.
K. In any section entitled "Acknowledgements" or "Dedications",
   preserve the section's title, and preserve in the section all the
   substance and tone of each of the contributor acknowledgements
   and/or dedications given therein.
L. Preserve all the Invariant Sections of the Document,
   unaltered in their text and in their titles.  Section numbers
   or the equivalent are not considered part of the section titles.
M. Delete any section entitled "Endorsements".  Such a section
   may not be included in the Modified Version.
N. Do not retitle any existing section as "Endorsements"
   or to conflict in title with any Invariant Section.

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section entitled "Endorsements", provided it contains
nothing but endorsements of your Modified Version by various
parties--for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.


5. COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections entitled "History"
in the various original documents, forming one section entitled
"History"; likewise combine any sections entitled "Acknowledgements",
and any sections entitled "Dedications".  You must delete all sections
entitled "Endorsements."


6. COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.

You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.


7. AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, does not as a whole count as a Modified Version
of the Document, provided no compilation copyright is claimed for the
compilation.  Such a compilation is called an "aggregate", and this
License does not apply to the other self-contained works thus compiled
with the Document, on account of their being thus compiled, if they
are not themselves derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one quarter
of the entire aggregate, the Document's Cover Texts may be placed on
covers that surround only the Document within the aggregate.
Otherwise they must appear on covers around the whole aggregate.


8. TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License provided that you also include the
original English version of this License.  In case of a disagreement
between the translation and the original English version of this
License, the original English version will prevail.


9. TERMINATION

You may not copy, modify, sublicense, or distribute the Document except
as expressly provided for under this License.  Any other attempt to
copy, modify, sublicense or distribute the Document is void, and will
automatically terminate your rights under this License.  However,
parties who have received copies, or rights, from you under this
License will not have their licenses terminated so long as such
parties remain in full compliance.

10. FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
http://www.gnu.org/copyleft/.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License "or any later version" applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.


ADDENDUM: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

      Copyright (c)  YEAR  YOUR NAME.
      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.1
      or any later version published by the Free Software Foundation;
      with the Invariant Sections being LIST THEIR TITLES, with the
      Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
      A copy of the license is included in the section entitled "GNU
      Free Documentation License".

If you have no Invariant Sections, write "with no Invariant Sections"
instead of saying which ones are invariant.  If you have no
Front-Cover Texts, write "no Front-Cover Texts" instead of
"Front-Cover Texts being LIST"; likewise for Back-Cover Texts.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.</literallayout>
</appendix>
<glossary version="5.0" xml:id="glossary">
<?db filename="glossary"?>
<title>Glossary</title>

<glossentry>
<glossterm>hamburger menu</glossterm>
<glossdef>
<para>The “hamburger menu” or
“<link xlink:href="https://en.wikipedia.org/wiki/Hamburger_button">hamburger
button</link>” is the name for the “☰” icon often used to indicate a menu of choices.
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>intrinsic size</glossterm>
<glossdef>
<para>The intrinsic size of an object is it’s actual size, measured in absolute
units, usually pixels. The stylesheets rely on extension functions to obtain
the intrinsic size of objects; if the extension functions aren’t available or the
image format is not recognized, no intrinsic size will be known.</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>object</glossterm>
<glossdef>
<para>In this guide, the term “object” is used to refer generally to
any image, video, or audio media element. They have a width and a height but no
useful internal structure from the perspective of the stylesheets.
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>pseudo-attribute</glossterm>
<glossdef>
<para>Processing instructions (see <biblioref linkend="XML"/>) have no
internal structure. The stylesheets interrogate the
<tag class="pi">db</tag><indexterm><primary>db processing instruction</primary>
</indexterm> processing instruction to determine formatting properties
for a number of different elements.</para>
<para>In order to make it easy to consistently specify different properties,
the value of the processing instruction is parsed as if it contained
attributes. These <emphasis>pseudo-attributes</emphasis> must consist of
a name, followed by “<literal>=</literal>”, followed by a quoted string.</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>is true</glossterm>
<glossdef>
<para>XPath defines a boolean type, <type>xs:boolean</type>, that is either
true or false. But for the purpose of passing parameters to the stylesheet
at runtime, whether it’s from the command line, from a configuration file, or
through some other means, it’s often more convenient to pass string values.
This saves the user from having to use whatever extra syntactic mechanisms
would be required to identify the type of the variable.</para>
<para>To this end, many “boolean” parameters are actually strings. A string
value <literal>is true</literal> if it consists of one of the strings “true”,
“yes”, or “1”.</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>Clark name</glossterm>
<glossdef>
<para>A Clark name is a way of unambiguously representing a qualified
name (see <biblioref linkend="XML"/>) as a string. It consists of the
namespace name in curly braces followed immediately by the local name.
For example, the Clark name for the DocBook <tag>para</tag> element
is: “<literal>{http://docbook.org/ns/docbook}para</literal>”.</para>
</glossdef>
</glossentry>

</glossary>
<bibliography version="5.0" xml:id="references">
<?db filename="references"?>
<title>References</title>

<bibliomixed xml:id="AntennaHouse"><abbrev>AntennaHouse</abbrev><citetitle xlink:href="https://www.antennahouse.com/">AH Formatter</citetitle>. Version 7.0.3.
</bibliomixed>

<bibliomixed xml:id="iso8601"><abbrev>ISO 8601</abbrev><citetitle>ISO 8601-1:2019
Date and time — Representations for information interchange — Part 1:
Basic rules</citetitle>.
ISO (International Organization for Standardization).
<pubdate>2019-02</pubdate>.</bibliomixed>

<bibliomixed xml:id="CSS"><abbrev>CSS</abbrev>
<citetitle xlink:href="https://www.w3.org/Style/CSS/">What Is CSS?</citetitle>.
A family of standards developed by the W3C.</bibliomixed>

<bibliomixed xml:id="calsexchange"><abbrev>TR
9901:1999</abbrev><citetitle xlink:href="https://www.oasis-open.org/specs/tm9901.htm">XML
Exchange Table Model Document Type
Definition</citetitle>. Organization for the Advancement of Structured
Information Standards (OASIS) Technical Memorandum TR 9901:1999.
Tables Technical Committee. Norman Walsh, editor. </bibliomixed>

<bibliomixed xml:id="calstable"><abbrev>TR
9502:1995</abbrev><citetitle xlink:href="https://www.oasis-open.org/specs/tm9502.html">CALS
Table Model Document Type Definition</citetitle>.
SGML Open Technical Memorandum TM 9502:1995.
Table Interchange Subcommittee. Harvey Bingham, editor. 
</bibliomixed>

<bibliomixed xml:id="Gradle"><abbrev>Gradle</abbrev><citetitle xlink:href="https://gradle.org/">Gradle</citetitle>.
</bibliomixed>

<bibliomixed xml:id="RFC5147"><abbrev>RFC 5147</abbrev><citetitle xlink:href="https://tools.ietf.org/html/rfc5147">URI Fragment Identifiers
for the text/plain Media Type</citetitle>. E. Wilde and M. Duerst,
editors. Internet Engineering Task Force. 2008.
</bibliomixed>

<bibliomixed xml:id="MathJax"><abbrev>MathJax</abbrev><citetitle xlink:href="https://www.mathjax.org/">MathJax</citetitle>.
</bibliomixed>

<bibliomixed xml:id="oldmeasure"><abbrev>OldMeasure</abbrev><citetitle xlink:href="https://www.amazon.com/Old-Measure-Inquiry-Customary-Measures/dp/0615376266">The
Old Measure: An Inquiry Into the Origins of the U.S. Customary System of
Weights and Measures</citetitle>. 2010. Jon Bosak.
</bibliomixed>

<bibliomixed xml:id="Prince"><abbrev>Prince</abbrev><citetitle xlink:href="https://www.princexml.com/">Prince</citetitle>.
Version 13.5.</bibliomixed>

<bibliomixed xml:id="transclusion"><abbrev>Transclusion</abbrev><citetitle xlink:href="https://docbook.org/docs/transclusion/transclusion.html">DocBook
Transclusion</citetitle>. 2015. Jirka Koskek.
</bibliomixed>

<bibliomixed xml:id="falsehoods-about-names"><abbrev>Names</abbrev><citetitle xlink:href="https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/">Falsehoods Programmers Believe About Names</citetitle>. 2010. Patrick McKenzie.
</bibliomixed>

<bibliomixed xml:id="XML"><abbrev>XML</abbrev>Tim Bray,
Jean Paoli, C. M. Sperberg-McQueen, and Eve Maler, editors.
<citetitle><link xlink:href="http://www.w3.org/TR/REC-xml">Extensible Markup
Language (XML) 1.0 Fifth Edition</link></citetitle>.
World Wide Web Consortium, 2008.
</bibliomixed>

<bibliomixed xml:id="xinclude"><abbrev>XInclude</abbrev>Jonathan Marsh,
David Orchard, and Daniel Veillard, editors.
<citetitle xlink:href="http://www.w3.org/TR/xinclude">XML Inclusions
(XInclude) Version 1.0 (Second Edition)</citetitle>.
World Wide Web Consortium, 2006.
</bibliomixed>

<bibliomixed xml:id="Pygments"><abbrev>Pygments</abbrev><citetitle xlink:href="https://pygments.org/">Pygments:
Python Syntax Highlighter</citetitle>. Version 2.6.1.</bibliomixed>

<bibliomixed xml:id="highlight.js"><abbrev>highlight.js</abbrev><citetitle xlink:href="https://highlightjs.org/">highlight.js</citetitle>.
Version 10.1.2.</bibliomixed>

<bibliomixed xml:id="Prism"><abbrev>Prism</abbrev><citetitle xlink:href="https://prismjs.com/">Prism</citetitle>.
Version 1.20.0.</bibliomixed>

<bibliomixed xml:id="metadata-extractor"><abbrev>metadata-extractor</abbrev><citetitle xlink:href="https://drewnoakes.com/code/exif/">metadata-extractor</citetitle>.
Version 2.14.0.</bibliomixed>

<bibliomixed xml:id="searchfid"><abbrev>search</abbrev><citetitle xlink:href="https://norman.walsh.name/2016/09/29/search">Searching
text/plain documents with a fragid</citetitle>.</bibliomixed>

<bibliomixed xml:id="XSLT10"><abbrev>XSLT 1.0</abbrev><citetitle xlink:href="https://www.w3.org/TR/1999/REC-xslt-19991116">XSL Transformations (XSLT)
Version 1.0</citetitle>. James Clark, editor.
W3C Recommendation. 16 November 1999.</bibliomixed>

<bibliomixed xml:id="XSLT20"><abbrev>XSLT 2.0</abbrev><citetitle xlink:href="http://www.w3.org/TR/xslt20/">XSL Transformations (XSLT)
Version 2.0</citetitle>. Michael Kay, editor.
W3C Recommendation. 23 January 2007.</bibliomixed>

<bibliomixed xml:id="XSLT30"><abbrev>XSLT 3.0</abbrev><citetitle xlink:href="http://www.w3.org/TR/xslt-30/">XSL Transformations (XSLT)
Version 3.0</citetitle>. Michael Kay, editor.
W3C Recommendation. 8 June 2017.</bibliomixed>

<bibliomixed xml:id="XSLFO"><abbrev>XSL FO</abbrev><citetitle xlink:href="https://www.w3.org/TR/xsl/">Extensible Stylesheet
Language (XSL) Version 1.1</citetitle>. Anders Berglund, Editor.
W3C Recommendation. 5 December 2006.</bibliomixed>

</bibliography>
<acknowledgements version="5.0" xml:id="acknowledgements">
<?db filename="ackno"?>
<title>Acknowledgements</title>

<para>I’d like to thank The Academy, the…no, wrong event.</para>

<para>DocBook has benefited immeasurably by the time and energy that
innumerable people have poured into it. I thank them all.</para>

<para>This project has benefited from the generous support of
Michael Kay and Saxonica for <citetitle>Saxon EE</citetitle> and 
Micheal Miller and AntennaHouse for <citetitle>AH Formatter</citetitle>.
</para>

<para>Bethan Tovey-Walsh designed the lovely xslTNG logo.</para>
</acknowledgements>
<index version="5.0" xml:id="index">
<?db filename="gindex"?>
</index>
<index version="5.0" xml:id="mindex">
<?db filename="mindex" autotoc="false" autoindex="false"?>
<title>Index by module</title>
<para>Many modules define related functions, templates, or variables.</para>
<?guide-module-index?>
</index>
</book>