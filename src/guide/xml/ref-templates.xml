<reference xmlns="http://docbook.org/ns/docbook"
           xmlns:xlink="http://www.w3.org/1999/xlink"
           version="5.0"
           xml:id="templates">
<info>
  <?db filename="templates"?>
  <title>Template reference</title>
</info>

<refentry xml:id="t_audio-fallback">
<?db filename="t_audio-fallback"?>
<refmeta>
<refentrytitle>t:audio-fallback</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}audio-fallback</refmiscinfo>
<refmiscinfo class="other" otherclass="obsolete">2.0.13</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:audio-fallback</refname>
<refpurpose>Generate fallback for audio</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Audio fallback is now supported with <parameter>fallback-js</parameter>.
</para>
</refsection>
</refentry>

<refentry xml:id="t_biblioentry">
<?db filename="t_biblioentry"?>
<refmeta>
<refentrytitle>t:biblioentry</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}biblioentry</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:biblioentry</refname>
<refpurpose>Format a <tag>biblioentry</tag> element</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Unlike <tag>bibliomixed</tag>, where the author is expected to
provide most of the formatting, <tag>biblioentry</tag> is a bag of
metadata. On the one hand, this opens up the possibility of producing
different bibliographic styles from the same entry. On the other hand, it
greatly complicates formatting.</para>
<para>The default <template>t:biblioentry</template> template uses a
header template (see <xref linkend="header-templates"/>).</para>
</refsection>
</refentry>

<refentry xml:id="t_bottom-nav">
<?db filename="t_bottom-nav"?>
<refmeta>
<refentrytitle>t:bottom-nav</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}bottom-nav</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:bottom-nav</refname>
<refpurpose>Generate bottom-of-page navigation links</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This template generates the bottom-of-page <tag>nav</tag> element. When
chunking is performed, this should provide links between pages.</para>
</refsection>
</refentry>

<refentry xml:id="t_chunk-cleanup">
<?db filename="t_chunk-cleanup"?>
<refmeta>
<refentrytitle>t:chunk-cleanup</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}chunk-cleanup</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:chunk-cleanup</refname>
<refpurpose>Cleanup the HTML markup for a DocBook document</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This mode performs cleanup tasks on the HTML document that
results from DocBook processing. This process
moves footnotes and annotations when necessary, generates navigation
elements, etc.</para>
</refsection>
</refentry>

<refentry xml:id="t_chunk-footnotes">
<?db filename="t_chunk-footnotes"?>
<refmeta>
<refentrytitle>t:chunk-footnotes</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}chunk-footnotes</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:chunk-footnotes</refname>
<refpurpose>Processes footnotes in a chunk</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>When chunking is being performed (see <xref linkend="chunking"/>),
all of the footnotes that should appear in a chunk are processed with this template.
</para>
</refsection>
</refentry>

<refentry xml:id="t_chunk-output">
<?db filename="t_chunk-output"?>
<refmeta>
<refentrytitle>t:chunk-output</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}chunk-output</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:chunk-output</refname>
<refpurpose>Generate chunked output for a DocBook document</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This mode processes the <parameter>persistent-toc</parameter> if
requested and generates individual documents for each chunk. Like the
XPath <code>transform</code> function, this template returns a map.
You must process the map to store the documents.</para>
</refsection>
</refentry>

<refentry xml:id="t_docbook">
<?db filename="t_docbook"?>
<refmeta>
<refentrytitle>t:docbook</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}docbook</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:docbook</refname>
<refpurpose>Process a DocBook document</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This mode processes a DocBook document. It’s usually called
automatically by the root template in the stylesheets. You only need to call
it explicitly if you have an override for the root template and want to
do some specialized processing.
</para>
<para>The template has a single parameter, <literal>return</literal>, which selects
what should be constructed by the template:</para>

<variablelist>
<varlistentry><term><literal>main-document</literal>, the default value</term>
<listitem>
<para>Returns the primary output of the stylesheet.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>raw-results</literal></term>
<listitem>
<para>Returns a map with two keys, <literal>document</literal> containing the original
DocBook document processed and <literal>output</literal> containing the transformed
result.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>chunked-results</literal></term>
<listitem>
<para>Returns a map with two keys, <literal>document</literal> containing the original
DocBook document processed and <literal>chunks</literal> containing a map from
output URIs to documents.</para>
</listitem>
</varlistentry>
</variablelist>

<para>Any other value is <link linkend="v_dbe_INVALID-RESULTS-REQUESTED">an error</link>.
</para>
</refsection>
</refentry>

<refentry xml:id="t_generate-index">
<?db filename="t_generate-index"?>
<refmeta>
<refentrytitle>t:generate-index</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}generate-index</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:generate-index</refname>
<refpurpose>Generate a back-of-the-book style index</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This template is called when an empty <tag>index</tag> tag is found
the document and automatic index generation is enabled. Automatic index
generation is enabled if
either the <parameter>generate-index</parameter> <glossterm>is true</glossterm>
or a
<tag class="pi">db</tag><indexterm><primary>db processing instruction</primary>
</indexterm> processing instruction with an
<literal>autoindex</literal><indexterm>
<primary>db processing instruction</primary>
<secondary>autoindex pseudo-attribute</secondary>
</indexterm> pseudo-attribute is true. If the <literal>autoindex</literal> pseudo-attribute
is explicitly false, automatic index generation is suppressed for the index in which
it appears.
</para>
</refsection>
</refentry>

<refentry xml:id="t_index-zone-reference">
<?db filename="t_index-zone-reference"?>
<refmeta>
<refentrytitle>t:index-zone-reference</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}index-zone-reference</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:index-zone-reference</refname>
<refpurpose>Process index zone references</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This template is called to generate index references for terms that have
a <att>zone</att> attribute. It is only called when generating an index.</para>
</refsection>
</refentry>

<refentry xml:id="t_inline">
<?db filename="t_inline"?>
<refmeta>
<refentrytitle>t:inline</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}inline</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:inline</refname>
<refpurpose>Process an inline element</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>All of the inline elements are processed by <template>t:inline</template>.
This provides a common place to handle the fact that any of them might be a link.
Several parameters exist to handle variations in presentation:</para>

<variablelist>
<varlistentry><term><code>namemap</code></term>
<listitem>
<para>Maps the element to a particular HTML element. Defaults to
<tag namespace="http://www.w3.org/1999/xhtml">span</tag>.
</para>
</listitem>
</varlistentry>
<varlistentry><term><code>class</code></term>
<listitem>
<para>A list of tokens that should be added to the element’s <att>class</att> attribute.
</para>
</listitem>
</varlistentry>
<varlistentry><term><code>local-name-as-class</code></term>
<listitem>
<para>If this is true, the local name of the DocBook element being processed will
be added to the classes.
</para>
</listitem>
</varlistentry>
<varlistentry><term><code>content</code></term>
<listitem>
<para>The element content. By default, this is obtained by applying XSLT templates to
the element’s content.</para>
</listitem>
</varlistentry>
<varlistentry><term><code>extra-attributes</code></term>
<listitem>
<para>Extra attributes to be added to the element.
</para>
</listitem>
</varlistentry>
</variablelist>
</refsection>
</refentry>
  
<refentry xml:id="t_write-copyinstructions">
  <refmeta>
    <refentrytitle>t:write-copyinstructions</refentrytitle>
    <refmiscinfo>{http://docbook.org/ns/docbook/templates}write-copyinstructions</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>t:write-copyinstructions</refname>
    <refpurpose>Writes a file which contains copy instructions for mediaobject files</refpurpose>
    <refclass>template</refclass>
  </refnamediv>
  <refsection>
    <title>Description</title>
    <para>This template writes a file at <parameter>copyinstructions-uri</parameter> for copying
      the media files in the template parameter <code>$instructions</code>, which is a non-empty
      sequence of maps with <code>source</code> and <code>destination</code>.</para>
    <para>The default implementation will create an XML file with <code>copyinstructions</code> as
      root element, and one <code>copy</code> Element for each map in <code>$instructions</code>.</para>
    <programlisting>&lt;copyinstructions&gt;
    &lt;copy source=     &quot;file:/mnt/shared/kosit/xslTNG/src/test/resources/media/duck-small.gif&quot;
          destination=&quot;file:/home/frank/kosit/xslTNG/test/html/duck-small.gif&quot;/&gt;
&lt;/copyinstructions&gt;      
    </programlisting>
    <para>You may use a customization layer with your own implementation of this template to create a UNIX or Windows Script file.</para>
    <para>Please note, that this templete will only be called if the expath function
        <code>{http://expath.org/ns/file}:copy</code> is not available. Otherwise, the copy
      instruction will pe performed by the stylesheets, in which case the file at
        <parameter>copyinstructions-uri</parameter> will become a logfile with a slightly
      different format.</para>
  </refsection>
</refentry>
  
<refentry xml:id="t_mediaobject-img">
<?db filename="t_mediaobject-img"?>
<refmeta>
<refentrytitle>t:mediaobject-img</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}mediaobject-img</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:mediaobject-img</refname>
<refpurpose>Generate a mediaobject img</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This template is called to generate the
<tag namespace="http://www.w3.org/1999/xhtml">img</tag> element for
a media object.
</para>
</refsection>
</refentry>

<refentry xml:id="t_person-name">
<?db filename="t_person-name"?>
<refmeta>
<refentrytitle>t:person-name</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}person-name</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:person-name</refname>
<refpurpose>Formats a personal name</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This template formats a personal name according to the specified style.
This template must only be called when the current context item is a
<tag>personname</tag>. The <tag>personname</tag> element can be used
in two different ways, it can just contain the name:</para>

<programlisting language="xml" linenumbering="unnumbered"
>&lt;personname>Norman Walsh&lt;/personname></programlisting>

<para>or it can contain the name with markup:</para>

<programlisting language="xml" linenumbering="unnumbered"
>&lt;personname>&lt;givenname>Norman&lt;/givenname>
&lt;surname>Walsh&lt;/surname>&lt;/personname></programlisting>

<para>How the name is formatted depends on which form of markup is used
and which style is selected. Several styles are supported:</para>

<orderedlist>
<listitem>
<para>If the name contains no markup, it is simply formatted as is.
</para>
</listitem>
<listitem>
<para>If the style is “<literal>FAMILY-given</literal>”, it is formatted
with <template>t:person-name-family-given</template> and generally produces
the family name in upper case followed by the given name. For example: “WALSH Norman”.
</para>
</listitem>
<listitem>
<para>If the style is “<literal>last-first</literal>”, it is formatted
with <template>t:person-name-last-first</template> and generally produces
the family name followed by the given name separated by a comma.
For example: “Walsh, Norman”.
</para>
</listitem>
<listitem>
<para>If the style is “<literal>first-last</literal>”, it is formatted
with <template>t:person-name-first-last</template> and generally produces
the given name followed by the family name. For example: “Norman Walsh”.
</para>
</listitem>
<listitem>
<para>Any other value raises <errorcode>dbe:INVALID-NAME-STYLE</errorcode>.
</para>
</listitem>
</orderedlist>

<note>
<title>Given names</title>
<para>Historically, DocBook used <tag>firstname</tag> for the given name of a person.
In DocBook 5.1, the <tag>givenname</tag> element was introduced as an
alternative. The stylesheets treat them identically.</para>
</note>

<para>The stylesheets attempt to determine what style to use for each
<tag>personname</tag>:</para>

<orderedlist>
<listitem>
<para>First, by looking at that the <att>role</att> attribute
on that element. If any of styles from the
<varname>v:personal-name-styles</varname> list appear in the role,
that style will be selected. (If more than one style appears, the
results are undefined.)</para>
</listitem>
<listitem>
<para>If the <tag>personname</tag> doesn’t identify a style, and if it’s a child of
<tag>author</tag>, <tag>editor</tag>, or <tag>othercredit</tag>, the <att>role</att>
attirbute of its parent is inspected.</para>
</listitem>
<listitem>
<para>If the <parameter>personal-name-style</parameter> is defined, it is
is selected.</para>
</listitem>
<listitem>
<para>If a style still hasn’t been selected the style in the
localization file is used.</para>
</listitem>
</orderedlist>

<para>Personal names are notoriously complicated (see
<biblioref linkend="falsehoods-about-names"/>). DocBook includes several tags
for identifying parts of names:</para>

<variablelist>
<varlistentry><term><tag>firstname</tag> or <tag>givenname</tag></term>
<listitem>
<para>for a given name,</para>
</listitem>
</varlistentry>
<varlistentry><term><tag>surname</tag></term>
<listitem>
<para>for a family name,</para>
</listitem>
</varlistentry>
<varlistentry><term><tag>lineage</tag></term>
<listitem>
<para>for lineage (such as “Jr” or “III”),</para>
</listitem>
</varlistentry>
<varlistentry><term><tag>honorific</tag></term>
<listitem>
<para>for an honorific title (such as “Dr” or “Ms”), and</para>
</listitem>
</varlistentry>
<varlistentry><term><tag>othername</tag></term>
<listitem>
<para>for everything else.</para>
</listitem>
</varlistentry>
</variablelist>

<para>In all likelihood, if your document contains a variety of personal names,
you will need to use roles to disambiguate special cases and you will have to
provide alternate or additional templates to format them.</para>

</refsection>
</refentry>

<refentry xml:id="t_person-name-family-given">
<?db filename="t_person-name-family-given"?>
<refmeta>
<refentrytitle>t:person-name-family-given</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}person-name-family-given</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:person-name-family-given</refname>
<refpurpose>Formats a personal name in the “FAMILY-given” style</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The “<literal>FAMILY-given</literal>” style formats a personal
name as the family name (<tag>surname</tag>) in upper-case, followed
by the first given name (if there is one), followed by the text
“<literal>[FAMILY given]</literal>”. See <template>t:person-name</template>.</para>

<para><xref linkend="ex-family-given"/> shows an example of a personal
name to be formatted with the “<literal>FAMILY-given</literal>” style.</para>

<example xml:id="ex-family-given">
<title>The FAMILY-given name style</title>
<?guide-example fig-family-given?>
</example>

<para>That would be formatted as:</para>

<informalfigure xml:id="fig-family-given">
<para>The author is
<personname role="FAMILY-given">
<givenname>Norman</givenname><surname>Walsh</surname>
<othername>David</othername>
</personname>.</para>
</informalfigure>

</refsection>
</refentry>

<refentry xml:id="t_person-name-first-last">
<?db filename="t_person-name-first-last"?>
<refmeta>
<refentrytitle>t:person-name-first-last</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}person-name-first-last</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:person-name-first-last</refname>
<refpurpose>Formats a personal name in the “first-last” style</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The “<literal>first-last</literal>” style formats a personal name
as: the first <tag>honorific</tag>, followed by
the given name, followed possibly by the “middle name”, followed by the
<tag>surname</tag>, followed by the <tag>lineage</tag>.
See <template>t:person-name</template>.
</para>

<para>If an <tag>othername</tag> is provided and if
<parameter>othername-in-middle</parameter> is true, then the first
<tag>othername</tag> will be treated as a “middle name” and presented
between the given and family names.</para>

<para><xref linkend="ex-first-last"/> shows an example of a personal
name to be formatted with the “<literal>first-last</literal>” style.</para>

<example xml:id="ex-first-last">
<title>The first-last name style</title>
<?guide-example fig-first-last?>
</example>

<para>That would be formatted as:</para>

<informalfigure xml:id="fig-first-last">
<para>The author is
<personname role="first-last">
<givenname>Norman</givenname><surname>Walsh</surname>
<othername>David</othername>
</personname>.</para>
</informalfigure>

</refsection>
</refentry>

<refentry xml:id="t_person-name-last-first">
<?db filename="t_person-name-last-first"?>
<refmeta>
<refentrytitle>t:person-name-last-first</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}person-name-last-first</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:person-name-last-first</refname>
<refpurpose>Formats a personal name in the “last-first” style</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The “<literal>last-first</literal>” style formats a personal
name as the family name (<tag>surname</tag>) followed
by the first given name (if there is one). If both a family name and a given name
are present, they are separated by a comma. See <template>t:person-name</template>.</para>

<para><xref linkend="ex-last-first"/> shows an example of a personal
name to be formatted with the “<literal>last-first</literal>” style.</para>

<example xml:id="ex-last-first">
<title>The last-first name style</title>
<?guide-example fig-last-first?>
</example>

<para>That would be formatted as:</para>

<informalfigure xml:id="fig-last-first">
<para>The author is
<personname role="last-first">
<givenname>Norman</givenname><surname>Walsh</surname>
<othername>David</othername>
</personname>.</para>
</informalfigure>
</refsection>
</refentry>

<refentry xml:id="t_person-name-list">
<?db filename="t_person-name-list"?>
<refmeta>
<refentrytitle>t:person-name-list</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}person-name-list</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:person-name-list</refname>
<refpurpose>Formats a sequence of personal names</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Formats a sequence of names:</para>
<itemizedlist>
<listitem>
<para>If the sequence consists of a single name, it is formatted.
</para>
</listitem>
<listitem>
<para>If the sequence consists of exactly two names, they are
formatted with “and” between them where “and” is taken from the
in-scope language localization file. It is the item with the key
“<literal>author-sep2</literal>”.</para>
</listitem>
<listitem>
<para>If the sequence consists of more than two names, all but the
last are separated by “, “ (the localization item with the key
“<literal>author-sep</literal>”). The last is separated by “, and”
(the localization item with the key “<literal>author-seplast</literal>”).
</para>
</listitem>
</itemizedlist>
</refsection>
</refentry>

<refentry xml:id="t_table-footnotes">
<?db filename="t_table-footnotes"?>
<refmeta>
<refentrytitle>t:table-footnotes</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}table-footnotes</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:table-footnotes</refname>
<refpurpose>Process table footnotes</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>The <template>t:table-footnotes</template> template is called
to process footnotes at the bottom of a table.</para>
</refsection>
</refentry>

<refentry xml:id="t_top-nav">
<?db filename="t_top-nav"?>
<refmeta>
<refentrytitle>t:top-nav</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}top-nav</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:top-nav</refname>
<refpurpose>Generate top-of-page navigation links</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>This template generates the top-of-page <tag>nav</tag> element. When
chunking is performed, this should provide links between pages.</para>
</refsection>
</refentry>

<refentry xml:id="t_video-fallback">
<?db filename="t_video-fallback"?>
<refmeta>
<refentrytitle>t:video-fallback</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}video-fallback</refmiscinfo>
<refmiscinfo class="other" otherclass="obsolete">2.0.13</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:video-fallback</refname>
<refpurpose>Generate fallback for video</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>Video fallback is now supported with <parameter>fallback-js</parameter>.
</para>
</refsection>
</refentry>

<refentry xml:id="t_xlink">
<?db filename="t_xlink"?>
<refmeta>
<refentrytitle>t:xlink</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}xlink</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:xlink</refname>
<refpurpose>Supports hypertext linking</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>In DocBook, most elements can be links. The
<template>t:xlink</template> template is called for each element that might
be participating in a link. This includes both simple links (any inline
element with an <att>xlink:href</att> attribute) and extended links.
</para>
</refsection>
</refentry>

<refentry xml:id="t_glossary-divisions">
<?db filename="t_glossary-divisions"?>
<refmeta>
<refentrytitle>t:glossary-divisions</refentrytitle>
<refmiscinfo>{http://docbook.org/ns/docbook/templates}glossary-divisions</refmiscinfo>
</refmeta>
<refnamediv>
<refname>t:glossary-divisions</refname>
<refpurpose>Groups entries in a glossary</refpurpose>
<refclass>template</refclass>
</refnamediv>
<refsection>
<title>Description</title>
<para>If <parameter>glossary-automatic-divisions</parameter> <glossterm>is true</glossterm>,
this template is used to construct the divisions. By default, it makes groups based on the
(upper-case) first letter of the terms. It does not add a grouping wrapper if there’s only
one group.
</para>
</refsection>
</refentry>

</reference>
