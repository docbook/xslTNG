<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xi='http://www.w3.org/2001/XInclude'
	 xmlns:xlink="http://www.w3.org/1999/xlink"
	 version="5.0" xml:id="gentext">
<info>
  <?db filename="ch-localization"?>
  <title>Localization</title>
</info>

<para>The <citetitle>DocBook xslTNG</citetitle> stylesheets support
localization in more than 70 languages. At the time of this writing:
Afrikaans, Albanian, Amharic, Arabic, Assamese, Asturian, Azerbaijani,
Bangla, Basque, Bosnian, Bulgarian, Catalan, Chinese, Chinese
(Taiwan), Chinese Simplified, Croatian, Czech, Danish, Dutch, English,
Esperanto, Estonian, Finnish, French, Galician, Georgian, German,
Greek, Gujarati, Hebrew, Hindi, Hungarian, Icelandic, Indian Bangla,
Indonesian, Irish, Italian, Japanese, Kannada, Kirghiz, Korean, Latin,
Latvian, Lithuanian, Low German, Malayalam, Marathi, Mongolian,
Northern Sami, Norwegian Bokmål, Norwegian Nynorsk, Oriya, Polish,
Portuguese, Portuguese (Brazil), Punjabi, Romanian, Russian, Serbian
in Cyrillic script, Serbian in Latin script, Slovak, Slovenian,
Spanish, Swedish, Tagalog, Tamil, Telugu, Thai, Turkish, Ukrainian,
Urdu, Vietnamese, Welsh, and Xhosa.</para>

<section xml:id="l10n-overview">
<title>Overview</title>

<para>In this context, localization mostly refers to “generated text”,
words and symbols that appear in a published DocBook document that
aren’t present in the original XML. Consider <xref linkend="fig.l10n.en.xml"/>.</para>

<figure xml:id="fig.l10n.en.xml">
<title>Sample book source</title>
<programlisting language="xml"
><xi:include href="examples/l10n.en.xml" parse="text"/></programlisting>
</figure>

<para>It might be published as shown in <xref linkend="fig.l10n.en"/>.
Here we can see examples of several different kinds of generated
text.</para>

<figure xml:id="fig.l10n.en">
<title>Sample book (annotated)</title>
<mediaobject>
<alt>Image of a stack of papers with the example book published on
the uppermost page. The published book includes additional generated text
highlighted.</alt>
<imageobject>
<imagedata fileref="media/l10n-en-ann.png"/>
</imageobject>
</mediaobject>
</figure>

<para>The title “Table of Contents” is entirely generated; it appears
nowhere in the XML. The chapter title appears in the text, but it’s
labeled “1.” in the list of titles, “Chapter 1.” in the chapter itself,
and “Chapter 1” (without the title) in the cross reference.</para>

<para>Now consider a French version of the document in
<xref linkend="fig.l10n.fr.xml"/>.</para>

<figure xml:id="fig.l10n.fr.xml">
<title>Sample book source (French)</title>
<programlisting language="xml"
><xi:include href="examples/l10n.fr.xml" parse="text"/></programlisting>
</figure>

<para>In this case, the published version will have different
localization, as
shown in <xref linkend="fig.l10n.fr"/>.</para>

<figure xml:id="fig.l10n.fr">
<title>Sample book (French)</title>
<mediaobject>
<alt>The published book again, this time with French generated
text.</alt>
<imageobject>
<imagedata fileref="media/l10n-fr.png"/>
</imageobject>
</mediaobject>
</figure>

<para>The question is, how is this accomplished? The answer, I’m
afraid, is not simple.</para>

<para>It begins with a localization file.</para>

</section>
<section>
<title>Localization files</title>

<para>The localization files are in
<filename class="directory">src/main/locale</filename> in the repository. The
localization file is designed to be simple enough to edit by hand. The stylesheets
use compiled versions created by processing the input locale with
<filename>src/main/xslt/modules/xform-locale.xsl</filename> to produce
the files in 
<filename class="directory">xslt/locale</filename> in the distribution.</para>

<para>A locale begins by defining the language it supports and
providing an English language name for it. The <att>language</att>
attribute identifies the language (in the same terms as
<att>xml:lang</att>) to which this localization applies.</para>

<para>That’s followed by metadata about the file (authors, etc.), then
mappings, groups, lists, and letters as shown in
<xref linkend="l10n.local.ex"/>. We’ll consider each
section in detail below.</para>

<figure xml:id="l10n.local.ex">
<title>Example locale file (excerpted)</title>
<programlisting language="xml"><![CDATA[<locale xmlns="http://docbook.org/ns/docbook/l10n/source"
        xmlns:db="http://docbook.org/ns/docbook"
        language="en" english-language-name="English">
  <info>
    …
  </info>
  <mappings>
    <gentext key="above">above</gentext>
    …
  </mappings>
  <group name="title">
    <template match="self::db:chapter">{chapter} %l%.%c</template>
    …
  </group>
  <list name="_default">
    <items>%c</items>
    <items>%c {and} %c</items>
    <items>%c<repeat>, %c</repeat>, {and} %c</items>
  </list>
  <letters>
    …
  </letters>
</locale>]]></programlisting>
</figure>

<section>
<title>Mappings</title>

<para>The mappings section is a simple list of key/value pairs.
Each <tag>gentext</tag> element defines a key and its replacement.</para>

<programlisting language="xml"><![CDATA[  <mappings>
    <gentext key="above">above</gentext>
    <gentext key="abstract">Abstract</gentext>
    …
    <gentext key="xrefto">xref to</gentext>
   </mappings>]]></programlisting>

<para>These mappings serve two purposes. For many languages, a lot of the
work of defining a new localization is just updating these mappings.
For a stylesheet customization layer, it provides a mechanism for remapping
on an ad hoc basis.</para>

<para>In a localization template, any key entered in curly braces will
be replaced by the mapping. In other words, for the example above,
<literal>{abstract}</literal> will be replaced by the word “Abstract”.
This mapping is done when the document is transformed, not when the
localization file is compiled.</para>
</section>

<section>
<title>Group</title>

<para>Groups are the primary templating system. In a context where
generated text is required, a group is selected and within that group,
a template is selected. The template is selected by evaluating the
expression in the <att>match</att> attribute with the current node
as the context item. A template with the match express <code>true()</code>
will always succeed; it is used as a fallback.</para>

<para>The <literal>title-numbered</literal> group determines how
titles are formatted if they are numbered, (there’s also
<literal>title-unnumbered</literal> when titles aren’t being
numbered):</para>

<programlisting language="xml"><![CDATA[<group name="title-numbered">
   <template match="self::db:section[ancestor::db:preface]">%c</template>
   …
   <template match="self::db:appendix">{Appendix} %l%.%c</template>
   …
   <template match="self::db:warning">%c</template>
   <template match="true()">%l%.%c</template>
</group>]]></programlisting>

<para>(Note that not all titles <emphasis>are</emphasis> numbered,
this is just the group that’s used if they could be. See
<parameter>division-numbers</parameter>,
<parameter>component-numbers</parameter>, and
<parameter>section-numbers</parameter>.)</para>

<para>Within a template, two kinds of substitution are performed: names in
curly braces are replaced by the corresponding mapping and %-letter values
are substituted as follows:</para>

<table xml:id="table.template-letter-substitutions">
<title>Template %-letter substitutions</title>
<tgroup cols="2">
<thead>
<row><entry>%-letter</entry><entry>Substitution</entry></row>
</thead>
<tbody>
  <row>
    <entry><code>%c</code></entry>
    <entry>The content (for example, the text of the title)</entry>
  </row>
  <row>
    <entry><code>%l</code></entry>
    <entry>The label (for example, “Chapter 1” or “see also”)</entry>
  </row>
  <row>
    <entry><code>%p</code></entry>
    <entry>The page number (not yet implemented)</entry>
  </row>
  <row>
    <entry><code>%o</code></entry>
    <entry>The olink title (not yet implemented)</entry>
  </row>
  <row>
    <entry><code>%.</code></entry>
    <entry>The separator (often, “. ”)</entry>
  </row>
  <row>
    <entry><code>%%</code></entry>
    <entry>A literal <literal>%</literal> character</entry>
  </row>
</tbody>
</tgroup>
</table>

<para>If the <literal>title</literal> group is being used to generate
text for the chapter from <link linkend="fig.l10n.en.xml">our example
document</link>:</para>

<itemizedlist>
<listitem>
<para>The <literal>chapter</literal> context is used to select
the template (<literal>{chapter} %l%.%c</literal>).</para>
</listitem>
<listitem>
<para>The string <literal>{chapter}</literal> is replaced by the mapping for
<literal>chapter</literal>, which is “Chapter” in English.</para>
</listitem>
<listitem>
<para>The label <literal>%l</literal> is “1” because this is the first
chapter. (In fact, constructing the label uses templates from the
localization file as well.)</para>
</listitem>
<listitem>
<para>The separator <literal>%.</literal> is “. ”. (Like the label, this is
also constructed from a separate query to the localization file.)</para>
</listitem>
<listitem>
<para>And the content <literal>%c</literal> is “Chapter the first”. (There’s no markup
in this title, but if there was, it would be retained. The content is a list of items,
not a string.)</para>
</listitem>
<listitem>
<para>Literal text, such as the non-breakable space between “<literal>{chapter}</literal>”
and “<literal>%l</literal>”, is retained verbatim.
</para>
</listitem>
</itemizedlist>
</section>

<section>
<title>List</title>

<para>List elements are used to format items that can be repeated (terms
in a variable list, lists of authors, lists of “see also” terms, etc.).
The list consists of a series of items. Within each item, one or more
content replacements is specified with <literal>%c</literal>. The items
must be arranged so that there’s a match for one, two, three, etc. items.</para>

<para>If an item contains a repeat, that repeat will be used for as many
items as necessary to complete the list formatting. The default
list format is:</para>

<programlisting language="xml"><![CDATA[   <list name="_default">
      <items>%c</items>
      <items>%c {and} %c</items>
      <items>%c<repeat>, %c</repeat>, {and} %c</items>
   </list>]]></programlisting>

<para>Consider how a list of four authors in an <tag>authorgroup</tag>
would be formatted. Call them A, B, C, D, for simplicity (and assume
there’s no list for “<code>authorgroup</code>”, so the
“<code>_default</code>” will be used).</para>

<para>The first two items match one and two items, respectively. They
aren’t appropriate for a list of four items. The third item contains
three items and a repeat, so that can be used for a list of four (or
more) items.</para>

<para>The first <code>%c</code> is “A”. The second <code>%c</code> is
in a repeat, followed by another <code>%c</code>. There are three
elements left in the list at this point, so two will be used in the
repeat and the last one will follow it.</para>

<para>The result will be <literal>A, B, C, and D</literal> where the
word “and” was found by looking for the <literal>and</literal> key in
the mappings.</para>

</section>

<section>
<title>Letters</title>

<para>The letters group is used to identify the lexical order and grouping
of letters.</para>

<programlisting language="xml"><![CDATA[   <letters>
      <l i="-1"/>
      <l i="0">Symbols</l>
      <l i="10">A</l>
      <l i="10">a</l>
      …
      <l i="20">B</l>
      <l i="20">b</l>
      …
   </letters>]]></programlisting>

<para>All of the symbols with the same “i” value will be grouped
together.</para>

<para>This mechanism dates from the days before XSLT supported
language-specific collations. It is used in generated indexes, but perhaps it should simply
be phased out.</para>
</section>
</section>

<section xml:id="l10n-customization">
<title>Customizing a localization</title>

<para>For many users, the localizations provided are entirely sufficient.
But if you want to change them, you have a few options.</para>

<section>
<title>Replacing entire localization files</title>

<para>If you want to replace an entire localization file (if, for example,
you want to apply the same changes to a set of stylesheets), you can
approach that as follows:</para>

<orderedlist>
<listitem>
<para>Copy the localization source files.</para>
</listitem>
<listitem>
<para>Update the ones you wish to change.</para>
</listitem>
<listitem>
<para>Compile them all with
<filename>src/main/xslt/modules/xform-locale.xsl</filename> saving
the output in a new location.</para>
</listitem>
<listitem>
<para>In your stylesheet, change the
<varname>v:localization-base-uri</varname> to point to the directory
where the new locales reside. Those locale files will be used.
</para>
</listitem>
</orderedlist>
</section>

<section>
<title>Overriding mappings, groups, etc.</title>

<para>If you only want to override a small number of localization
features, it may be simpler to do so directly in your stylesheet.
The variable <varname>v:custom-localizations</varname> will be merged
with the default localizations before transformation begins.
But you can only override existing groups with the procedure described here. 
You cannot use <varname>v:custom-localizations</varname> to define new groups.</para>

<para>Suppose, for example, that you wanted:</para>

<itemizedlist>
<listitem><para>The table of contents title to simply be “Contents”,
</para></listitem>
<listitem><para>To omit the word “Appendix” from the appendix title, and
</para></listitem>
<listitem><para>To change the form of the cross reference to
appendixes to read “App. A” instead of “Appendix A”.
</para></listitem>
</itemizedlist>

<para>The following customization would accomplish that:</para>

<programlisting language="xslt"><![CDATA[<xsl:variable name="v:custom-localizations">
  <locale xmlns="http://docbook.org/ns/docbook/l10n/source"
          language="en"
          english-language-name="English">
    <mappings>
      <gentext key="TableofContents">Contents</gentext>
    </mappings>
    <group name="title-numbered">
      <template name="appendix">%l%.%c</template>
    </group>
    <group name="xref-number">
      <template name="appendix">App. %l</template>
    </group>
  </locale>
</xsl:variable>]]></programlisting>

<para>Note that it defines (a portion of) a locale source file for the
language <code>en</code>. These changes only apply to that
locale.</para>

<para>This fragment replaces the mapping for
<literal>TableofContents</literal> and the templates for numbered
titles and numbered cross references.</para>

<para>To update multiple languages, put additional <code>locale</code>
elements in the variable as siblings.</para>

<para>Formatting our example document above now produces:</para>

<figure xml:id="fig.l10n.en-alt">
<title>Sample book (Alternate)</title>
<mediaobject>
<alt>The published book again, this time with different generated
text.</alt>
<imageobject>
<imagedata fileref="media/l10n-en-alt.png"/>
</imageobject>
</mediaobject>
</figure>
</section>

<section>
<title>Changing the group</title>

<para>Sometimes, rather than change a template, you want to change
which group of templates is used. This is controlled by two variables:
<varname>v:user-title-groups</varname> and
<varname>v:user-xref-groups</varname>.
</para>

<section>
<title>Changing the title group</title>

<para>The <varname>v:user-title-groups</varname> element consists of a
list of <code>title</code> elements, each with an <att>xpath</att>
attribute, a <att>group</att> attribute, and an optional <att>template</att>
attribute.</para>

<para>Suppose the stylesheet is trying to generate a title for an
element. It considers each <tag>title</tag> element in turn. The
<att>xpath</att> expression is evaluated with the element as the
context item. If the effective boolean value of the expression is
<code>true()</code>, then that title is selected and templates from
the corresponding <att>group</att> are used.</para>

<para>If a <att>template</att> attribute is present, a template with
that name is used. Otherwise the local name of the element is used as
the template name.</para>

<para>By default, sections in a preface are not numbered. That’s
because the default title groups include:</para>

<programlisting language="xml"><![CDATA[<title xpath="self::db:section[ancestor::db:preface]"
       group="title-unnumbered"/>]]></programlisting>

<para>If you add a title that matches sections in a preface to
<varname>v:user-title-groups</varname>, it will take precedence.
For example:</para>

<programlisting language="xml"><![CDATA[<title xpath="self::db:section"
       group="title-numbered"/>]]></programlisting>

<para>Because all of the user groups are consulted first, it isn’t
necessary to include the predicate that limits this title to sections
in a preface (although it wouldn’t change the result if you did).</para>
</section>

<section xml:id="changing-the-cross-reference-group">
<title>Changing the cross reference group</title>

<para>Cross references are processed just like titles, except that the
<varname>v:user-xref-groups</varname> element consists of a
list of <code>crossref</code> elements. (See also
<xref linkend="customize-individual-cross-references"/>, for a discussion
of how individual cross references can be customized.)</para>

<para>The default for cross references to chapters and appendixes is
“<code>xref-number-and-title</code>”, so you get things like “Chapter
1. The Chapter Title”. In order to get a different presentation in the
localization example used in this chapter, the following localization
is used:</para>

<programlisting language="xslt"><![CDATA[<xsl:variable name="v:user-xref-groups" as="element()*">
  <crossref xpath="self::db:chapter|self::db:appendix"
            context="xref-number"/>
</xsl:variable>]]></programlisting>

<para>That’s why the cross reference to the first chapter is just
“Chapter 1”.
</para>

</section>
</section>
</section>

<section xml:id="l10n-caveats">
<title>Caveats</title>

<para>There’s currently little documentation to tell you which group
or template to change. The names are supposed to be somewhat self
explanatory (for speakers of English), but sometimes you just have to
look in the stylesheet.</para>

<para>The <tag>formalgroup</tag> element is unique in DocBook in that
its label depends on what it contains. A <tag>formalgroup</tag> of
<tag>figure</tag> elements is itself a “Figure” where a
<tag>formalgroup</tag> of <tag>example</tag> elements is an
“Example”.
If you need to change it, you may have to create your own
template for the <tag>formalgroup</tag> element in the
<mode>m:headline</mode> mode. The default version is in
<filename>modules/titles.xsl</filename>.</para>

</section>

<section xml:id="l10n-background">
<title>Background</title>

<para>If you’re interested in how things got this way, it’s useful to
consider the history of stylesheet localization for DocBook.
Near the end of the previous millennium, I was working
on the
<link xlink:href="https://en.wikipedia.org/wiki/Document_Style_Semantics_and_Specification_Language">DSSSL</link>
stylesheets for DocBook. They were popular enough that users of languages
other than English wanted to use them.</para>

<para>I invented a mechanism for doing simple localization
so that the word “Chapter” in “Chapter 5” would, for example,
be spelled “Chapitre” if the
book was in French, and “Розділ” if it was in Ukrainian.
What started as a simple word substitution system grew a few
macro facilities and became a little more sophisticated<footnote>
<para>I’m not sure you’d pick a twenty-something, monolingual Anglophone
American to do this work if you were planning ahead, but that’s what
happened.</para>
</footnote>.</para>

<para>Over time, with the aid of dozens of volunteers around the world
who contributed files for their languages, the DocBook stylesheets
developed localization capabilities that were for the most part good
enough.</para>

<para>Fast forward a few years and those language-specific
localization files, and some of those mechanisms, were ported to the
XSLT 1.0 stylesheets for DocBook.</para>

<para>Fast forward another decade and those XSLT 1.0 localization
files and some of the mechanisms were ported to the XSLT 2.0 stylesheets
for DocBook.</para>

<para>Fast forward the better part of <emphasis>another</emphasis>
decade and those XSLT 2.0 localization files and some of the
mechanisms were ported to the <citetitle>DocBook xslTNG</citetitle>
stylesheets.</para>

<para>Well. Sort of. Initially, I tried to replace the complex system
of templates with a model that took the text that had to be generated
and decomposed it into logical parts. It worked fine for English and
many other languages, but didn’t account for the complexity of 
many others, such as Chinese.<footnote>
<para>Turns out a fifty-something, monolingual Anglophone American isn’t
much of an improvement, really.</para></footnote></para>

<para>Starting in version 2.0.0, the xslTNG stylesheets have reverted
back to a templating system. The localization files have been
transformed a little bit to make some of the customization easier (I
hope). They can’t stray too far from the original designs because I
must reuse the localization data I have. I don’t want to devise a
system that requires another army of volunteers to provide new
localization data.</para>

<section xml:id="l10n-consequences">
<title>Consequences</title>

<para>One unfortunate consequence of this history is that there’s some
cruft in the localization files. There are mappings and possibly
templates that aren’t actually used. Or, at least, they’re not used in
the standard DocBook stylesheet. They might be used in customization
layers.</para>

<para>I made a few attempts to trim out cruft, but found all of the
results unsatisfying. So, at least for the moment, I’ve left it in
place. Like everything on earth, it’s <link
xlink:href="https://en.wikipedia.org/wiki/Mostly_Harmless">mostly
harmless</link>.
</para>
</section>
</section>

</chapter>
