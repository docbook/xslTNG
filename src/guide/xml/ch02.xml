<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
	 xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi='http://www.w3.org/2001/XInclude'
	 version="5.0" xml:id="using">
<info>
  <?db filename="ch-using"?>
  <title>Using the stylesheets</title>
</info>

<para>In principle, the stylesheets will run with any conformant XSLT
3.0 processor. For many users, that means
<link xlink:href="http://saxonica.com/">Saxon</link>. Although earlier versions
may work, Saxon 10.1 or later is recommended.</para>

<para>In principle, the instructions for using the stylesheets are
straightforward: using your XSLT 3.0 processor of choice, transform your
DocBook source documents with the <filename>docbook.xsl</filename>
stylesheet in the <filename class="directory">xslt</filename>
directory of the distribution.</para>

<para>In practice, for most users, running the stylesheets will
require getting a Java environment configured appropriately. For many,
one of the most significant challenges is getting all of the
dependencies sorted out. Modern software development, for better or
worse, often consists of one library relying on another which relies
on another, etc.</para>

<para>The <citetitle>DocBook xslTNG</citetitle> stylesheets attempt to
simplify this process, especially for the “out of the box” experience
by providing two convenience methods for running the stylesheets: a
jar file with a <classname>Main</classname> class, and a Python script
that attempts, among other things, to make sure all of the
dependencies are available.</para>

<para>If you’re an experience Java user, you may prefer to simply run
the stylesheets
<link linkend="run-with-java">directly with Java</link>.</para>

<para>Irrespective of which method you choose, running the stylesheets
is simply a matter of processing your input document
<quote><replaceable>myfile.xml</replaceable></quote> with
<quote><filename>xslt/docbook.xsl</filename></quote>. For example:
</para>

<screen role="monochrome border"
>$ <userinput>saxon myfile.xml -xsl:xslt/docbook.xsl -o:myfile.html</userinput>
</screen>

<para>The exact path to <filename>docbook.xsl</filename> will vary, of course,
but it’s in the <filename class="directory">xslt</filename> directory of the
distribution.</para>

<note>
<para>The resulting HTML document contains references to CSS stylesheets
and possibly JavaScript libraries. The output won’t look as nice in your browser
if those resources aren’t available. They’re in the <filename class="directory">resources</filename> directory of the distribution. A quick and easy way to see the
results is simply to send the output to the <filename class="directory">samples</filename>
directory from the distribution. The resources have already been copied into
that directory. In the longer run, you’ll want to make sure that they get
copied into the output directory for each of your projects.</para>
<para>Alternatively, you can copy them to a web location of your choosing and
point to them there. You can even point to them in
<link xlink:href="https://cdn.docbook.org/release/xsltng/current/resources">the
DocBook CDN</link>, but beware that those are not immutable. The “current”
version will change with every release and versioned releases will not persist
indefinitely.</para>
<para>Change the <parameter>resource-base-uri</parameter> to adjust the paths
used in the output document.</para>
</note>

<para>Many aspects of the transformation can be controlled simply by
setting parameters (see <link linkend="params"/>). It’s also possible
to change the transformation by writing your own customization layer
(see <link linkend="customization"/>).</para>

<section xml:id="java-main">
<title>Using the Jar</title>

<para>The <link linkend="get-github">ZIP distribution</link> includes a
JAR file that you can run directly. That
JAR file is
<filename><replaceable>$ROOT</replaceable
>/libs/docbook-xslTNG-<replaceable>version</replaceable>.jar</filename>
where “<code><replaceable>$ROOT</replaceable></code>” is whatever directory you chose
to unzip the distribution into and <replaceable>version</replaceable> is the
stylesheet version.</para>

<para>Assuming you unzipped the version <?DocBook-xslTNG-version?> distribution into
<filename class="directory">/home/ndw/xsltng</filename>, you can run
the JAR like this:</para>

<para><code>java -jar /home/ndw/xsltng/libs/docbook-xslTNG-<?DocBook-xslTNG-version?>.jar</code></para>

<para>Let’s try it out. Open a shell window and change to the samples directory,
<filename class="directory">/home/ndw/xsltng/samples</filename> assuming you unzipped
it as described above. Now run the java command:</para>

<screen role="monochrome border"
>$ <userinput>java -jar ../libs/docbook-xslTNG-<?DocBook-xslTNG-version?>.jar article.xml</userinput>
<computeroutput><![CDATA[<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml">
…more HTML here...
<nav class="bottom"></nav></body></html>]]></computeroutput></screen>

<para>That big splash of HTML was your first DocBook document
formatted by the stylesheets! Slightly more usefully, you can save
that HTML in a file:
</para>

<screen role="monochrome border">$ <userinput
>java -jar ../libs/docbook-xslTNG-<?DocBook-xslTNG-version?>.jar article.xml \
        -o:article.html</userinput
></screen>

<para>If you now open <filename>article.html</filename> in your
favorite web browser, you’ll see the transformed sample document
which should look like <xref linkend="fig-sample"/>.
</para>

<figure xml:id="fig-sample">
<title>The sample document: article.xml</title>
<mediaobject>
<alt>A rendering of the sample document</alt>
<imageobject>
<imagedata fileref="media/sample.png" width="5.0in"/>
</imageobject>
<textobject>
<para>This is a rendering of the sample document. It consists of the
title “Sample Article” centered on the screen with a short paragraph
of text below it. The text reads: This is a very simple DocBook
document. It serves as a kind of "smoke test" to demonstrate that the
stylesheets are working.
</para>
</textobject>
</mediaobject>
</figure>

<para xml:id="caveats">The JAR file, run this way, accepts the same
<link xlink:href="https://www.saxonica.com/html/documentation/using-xsl/commandline/">command line options</link> as Saxon, with a few caveats:</para>

<variablelist>
<varlistentry><term>No <code>-x</code>, <code>-y</code>, or <code>-r</code> options</term>
<listitem>
<para>The executable in the JAR file automatically configures Saxon to
use a catalog-based resolver and points the resolver at a catalog that
includes the files in the distribution.
</para>
</listitem>
</varlistentry>
<varlistentry><term>No <code>-init</code> option</term>
<listitem>
<para>The <citetitle>DocBook xslTNG</citetitle>
<link linkend="extensions">extension functions</link> will be registered
automatically.</para>
</listitem>
</varlistentry>
<varlistentry><term>Multiple <code>-catalog</code> options</term>
<listitem>
<para>You can repeat the <code>-catalog</code> option. All of the catalogs
you specify will be searched before the default catalog.</para>
</listitem>
</varlistentry>
<varlistentry><term>Default stylesheet</term>
<listitem>
<para>If you do not specify a stylesheet with the <code>-xsl</code> option,
the <filename>xslt/docbook.xsl</filename> stylesheet will be used automatically.
</para>
</listitem>
</varlistentry>
</variablelist>
</section>

<section xml:id="python-script">
<title>Using the Python script</title>

<para>The <link linkend="get-github">ZIP distribution</link> includes a
Python script in the <filename class="directory">bin</filename> directory.
This helper script is a convenience wrapper around Saxon. It sets up
the Java classpath and automatically configures a catalog resolver and
the DocBook extension functions.</para>

<important>
<para>The script requires the <application>click</application> and
<application>pygments</application> packages,
which you must install with <application>pip</application> before
running the script. For example:</para>
<programlisting linenumbering="unnumbered">python3 -m pip install pygments=2.6.1 click</programlisting>
</important>

<para>This script behaves much like the JAR file described in
<xref linkend="java-main"/>. In particular,
it accepts the same
<link xlink:href="https://www.saxonica.com/html/documentation/using-xsl/commandline/">command line options</link> as Saxon, with
<link linkend="caveats">the same caveats</link>.</para>

<para>The significant feature of the Python script is that it will
attempt to sort out the dependencies for you. It assumes that you’ve
used Maven to install the package and its dependencies, so you’ll
have to have <link xlink:href="http://maven.apache.org/">installed
Maven</link>. How you do that varies by platform, but your package
manager probably has it.</para>

<para>The following command will assure that you’ve downloaded all of
the necessary dependencies. You only have to do this once.</para>

<screen role="monochrome border">$ <userinput
>mvn org.apache.maven.plugins:maven-dependency-plugin:2.4:get \
      -Dartifact=org.docbook:docbook-xslTNG:<?DocBook-xslTNG-version?></userinput
></screen>

<para>That might take a while.</para>

<para>The script will work through the dependencies that you have
installed, and the things that they depend on, and construct a Java
class path that includes them all.</para>

<para>The script stores its configuration in
<code>.docbook-xsltng.json</code> in your home directory.</para>

<para>Options passed to the script are processed as follows: the
initial options, all introduced by two hyphens, are interpreted by
this script; all the remaining options are passed directly to
Saxon.</para>

<para>The script options are:</para>

<variablelist>
<varlistentry>
<term><option>--help</option></term>
<listitem>
<para>Prints a usage message.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--config:<replaceable>filename</replaceable></option></term>
<listitem>
<para>Use <replaceable>filename</replaceable> as the configuration
file. The default configuration file is
<filename>.docbook-xsltng.json</filename> in your home directory.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--resources<replaceable>:dir</replaceable></option></term>
<listitem>
<para>This option will copy the resources directory (the CSS and JavaScript files)
from the distribution into the directory where your output files are going,
<replaceable>dir</replaceable>. If
<replaceable>dir</replaceable> is not specified, the script attempts to
work out the directory from the <option>-o</option> option provided to Saxon.
If no directory is specified and it can’t work out what the directory is, it does nothing.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--java:<replaceable>javaexec</replaceable></option></term>
<listitem>
<para>Use <replaceable>javaexec</replaceable> as the Java executable.
The default java executable is the first one on your <envar>PATH</envar>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--home:<replaceable>dir</replaceable></option></term>
<listitem>
<para>Use <replaceable>dir</replaceable> as the <citetitle>DocBook
xslTNG</citetitle> home directory. This should be the location where
you unzipped the distribution. (You probably shouldn’t change this.)
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--verbose</option></term>
<listitem>
<para>Enables <emphasis>verbose</emphasis> mode; it prints more
messages about what it finds.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--debug</option></term>
<listitem>
<para>Enables <emphasis>debug</emphasis> mode. Instead of running the
transformation, it will print out the command that would have been run.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--</option></term>
<listitem>
<para>Immediately stop interpreting options. Everything that follows this option
will be passed to Saxon, even if it begins with two hyphens.
</para>
</listitem>
</varlistentry>
</variablelist>
</section>

<section xml:id="run-with-java">
<title>Run with Java</title>

<para>Assuming you’ve organized your class path so that all of the
dependencies are available (you may find that using a tool like Gradle
or Maven simplifies this process), simply run the Saxon class.</para>

<para>For Saxon HE, the class is <classname>net.sf.saxon.Transform</classname>.
For Saxon PE and EE, the class is <classname>com.saxonica.Transform</classname>.</para>

</section>

<section xml:id="run-with-docker">
<title>Run with Docker</title>

<para>This is experimental.</para>

<para>The <filename class="directory">docker</filename> directory
contains an experimental Dockerfile. Using docker allows you to
isolate the environment necessary to run the <citetitle>DocBook xslTNG
Stylesheets</citetitle> from your local environment. (If you’re using Linux, see
<xref linkend="docker-on-linux"/>.)</para>

<para>Using Docker is a three step process. Step 0, you have to have
installed Docker!</para>

<orderedlist>
<listitem>
<para>Build the docker image. In the <filename
class="directory">docker</filename> directory, run the docker build
command:</para>

<screen role="monochrome border">$ <userinput
>docker build -t docbook-xsltng .</userinput
></screen>

<para>The “<option>-t</option>” option provides a tag for the image;
you can make this anything you want. There’s a <code>VERSION</code>
build argument if you want to build a particular release. For example,</para>

<screen role="monochrome border">$ <userinput
>docker build --build-arg VERSION=<?DocBook-xslTNG-version?> -t docbook-xsltng .</userinput
></screen>

<para>will build a Docker image for the <?DocBook-xslTNG-version?> release of the
stylesheets irrespective of the version in the Dockerfile.</para>
</listitem>
<listitem>
<para>Run the image, for example:</para>

<screen role="monochrome border">$ <userinput
>docker run docbook-xsltng samples/article.xml</userinput
></screen>

<para>If you chose a different tag when you built the image, use that
tag in place of <quote><code>docbook-xsltng</code></quote> in the <command>run</command>
command. Everything after the container tag becomes options to the
<link linkend="python-script"><command>docbook</command> Python script</link>.
</para>
</listitem>
</orderedlist>

<note>
<para>The context the script runs in is <emphasis>inside</emphasis>
the container. It can’t for example, see your local filesystem. The
example above works because the distribution is unpacked inside the
container. So the <filename>article.xml</filename> document isn’t the
one on your local filesystem.</para>
</note>

<para>You can use the Docker facilities for mounting directories to
change what documents the script can access. For example:
</para>

<screen role="monochrome border">$ <userinput
>docker run -v /tmp:/output -v /path/to/samples:/input \
       docbook-xsltng /input/article.xml chunk=index.html \
       chunk-output-base-uri=/output/</userinput
></screen>

<para>Assuming that the “samples” directory in the distribution is
located at <filename class="directory">/path/to/samples</filename>, this will chunk the
<filename>article.xml</filename> sample document that the script sees
in <filename class="directory">/input</filename>
(which is where you mounted samples) and it will write the
output to <filename class="directory">/output</filename> (which is where you mounted
<filename class="directory">/tmp</filename>).</para>

<para>When the script finishes, the chunked output will be in
<filename class="directory">/tmp</filename>.</para>

<tip>
<para>If you choose to use Docker, you don’t have to rebuild the container
everytime a new stylesheet release occurs. You can simply mount the new
<filename class="directory">xslt</filename> directory into the container
like any other directory.</para>
</tip>

<section xml:id="docker-on-linux">
<title>Docker on Linux</title>

<para>When a Docker container running on Linux writes to the local
filesystem, for example because you mounted it in a container, any
files written by the container will be owned by “root”. This can be
quite inconvenient.</para>

<para>If there’s an elegant solution to this problem, I haven’t found it.
Some users have reported success using <link xlink:href="https://podman.io/">podman</link>,
a Docker-compatible, open source alternative that apparently doesn’t exhibit this behavior.
</para>

<para>The following approach will work with Docker, but it’s a bit more complicated.</para>

<orderedlist>
<listitem>
<para>Create a volume, say <replaceable>docbook-output</replaceable>,
with the <code>docker volume</code> command.</para>
<screen role="monochrome border">docker volume create <replaceable>docbook-output</replaceable></screen>
</listitem>
<listitem>
<para>Instead of mounting a directory on the local filesystem in the container, mount
the volume.</para>
</listitem>
<listitem>
<para>Run the transformation.</para>
</listitem>
<listitem>
<para>In order to copy the files off the volume, the volume has to be
mounted on a running container. You can start one with <code>docker run</code>,
for example:</para>
<screen role="monochrome border">docker run —mount source=<replaceable>docbook-output</replaceable>,target=/out \
       --name copy-helper -d busyboxy sleep 3600</screen>
</listitem>
<listitem>
<para>Copy the files out of the container. For a single file, <code>docker cp</code> will
do the trick:</para>
<screen role="monochrome border">docker cp copy-helper:/out/<replaceable>filename.html</replaceable> .</screen>
<para>If there are multiple output files, you can copy them individually, or you can use 
<code>docker exec</code>:</para>
<screen role="monochrome border">docker exec copy-helper \
       /bin/sh -c 'cd /out &amp;&amp; tar cf - .' &gt; out.tar</screen>
<para>That’ll copy all the files into the <filename>out.tar</filename> archive which you can
expand wherever you like.</para>
</listitem>
<listitem>
<para>When you have the files, you can stop and remove the container with:</para>
<screen role="monochrome border">docker stop copy-helper
docker rm copy-helper</screen>
</listitem>
<listitem>
<para>You may want to remove the volume you created as well:</para>
<screen role="monochrome border">docker volume rm docbook-output</screen>
<para>and recreate it for the next transformation. If you don’t, be
aware that the content of the volume will persist. If you resuse the
volume for other transformations, the output from the various
transformations will be mingled together on the volume.</para>
<para>And, perhaps obviously, if you remove the volume before you copy
the files off of it, the files will be lost.</para>
</listitem>
</orderedlist>

<para>In short: using a Docker container on Linux is somewhat less convenient.</para>

</section>
</section>

<section>
<title>Run in Oxygen</title>

<para>“<productname xlink:href="https://oxygenxml.com/">Oxygen</productname>” is a family
of tools for XML authoring and development. The <citetitle>DocBook
xslTNG Stylesheets</citetitle> are not currently shipped with Oxygen. To
take advantage of the xslTNG stylesheets, you must setup the transformation scenarios
yourself.</para>

<orderedlist>
<listitem>
  <para>Download the <emphasis>nosaxon</emphasis> xslTNG release that you want to use in Oxygen
  (<code>docbook-xslTNG-nosaxon-<replaceable>version</replaceable>.zip</code>) and unzip
  it somewhere in your filesystem.
  (Oxygen includes Saxon EE; the integration will be cleaner if the release you
  use does not include a different version of Saxon.)</para>
</listitem>
<listitem>
  <para>Define a transformation scenario with
  <filename><replaceable>path</replaceable>/xslt/docbook.xsl</filename> as the XSLT
 file (where <replaceable>path</replaceable> is where you unzipped the release in the previous step.</para>
</listitem>
<listitem>
  <para>In order to use the extension functions defined in
  <xref linkend="extensions" xrefstyle="%label"/>, you have to add the
  <code>docbook-xslTNG-<replaceable>version</replaceable>.jar</code> library as an
  <emphasis>Extension</emphasis> and set
  <code>org.docbook.xslt.extensions</code> as the <emphasis>Initializer class</emphasis>
  in the <emphasis>Advanced Saxon HE/PE/EE XQuery Transformation Options</emphasis> for
  the transformation scenario.</para>
  <para>Without this step the basic transformation will work, but extensions like
  <emphasis>image metadate extraction</emphasis> with <code>ext:image-metadata</code> will
  not be available.</para>
</listitem>
<listitem>
  <para>Set the stylesheet parameters accordingly in the transformation scenario.</para>
</listitem>
<listitem>
  <para>Run the transformation to generate HTML output. You will have to copy the
  <filename>resources/css</filename> and <filename>resources/js</filename> directories to
  the output location in order to get the styling and interactive features.</para>
</listitem>
</orderedlist>
</section>  

<section xml:id="extensions">
<title>Extension functions</title>

<para>The stylesheets are distributed with several extension functions:</para>

<variablelist>
<varlistentry><term><function>ext:cwd</function></term>
<listitem>
<para>Returns the “current working directory” where the processor is running.
</para>
</listitem>
</varlistentry>
<varlistentry><term><function>ext:image-properties</function></term>
<listitem>
<para>Returns basic properties of an image, width and height.
</para>
</listitem>
</varlistentry>
<varlistentry><term><function>ext:image-metadata</function></term>
<listitem>
<para>Returns much more comprehensive image properties and understands
far more image types than <function>ext:image-properties</function>.
Requires the <biblioref linkend="metadata-extractor"/> libraries.
</para>
</listitem>
</varlistentry>
<varlistentry><term><function>ext:pygmentize</function></term>
<listitem>
<para>Runs the external <biblioref linkend="Pygments"/> processor on
a verbatim listing to add syntax highlighting.
</para>
</listitem>
</varlistentry>
<varlistentry><term><function>ext:pygmentize-available</function></term>
<listitem>
<para>Returns true if the external <biblioref linkend="Pygments"/> processor
is available on the current system.
</para>
</listitem>
</varlistentry>
<varlistentry><term><function>ext:xinclude</function></term>
<listitem>
<para>Performs <biblioref linkend="xinclude"/> processing. This extension supports
the basic XPointer schemes, <biblioref linkend="RFC5147"/> fragment identifiers,
and <biblioref linkend="searchfid"/>, a scheme that supports searching in text
documents.
</para>
</listitem>
</varlistentry>
<varlistentry><term><function>ext:validate-with-relax-ng</function></term>
<listitem>
<para>Performs RELAX NG validation.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>At the time of this writing, all of these extension functions require
Saxon 10.1 or later.
Make sure that the <filename>docbook-xsltng-<replaceable>version</replaceable>.jar</filename>
file is on your class path and use the Saxon <code>-init</code> option to
load them:</para>

<screen role="monochrome border"><?db verbatim-style="plain"
?><userinput>-init:org.docbook.xsltng.extensions.Register</userinput></screen>

<section xml:id="ext-debug">
<title>Extension function debugging</title>

<para>When an extension function fails, or produces result other than
what you expect, it can be difficult sometimes to work out what
happened. You can enable debugging messages by setting the the system
property <property>org.docbook.xsltng.verbose</property>.</para>

<para>Setting the property to the value “<code>true</code>” enables
all of the debugging messages. For a more selective approach, set it
to a comma separated list of keyword values.</para>

<para>The following keywords are recognized:</para>

<variablelist>
<varlistentry><term><literal>registration</literal></term>
<listitem>
<para>Enables messages related to function registration.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>image-properties</literal></term>
<listitem>
<para>Enables messages related to image properties.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>image-errors</literal></term>
<listitem>
<para>Enables messages related to image properties, but only when the
function was unable to find the properties or encountered some sort of error
condition.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>pygmentize-show-command</literal></term>
<listitem>
<para>Enables a message that will show the pygmentize command as it was run.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>pygmentize-show-results</literal></term>
<listitem>
<para>Enables a message that will show the output of the pygmentize command,
before it is processed by the function.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>pygmentize-errors</literal></term>
<listitem>
<para>Enables messages related to errors encountered attempting to highlight
listings with pygmentize.
</para>
</listitem>
</varlistentry>
</variablelist>
</section>

</section>

<section xml:id="chunking">
<title>“Chunked” output</title>

<para>Transforming <quote><filename>myfile.xml</filename></quote> with
<filename>docbook.xsl</filename> usually produces a single HTML
document. For large documents, books like this one for example, it’s
sometimes desirable to break the input document into a collection of
web pages. You can achieve this with the
<citetitle>DocBook xslTNG Stylesheets</citetitle> by setting
two parameters:
</para>

<variablelist>
<varlistentry><term><parameter>chunk</parameter></term>
<listitem>
<para>This parameter should be set to the name that you want to use for the
first, or top, page of the result. The name
<quote><filename>index.html</filename></quote> is a common choice.
</para>
</listitem>
</varlistentry>
<varlistentry><term><parameter>chunk-output-base-uri</parameter></term>
<listitem>
<para>This parameter should be set to the absolute path where you want
to use as the base URI for the result documents, for example
<filename class="directory">/home/ndw/output/guide/</filename>.</para>
<note>
<para>The trailing slash is important, this is a URI. If you specify
only <filename class="directory">/home/ndw/output/guide</filename>, the
base URI will be taken to be <filename class="directory">/home/ndw/output/</filename>,
and the documents won’t have the URIs you expect.</para>
</note>
<para>This output URI has nothing to do with where your documents are
ultimately published and the documents themselves won’t contain any references
to it. It simply establishes the root of output. If you’re running your
XSLT processor from the command line, it’s likely that the documents will
be written to that location. If you’re running an XProc pipeline, it simply
controls the URIs that appear on the secondary result port.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>Many aspects of chunking can be easily customized. A few of the most
relevant parameters and templates are:
</para>

<variablelist>
<varlistentry><term><parameter>chunk-include</parameter> and 
<parameter>chunk-exclude</parameter></term>
<listitem>
<para>Taken together, these two parameters determine what elements in your
source document will be considered “chunks” in the output.</para>
</listitem>
</varlistentry>
<varlistentry><term><parameter>persistent-toc</parameter></term>
<listitem>
<para>If this parameter <glossterm>is true</glossterm>, then a JavaScript
“fly-out” table of contents will be available on every page.</para>
</listitem>
</varlistentry>
<varlistentry><term><parameter>chunk-nav</parameter></term>
<listitem>
<para>This parameter, discussed more thoroughly in
<link linkend="chunk-navigation"/> enables keyboard navigation between
chunks.</para>
</listitem>
</varlistentry>
<varlistentry><term><template>t:top-nav</template> and
<template>t:bottom-nav</template></term>
<listitem>
<para>These templates control how the top-of-page and bottom-of-page
navigation aids are constructed.</para>
</listitem>
</varlistentry>
</variablelist>

<section xml:id="chunk-navigation">
<title>Keyboard navigation</title>

<para>If the <parameter>chunk-nav</parameter> parameter <glossterm>is
true</glossterm>, a reference to an additional JavaScript library will
be included in the resulting pages. This library supports keyboard
navigation between the pages. The navigation keys are described in the
<link linkend="p_chunk-nav">parameter reference page</link>.
</para>

</section>
</section>

<section xml:id="presentation-mode">
<title>Presentation mode</title>

<para>Presentation mode implements paged navigation through a document.
For presentation mode, a single document is used (rather than chunking) with 
some JavaScript code providing the user interface.</para>

<para>As the name implies, it’s designed for use in presentations:</para>

<itemizedlist>
<listitem><para>It uses generally
larger fonts by default and works best for many small pages</para>
</listitem>
<listitem><para>Each unit of a
document (part, chapter, article, section, etc.) becomes a page.</para>
</listitem>
<listitem>
<para>Presentation mode replaces earlier “slides” and “speaker notes” implementations.</para>
</listitem>
</itemizedlist>

<para>Beyond the paginated navigation, presentation mode has three key features:</para>

<variablelist>
<varlistentry>
<term>Synchronization</term>
<listitem>
<para>When served with <systemitem class="protocol">https</systemitem>
(or from <systemitem class="domainname">localhost</systemitem> with
<systemitem class="protocol">http</systemitem>), presentation mode can use
local storage to synchronize display in different browser windows.</para>

<para>Add</para>
<programlisting linenumbering="unnumbered"><![CDATA[<meta xmlns="http://www.w3.org/1999/xhtml"
      name="localStorage.key" content="keyName"/>]]></programlisting>
<para>to the <tag>info</tag> of your document.</para>

<para>The key name is irrelevant, but is used to coordinate between windows.
All documents with the same key name will be synchronized together.
<footnote xml:id="f1"><para>In other words, if you have two different documents
that use the same key name and you attempt to view them simultanously
on synchronized windows, you’ll get a tangled mess.</para></footnote>
</para>

<para>Synchronized displays are useful for reading speaker notes in one view
while presenting the “normal” view to your audience.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Speaker notes</term>
<listitem>
<para>Speaker notes can be placed on any page.
They are not displayed as part of the normal presentation.
They can be revealed by selecting notes view (pressing <keycap>S</keycap>).
</para>

<para>Use the <literal>speaker-notes</literal> role to add speaker notes.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Progressive reveal</term>
<listitem>
<para>Any elements marked with the role <literal>reveal</literal> will
be hidden initially. Navigating forward or pressing <keycap>Space</keycap> will reveal them.</para>

<para>When applied to lists, the behavior applies to
all of the items except the first.</para>

<para>If an item is marked both <literal>reveal</literal> and <literal>transitory</literal>,
it will be revealed in turn and then concealed again when the next item is revealed.
This allows one to create the illusion, for example, of bullet items being replaced.</para>
</listitem>
</varlistentry>
</variablelist>

<para>In sort, you get:</para>

<itemizedlist>
<listitem><para>Quick and easy presentations from DocBook documents.
</para></listitem>
<listitem><para>No special markup required.
</para></listitem>
<listitem><para>Easy navigation.
</para></listitem>
<listitem><para>Clean look and feel.
</para></listitem>
<listitem><para>Advanced features:
</para>
<itemizedlist>
<listitem><para>Synchronized display
</para></listitem>
<listitem><para>Speaker notes
</para></listitem>
<listitem><para>Progressive and transitory reveals
</para></listitem>
</itemizedlist>
</listitem>
</itemizedlist>

<para>Pressing <keycap>F1</keycap> in a presentation mode document will display
a summary of the keyboard navigation shortcuts.</para>

<para>There’s a small customization layer in the distribution,
<filename>presentation.xsl</filename> that enables presentation mode
and changes some of the generated text so that the labels “Part”, “Chapter”, and so forth aren’t
in the output.</para>

</section>

<section xml:id="profiling">
<title>Effectivity attributes and profiling</title>

<para>When documenting computer hardware and software systems, it’s
very common to have different documentation sets that overlap
signficantly. Documentation for two different models of network
router, for example, might differ only in a few specific details. Or a
user guide aimed at experts might have a lot in common with the new user
guide.</para>

<section>
<title>Effectivity</title>

<para>There are many ways to address this problem, but one of the
simplest is to identify the “effectivity” of different parts of a
document. Effectivity in this context means identifying the parts
of a document that are effective for different audiences.</para>

<para>When a document is formatted, the stylesheets can selectively
include or omit elements based on their configured effectivity. This
“profiled” version of the document is the one that’s explicitly
targeted to the audience specified.</para>

<para>DocBook supports a wide variety of common attributes for this
purpose:</para>

<table xml:id="table.effectivity-attributes">
<title>Common DocBook effectivity attributes</title>
<tgroup cols="2">
<thead>
<row>
<entry>Attribute</entry>
<entry>Nominal effectivity axis</entry>
</row>
</thead>
<tbody>
<row><entry>arch</entry>
     <entry>The architecture, Intel or AMD</entry></row>
<row><entry>audience</entry>    
     <entry>The audience, operations or development</entry></row>
<row><entry>condition</entry>   
     <entry>Any condition (semantically neutral)</entry></row>
<row><entry>conformance</entry> 
     <entry>The conformance level</entry></row>
<row><entry>os</entry>          
     <entry>The operating system, Windows or Linux</entry></row>
<row><entry>outputformat</entry>
     <entry>The output format, print or online</entry></row>
<row><entry>revision</entry>    
     <entry>The revision, 3.4 or 4.0.</entry></row>
<row><entry>security</entry>    
     <entry>The security, secret or top-secret</entry></row>
<row><entry>userlevel</entry>   
     <entry>The user level, novice or expert</entry></row>
<row><entry>vendor</entry>      
     <entry>The vendor, Acme or Yoyodyne</entry></row>
<row><entry>wordsize</entry>    
     <entry>The word size, 32 or 64 bit</entry></row>
</tbody>
</tgroup>
</table>

<note>
<para>DocBook places no constraints on the values used for effectivity
and the stylesheets don’t either. You’re free to use “cat” and “dog”
as effectivity values in the <att>wordsize</att> attribute, if you
wish. The further you deviate from the nominal meaning, the more
important it is to document your system!</para>
</note>

<para>Consider <xref linkend="ex-profile-os"/>.</para>

<example xml:id="ex-profile-os">
<title>A contrived effectivity example</title>
<programlisting><?db verbatim-style="plain"
?><![CDATA[<para>This is an utterly contrived example of
some common text. Options are introduced with the
<phrase os="windows">/</phrase>
<phrase os="mac;linux">-</phrase> character.</para>]]></programlisting>
</example>

<para>If this document is formatted with the <parameter>profile-os</parameter>
parameter set to “windows”, it will produce:</para>

<blockquote>
<para>This is an utterly contrived example of
some common text. Options are introduced with the
<phrase os="windows">/</phrase>
 character.</para>
</blockquote>

<para>If “mac” or “linux” is specified, it will produce:</para>

<blockquote>
<para>This is an utterly contrived example of
some common text. Options are introduced with the

<phrase os="mac;linux">-</phrase> character.</para>
</blockquote>

<important>
<para>If the document is formatted without any profiling, <emphasis>all</emphasis>
of the versions will be included:</para>
<blockquote>
<para>This is an utterly contrived example of
some common text. Options are introduced with the
<phrase>/</phrase>
<phrase>-</phrase> character.</para>
</blockquote>
<para>That is unlikely to work well.</para>
</important>
</section>

<section xml:id="other-common-attributes">
<title>Other common Attributes</title>  
<para>In addition, the stylesheets support profiling on several common attributes
that are not explicitly for effectivity: <att>xml:lang</att>, <att>revisionflag</att>,
and <att>role</att>.</para>

<note>
<title>The role attribute is multi-valued</title>
<para>The stylesheets treat the <att>role</att> attribute as
<emphasis>multi-valued,</emphasis> similar to the <tag>class</tag> attribute in HTML. It
may contain a sequence of tokens, seperated by whitespace. This allows you, for example,
to classify a section as <emphasis>informal</emphasis> which should be printed in
<emphasis>landscape</emphasis> orientation with the role value
“<code>informal landscape</code>”.</para>
</note>

</section>
<section>
<title>Profiling</title>

<para>The profiling parameters are applied to every document:
<parameter>profile-arch</parameter>,
<parameter>profile-audience</parameter>,
<parameter>profile-condition</parameter>,
<parameter>profile-conformance</parameter>,
<parameter>profile-lang</parameter>,
<parameter>profile-os</parameter>,
<parameter>profile-outputformat</parameter>,
<parameter>profile-revision</parameter>,
<parameter>profile-revisionflag</parameter>,
<parameter>profile-role</parameter>,
<parameter>profile-security</parameter>,
<parameter>profile-userlevel</parameter>,
<parameter>profile-vendor</parameter>, and
<parameter>profile-wordsize</parameter>. Each of these values is treated
as a string and broken into tokens at the
<parameter>profile-separator</parameter>.</para>

<para>For every element in the source document:</para>

<itemizedlist>
<listitem>
<para>If it specifies a value for an effectivity attribute, the value
is split into tokens at the
<parameter>profile-separator</parameter>.</para>
</listitem>
<listitem>
<para>If the corresponding profile parameter is not empty, then the
element is discarded unless at least one of the tokens in the profile
parameter list is also in the effectivity list.</para>
</listitem>
</itemizedlist>

<para>In practice, elements that don’t specify effectivity are always included
and profile parameters that are empty don’t exclude any elements.</para>

</section>

<section xml:id="dynprofiling">
<title>Dynamic profiling</title>

<para>Dynamic profiling is a feature that allows you to profile the output
of the stylesheets according to the runtime values of stylesheet parameters.
You can, for example, produce different output depending on whether or not
chunking is enabled or JavaScript is being used for annotations.</para>

<para>To enable dynamic profiling, set the <parameter>dynamic-profiles</parameter>
parameter to “<glossterm baseform="is true">true</glossterm>”.</para>

<para>In the interest of performance, security, and legibility,
dynamic profiles don’t support arbitrary expressions.
You can use a variable name by itself, <code>$flag</code>, which tests
if that variable <glossterm>is true</glossterm>, or you can use a
simple comparison, <code>$var=value</code> which tests if (the string value of)
<code>$var</code> has the value <code>value</code>.
(If <code>$var</code> is a list, it’s an existential
test.) You also can’t use boolean operators or any other fancy expressions.
</para>

<para>If you really need to have a dynamic profile based on some
arbitrary condition, you can do it by making a customization layer
that stores that computation in a variable and then testing that
variable in your dynamic profile.</para>

<sidebar>
<title>Backwards incompatibility</title>
<para>This is slightly backwards
incompatible in that profile values that begin with a dollar sign are
now interpreted differently. This is only true if dynamic profiling is
enabled.</para>
</sidebar>

<para>An element with dynamic profiling will be published if none of
it’s profile expressions evaluate to false. This is slightly different
from the ordinary profiling semantic which publishes the element if
any of it’s values match.</para>
</section>
</section>

<section xml:id="customize-individual-cross-references">
<title>Customize individual cross references</title>

<para>Most kinds of generated text apply across an entire document: do you want chapters
to be numbered? Should generated text be in English or French? What form should numbered
and unnumbered sections have? The mechanisms for changing this generated text are
described in <xref linkend="gentext"/>. These mechanisms control the formatting
of cross references.</para>

<para>But it’s sometimes useful to be able to change the format of a
cross reference on an individual basis (that is, on the basis of the
context in which the <emphasis>reference</emphasis> occurs, not the
nature of what is <emphasis>referenced</emphasis>). You might, for
example, want to shorten a cross reference to just a label if it’s
already been referenced several times.</para>

<para>Consider a cross reference to a section:
<code><![CDATA[see <xref linkend="syntax-highlighting"/>]]></code>.
In the localization style of this guide, that is rendered like this:
see <xref linkend="syntax-highlighting"/>.</para>

<para>The text that is generated by a cross reference can be customized
for individual references with the <code>xrefstyle</code> attribute.
For example, 
<code><![CDATA[see <xref linkend="syntax-highlighting" xrefstyle="%l"/>]]></code>,
will produce a result like this:
see <xref linkend="syntax-highlighting" xrefstyle="%l"/>.</para>

<para>You can use the <code>%c</code>, <code>%l</code> and
<code>%p</code> values from <xref
linkend="table.template-letter-substitutions"/> in
<code>xrefstyle</code>. There is also an additional
<code>%label</code> for <emphasis>the full Label</emphasis>, which is
the component`s name and number. The use of these percent-values is
explained in the following table. The result column shows how a
cross references to the section below entitled
<xref linkend="syntax-highlighting" xrefstyle="%c"/> would appear
in each <att>xrefstyle</att>.</para>

<informaltable frame="all">
  <tgroup cols="3" rowsep="1" colsep="1">
    <colspec colname="c1" colwidth="1*" rowsep="1"/>
    <colspec colname="c2" colwidth="1*" rowsep="1"/>
    <colspec colname="c3" colwidth="2*" rowsep="1"/>
    
    <thead valign="top">
      <row>
        <entry>Value of <att>xrefstyle</att> attribute on <tag>xref</tag></entry>
        <entry>Result</entry>
        <entry>Remark</entry>
      </row>
    </thead>
    
    <tbody valign="top">
      <row>
        <entry>(<code>@xrefstyle</code> is absent)</entry>
        <entry><xref linkend="syntax-highlighting"/></entry>
        <entry>Default</entry>
      </row>
      <row>
        <entry><code>%c</code></entry>
        <entry><xref linkend="syntax-highlighting" xrefstyle="%c"/></entry>
        <entry>Content, e. g. title of target</entry>
      </row>
      <row>
        <entry><code>%l</code></entry>
        <entry><xref linkend="syntax-highlighting" xrefstyle="%l"/></entry>
        <entry>Label, usually the target’s number.</entry>
      </row>
      <row>
        <entry><code>%label</code></entry>
        <entry><xref linkend="syntax-highlighting" xrefstyle="%label"/></entry>
        <entry>The full Label, usually the target’s number and name.</entry>
      </row>
      <row>
        <entry><code>%p</code></entry>
        <entry><xref linkend="syntax-highlighting" xrefstyle="%p"/></entry>
        <entry>Page number in print output (PDF). Displays as “#” in HTML.</entry>
      </row>
      <row>
        <entry><code>%label (%c)</code></entry>
        <entry><xref linkend="syntax-highlighting" xrefstyle="%label (%c)"/></entry>
        <entry>You can combine %-letters with text</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>

<simplesect>
<title>Legacy values for xrefstyle</title>

<para>In order to support migration from XSLT 1.0 Stylesheets, xslTNG supports the
<code>template:</code> Syntax which is explained in
“<link xmlns:xlink="http://www.w3.org/1999/xlink"
       xlink:href="http://www.sagehill.net/docbookxsl/CustomXrefs.html#usingtemplate">Customizing
    with an xrefstyle attribute / Using template:</link>” in
 the book “<citetitle>DocBook XSL: The Complete
  Guide</citetitle>”. This is summarized in the following
  table.</para>

  <informaltable frame="all">
    <tgroup cols="3" colsep="1" rowsep="1">
      <colspec colname="c1" colwidth="1*" rowsep="1"/>
      <colspec colname="c2" colwidth="1*" rowsep="1"/>
      <colspec colname="c3" colwidth="2*" rowsep="1"/>
      
      <thead valign="top">
        <row>
          <entry>Value of <att>xrefstyle</att> attribute on <tag>xref</tag></entry>
          <entry>Result</entry>
          <entry>Remark</entry>
        </row>
      </thead>
      
      <tbody valign="top">
        <row>
          <entry><code>template:the chapter numbered %n</code></entry>
          <entry><xref linkend="syntax-highlighting"
            xrefstyle="template:the chapter numbered %n"/></entry>
          <entry>XSLT 1.0 Legacy Syntax</entry>
        </row>
        <row>
          <entry><code>template:the chapter called %t</code></entry>
          <entry><xref linkend="syntax-highlighting"
            xrefstyle="template:the chapter called %t"/></entry>
          <entry>XSLT 1.0 Legacy Syntax</entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
</simplesect>

  <simplesect xml:id="using-pagenumber-in-crossreferences">
    <title>Using pagenumber in cross-references</title>

    <para>The <code>%p</code> value in <tag class="attribute">xrefstyle</tag> makes
    little sense in HTML output, since there are no page numbers. If you use it
    anyway, it will be displayed as
    “<phrase outputformat="online"
     ><xref linkend="using-pagenumber-in-crossreferences" xrefstyle="%p"
     /></phrase><phrase outputformat="print"
     ><link linkend="using-pagenumber-in-crossreferences">#</link></phrase>”.
    This may be confusing for readers. A possible solution for this problem is the use of
    the <code>outputformat</code> attribute. For example:</para>

<informalexample>
<blockquote>
<para>The <code>outputformat</code> attribute was intoduced in
<xref linkend="profiling"/> and
<xref linkend="table.effectivity-attributes" xrefstyle="%label"
/><phrase outputformat="print"> on page
<xref linkend="table.effectivity-attributes" xrefstyle="%p"
/></phrase>.
</para>
</blockquote>
</informalexample>

<para>The paragraph markup in that example is:</para>

<example>
  <title>Use outputformat to deal with page numbers in cross references</title>
  <programlisting><![CDATA[<para>The <code>outputformat</code> attribute was intoduced in
<xref linkend="profiling"/> and
<xref linkend="table.effectivity-attributes" xrefstyle="%label"
/><phrase outputformat="print"> on page
<xref linkend="table.effectivity-attributes" xrefstyle="%p"
/></phrase>.
</para>]]></programlisting>
</example>

<para>Where the page number appears in the print version, but not in the HTML version.
Note that some care has been taken with line breaks and spaces around markup
to avoid extraneous whitespace in either version.
</para>
  </simplesect>
</section>

<section xml:id="syntax-highlighting">
<title>Syntax highlighting</title>

<para>Program listings and other verbatim environments can be “syntax highlighted”,
that is, the significant tokens in the listing can be colored differently (keywords in red,
quoted strings in blue, that sort of thing).</para>

<para>The default syntax highlighter is <biblioref linkend="Pygments"/>, an external
Python program. This has the advantage that the highlighted listing is available to
the stylesheets. The stylesheets can then render line numbers, call outs, and other
features.</para>

<para>But running an external program for every verbatim environment requires
<emphasis>having</emphasis> the external program and also, if there are many verbatim
environments, may slow down the formatting process</para>

<para>An alternative is to use a JavaScript highlighter in the browser such as
<biblioref linkend="highlight.js"/> or <biblioref linkend="Prism"/>. This approach
has no impact on formatting and doesn’t require an external process. However, it means the
<citetitle>xslTNG Stylesheets</citetitle> have no control over the process. Most of the 
verbatim options only apply when Pygments is used.</para>

<para>The choice of syntax highlighter is determined by the
<parameter>verbatim-syntax-highlighter</parameter> parameter.</para>
</section>

<section xml:id="persistent-toc">
<title>Persistent table of contents</title>

<para>The persistent Table of Contents (ToC) provides a full ToC for
an entire document accessible from each <link linkend="chunking">chunked</link>
page.</para>

<para>The ToC is accessed by clicking on the “book” icon in the upper right
corner of the page as shown in <xref linkend="fig.ptoc.1"/>.</para>

<figure xml:id="fig.ptoc.1">
<title>Opening the ToC</title>
<mediaobject>
<alt>Screen capture with an arrow pointing at the closed book icon in
the upper-right corner.</alt>
<imageobject>
<imagedata fileref="media/ptoc-1.png"/>
</imageobject>
</mediaobject>
</figure>

<para>The icon and other aspects of the style can be changed by providing
<parameter>persistent-toc-css</parameter>.</para>

<para>Once open, the ToC is displayed. A long ToC will be scrolled to
the location of the current page in the document as shown in
<xref linkend="fig.ptoc.2"/>.</para>

<figure xml:id="fig.ptoc.2">
<title>The Persistent ToC</title>
<mediaobject>
<alt>Screen capture showing the persistent ToC window on the right.</alt>
<imageobject>
<imagedata fileref="media/ptoc-2.png"/>
</imageobject>
</mediaobject>
</figure>

<para>The persistent ToC popup is transient by default, meaning that
it will disappear if you use it to navigate to a different page. If
you open the popup by “shift-clicking” on it, the ToC will persist
until you dismiss it. This can also be accomplished by selecting the
check box in the ToC. The presense of the search bar is controlled by
the <parameter>persistent-toc-search</parameter> parameter.</para>

<!-- N.B. This ID is in the persistent-toc.js file; do not change it! -->
<section xml:id="ptoc-data-file">
<title>Persistent ToC data</title>

<para>The data used by the persistent ToC can be stored in a separate
file or stored in each chunk. This is controlled by the
<parameter>persistent-toc-filename</parameter>.</para>

<orderedlist>
<listitem>
<para>If <link linkend="chunking">chunking</link> is enabled and the
<parameter>persistent-toc-filename</parameter> parameter is non-empty,
it’s used as a filename and a single copy of the ToC will be saved in
that file.</para>
<para>The benefit of this approach is that the HTML chunks are
smaller. If the persistent ToC is written into every chunk, the size
of each HTML chunk increases in proportion to the size of the ToC. For
a large document with lots of small pages, this can be a significant
percentage of the overall size.</para>
<para>There are two disadvantages:</para>
<orderedlist>
<listitem>
<para>This will not work if the documents are accessed with
<code>file:</code> URIs: you must use <code>http</code> (and in some
environments, perhaps <code>https</code>) to load the documents. The
browser will (quite reasonably) not allow JavaScript to load documents
from the filesystem.</para>
</listitem>
<listitem>
<para>Also, with this approach, opening the ToC requires another
document to be loaded into the browser. For a large ToC, this can
introduce visible latency, although browser caching tends to reduce
that after the document has been loaded once.
</para>
</listitem>
</orderedlist>
</listitem>
<listitem>
<para>If the 
<parameter>persistent-toc-filename</parameter> parameter is the empty
sequence, a copy of the ToC is stored in each chunk.</para>

<note>
<para>When stored in each chunk, the Table of Contents is secreted away in a
<tag namespace="http://www.w3.org/1999/xhtml">script</tag> element so that
it will be ignored by screen readers and other user agents that don’t
support JavaScript or CSS.
</para>
</note>

<para>The benefit of this approach is that it requires no additional
document to be loaded and will work even if the documents are loaded
with <code>file</code> URIs.</para>
<para>The disadvantage of this approach is that it increases the size of
each chunk. Whether that matters depends on the size of the ToC, the relative
size of the chunks, bandwidth and other constraints.</para>
</listitem>
<listitem>
<para>If chunking <emphasis>is not</emphasis> being used, there will
only be one HTML result and the ToC will always be stored in that chunk.
</para>
</listitem>
</orderedlist>
</section>
</section>

<section xml:id="onpage-toc">
<title>On-page table of contents</title>

<para>Documents come in many shapes and sizes. Consequently, there are
a variety of navigation mechanisms available. For long documents, such as books,
a Table of Contents (ToC) is traditional (as are indexes). For web presentation,
long documents may be broken into chunks, for example at the chapter level.
In this case, header and footer navigation between chunks is almost always
available. For large documents a “<link linkend="persistent-toc">persistent
ToC</link>” can enable quick navigation from any chunk.</para>

<para>You can also enable an on-page ToC. The on-page ToC provides a
navigation mechanism for sections within a page. By default, it
appears on the right of the page if the window is wide enough to
comfortably display it next to the main body.</para>

<para>The current implementation requires JavaScript. In fact it is not
constructed from the DocBook markup, but instead from the HTML markup when
the page is rendered. To be precise, the ToC is constructed from HTML
<tag namespace="http://www.w3.org/1999/xhtml">section</tag> elements that
begin with a <tag namespace="http://www.w3.org/1999/xhtml">header</tag> that
contains an
<tag namespace="http://www.w3.org/1999/xhtml"
>h1</tag>…<tag namespace="http://www.w3.org/1999/xhtml">h6</tag>
element. It is therefore either a bug or a feature, depending on your perspective,
that a customization layer that changes how sections are marked up will change
what appears in the ToC. If you simply wish to suppress a particular section
from appearing in the ToC, add <literal>nopagetoc</literal> to its
<tag class="attribute">class</tag> attribute.</para>

<para>Several parameters control presentation and formatting of the on-page ToC.</para>

<variablelist>
<varlistentry><term><parameter>pagetoc-elements</parameter></term>
<listitem>
<para>A list of the names of the elements (technically, the classes of
the sections) that should get an on-page ToC. It’s empty by default (meaning no
such ToC is rendered). For the standard presentation of this guide,
the list is set to <code>preface chapter appendix refentry</code>.
(The sneaky among you may wonder if you could simply set it to “<code>component</code>”
because that class is used for all those elements; “Yes. Yes, you could.”)
</para>
</listitem>
</varlistentry>
<varlistentry><term><parameter>pagetoc-dynamic</parameter></term>
<listitem>
<para>Determines whether or not the ToC is “dynamic”. Inspired by
Kevin Drum’s
<link xlink:href="https://kld.dev/toc-animation/">table of contents progress
animation</link>, the ToC keeps track of the reader’s location in the main
view and highlights the corresponding sections in the ToC (albeit without the
clever SVG animation of the original).</para>
<para>Set this parameter to false if you find the animation distracting.
(If the animation is enabled, a control is provided to let the reader turn it off,
in case <emphasis>they</emphasis> find it distracting.)</para>
</listitem>
</varlistentry>
<varlistentry><term><parameter>pagetoc-js</parameter></term>
<listitem>
<para>This is the JavaScript that implements the on-page ToC. Changing this
parameter allows you to replace it with JavaScript of your own invention.
</para>
</listitem>
</varlistentry>
<varlistentry><term>CSS</term>
<listitem>
<para>There is no <literal>pagetoc-css</literal> parameter; the CSS is integrated
into the standard CSS. You can find it in the <filename>pagetoc.scss</filename> file
in the repository if you want to change the presentation. (Don’t change that file,
simply add overriding rules later in the cascade.)
</para>
</listitem>
</varlistentry>
</variablelist>

<para>There is also a JavaScript API that you can use to control some features
of the presentation. This is done by adding a <code>DocBook</code> property to
the browser’s <code>window</code> object. The value of the <code>DocBook</code> property
should be a map. To control the on-page ToC, add a <code>pagetoc</code> property
to the <code>DocBook</code> map. The value of this property must also be a map.</para>

<para>The properties of the <code>pagetoc</code> map can be used to change
the display:</para>

<variablelist>
<varlistentry><term><code>decorated</code></term>
<listitem>
<para>This is the markup used for the user-control on the on-page ToC when
the ToC is decorated. The default value is “<literal>☀</literal>”.
</para>
</listitem>
</varlistentry>
<varlistentry><term><code>plain</code></term>
<listitem>
<para>This is the markup used for the user-control on the on-page ToC when
the ToC is plain (not decorated). The default value is “<literal>￮</literal>”.
</para>
</listitem>
</varlistentry>
<varlistentry><term><code>hidden</code></term>
<listitem>
<para>This is the markup used for the user-control on the on-page ToC when
the ToC is hidden. The default value is “<literal>◄</literal>”.
</para>
</listitem>
</varlistentry>
<varlistentry><term><code>nothing_to_reveal</code></term>
<listitem>
<para>This property controls how the on-page ToC is rendered if there are 
no additional sections to be revealed. It can have the value
“<literal>hide</literal>”, to hide the ToC, “<literal>plain</literal>” to
make its presentation plain in this case, or “<literal>decorated</literal>” to
use the decorated style. The ToC will not appear if there are no sections.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>To use the JavaScript API, make sure your assignments to the
<code>DocBook</code> object are performed <emphasis>before</emphasis> the
on-page ToC JavaScript is executed.</para>

</section>

<section xml:id="print">
<title>Paged-media (print output)</title>

<para>Formatters, the tools that turn markup of any sort into
aesthetically pleasing (or even passably acceptable) printed pages are
fiendishly difficult to write.</para>

<para>In the XML space, there have been a number of standards and
vendor-specific solutions to this problem. The current standards are
<biblioref linkend="XSLFO"/> and <biblioref linkend="CSS"/>.
</para>

<para>At present, the <citetitle>DocBook xslTNG Stylesheets</citetitle>
are focused on CSS for print output. There’s a customization layer
that produces “paged-media-ready” HTML that can be processed with
a CSS formatter such as <biblioref linkend="AntennaHouse"/>
or <biblioref linkend="Prince"/>.</para>

<para>To get print output, format your documents with the
<filename>print.xsl</filename> stylesheet instead of the
<filename>docbook.xsl</filename> stylesheet. The additional cleanup provided
by <filename>print.xsl</filename> assures that footnotes, annotations, and
other elements will appear in the right place, and with reasonable
presentation, in the printed version.</para>

<para>The resulting HTML document can be formatted directly with a
CSS paged-media formatter.</para>

<section xml:id="landscape">  
<title>Landscape orientation</title>
<para>The default orientation for pages in print output is portrait. The
stylesheets support a simple mechanism for selecting landscape pages. This works
in many common cases, but you may need additional CSS if you have complex requirements.</para>

<note>
<para>This feature enables whole <emphasis>pages</emphasis> with a landscape orientation.
It doesn’t support rotating a single block element (paragraph, table, figure, etc.) to
lanscape orientation <emphasis>within</emphasis> an otherwise portrait page. If you rotate
a single block element, it will introduce a page break before and after the element.
</para>
<para>Rotations within an otherwise portrait page might be possible with custom
CSS, depending on your formatting engine.</para>
</note>

<para>The stylesheets slightly abuse the <att>role</att> attribute
(which is <link linkend="other-common-attributes">multi-valued</link>) for this
purpose. Placing the token <code>landscape</code> in the <att>role</att> attribute
will select lanscape orientation for the element on which the <att>role</att>
attribute appears. (Placing the token <code>portrait</code> in the <att>role</att>
attribute will select portrait orientation in an otherwise landscape document.) </para>

<para>This may apply to the whole <tag>book</tag> or
<tag>article</tag>, or to individual <tag>chapter</tag>, <tag>section</tag> or
<tag>appendix</tag> elements.</para>

<para>You can also print individual tables or figures in landscape, if they are
too wide for portrait pages. For wide tables, you should use the
<att>orient</att> attribute with the value <code>land</code>, because it is
provided precisely for this purpose. However, in the interests of a uniform
solution, the <att>role</att> attribute with the value <code>landscape</code>
can also be used for tables.</para>
  
<para>For legacy reasons, the <code>landscapeFigure</code> processing instruction from the XSLT 1.0 stylesheets is also supported for <tag>figure</tag> and 
<tag>informalfigure</tag> elements, as described 
in <link xlink:href="http://www.sagehill.net/docbookxsl/LandscapeImage.html">Chapter 18 of Bob Staytons <quote>Complete Guide</quote>.</link>
</para>  

<section xml:id="custom-ahf">
<title>AntennaHouse extensions</title>

<para>The rotation mechanism supported by standard CSS rotates the entire page,
including any running headers and footers. For documents that are read online,
this has some real advantages as the PDF viewer is likely to show the landscape
pages “the right way up”.</para>

<para>But for documents that are going to be printed, or where a more
traditional presentation is desirable, the goal is usually to rotate the
<emphasis>content</emphasis> of the page, but not the page itself.</para>

<para>This can be accomplished with the AntennaHouse formatter using the
<parameter>vendor-css</parameter> extension. In an otherwise portrait document,
including the <filename>vendor-ahf-portrait.css</filename> file using
<parameter>vendor-css</parameter> will present landscape rotations in the
portrait page. If the document is being printed on landscape pages,
including the <filename>vendor-ahf-landscape.css</filename> file using
<parameter>vendor-css</parameter> will present <emphasis>portrait</emphasis>
rotations in the landscape page.</para>
</section>
</section>
</section>

<section xml:id="epub">
<title>EPUB output</title>

<para>The <citetitle>DocBook xslTNG Stylesheets</citetitle> will
produce output designed for EPUB(3) if you use the
<filename>epub.xsl</filename> stylesheet instead of
<filename>docbook.xsl</filename>. This is new in version 1.11.0 and
may be incomplete. The output conforms to
<link xlink:href="https://www.w3.org/publishing/epubcheck/">EPUBCheck</link>
version 3.2.</para>

<para>Producing an EPUB file is a slightly complicated process. You
must produce (X)HTML that conforms to strict requirements, you must
produce a media type document containing a specific text string, you
must produce a manifest that identifies all of the content including
all the images, stylesheets, fonts, etc, and you must finally create a
ZIP archive (with some special consideration as well).</para>

<para>The stylesheets can only do part of this process. In some future
release where we use, for example, an XProc 3.0 pipeline, it may be
practical to do more.</para>

<para>When you run the EPUB stylesheet, the principle result document is the
media type document. This has two useful side effects: first, it establishes the
output base URI from which all the relative documents can be created, and second, if
you fail to process some element in the input, you’re likely to get extra text characters
in the principle result document. That will cause tools to reject the EPUB and draw your
attention to the error.</para>

<para>The stylesheets also produce the META-INF files and the OPS
directory containing the document parts and the manifest.</para>

<para>There are two parameters specific to EPUB:</para>

<variablelist>
<varlistentry><term><literal>pub-id</literal></term>
<listitem>
<para>This is the unique identifier for your EPUB. If you don’t specify one, a random
one will be generated for you.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>manifest-extra</literal></term>
<listitem>
<para>This is a URI. If it’s specified, then it must be an XML document and that will
be added to the EPUB manifest. This is how you can add links to media and other resources
that the stylesheets don’t know about.
</para>
</listitem>
</varlistentry>
</variablelist>

<section xml:id="metadata">
<title>Adding metadata</title>
<para>You can add elements to the <tag>info</tag> element of the root element of your
document to add metadata to your EPUB files. Elements in the Dublin Core namespace
will be copied through. You can also add the elements
<code>meta</code> and <code>link</code> in the special namespace
<code>http://docbook.org/ns/docbook/epub</code>.</para>
</section>

<section xml:id="epub-in-ation">
<title>EPUB in action</title>

<para>The <link
xlink:href="https://github.com/docbook/getting-started/">Getting
Started</link> project has been updated to show how to create EPUB
from a book. The project has support for dealing with external media,
fonts, and constructing the final ZIP file.</para>
</section>
</section>

<section xml:id="ad-hoc-css-styling">
<title>Ad hoc CSS styling</title>

<para>Generally speaking, it’s considered good practice to separate
content from presentation. On the web, this is most often accomplished
with clean, structural HTML as the content and CSS styling providing
the presentation. Indeed, that’s how the output from the
<citetitle>DocBook xslTNG Stylesheets</citetitle> is
structured.</para>

<para>And yet, sometimes you need to tweak individual elements in
small ways. For example, you may want to change the style of a single
<tag>programlisting</tag> to avoid a page break inside it. Or perhaps
you need to make some adjustment to a single image.</para>

<para>In principle, this can be done in a completely “hands off”
manner: add an ID to the element and add an ID selector to the
external CSS file. In practice, that’s a bit tedious and there’s
nothing in the source to suggest that the styling is required or even
exists.</para>

<para>HTML allows for inline styles with the <tag
class="attribute">style</tag> attribute and starting in version 2.1.5,
the xslTNG stylesheets provide a way to access this feature.</para>

<para>DocBook allows namespace qualified attributes on any element.
Adding attributes in the <code>https://xsltng.docbook.org/ns/css</code>
namespace to an element will add those properties to the HTML <tag
class="attribute">style</tag> attribute. For example:</para>

<programlisting language="xml"><xi:include href="ch02.xml"
  parse="text" fragid="search=#xmlns&#x3a;css=#,#a border#"/>
</programlisting>

<para>Will be rendered as you expect:</para>

<para xmlns:css="https://xsltng.docbook.org/ns/css"
      css:border="1px solid blue" css:border-radius="0.5em"
      css:padding="0.5em">This
is a paragraph with a border.</para>

<para>The generated HTML wraps up the CSS properties in a style
attribute:</para>

<programlisting><![CDATA[<p style="padding:0.5em;border:1px solid blue;border-radius:0.5em;"
>This is a pargraph with a border.</p>]]></programlisting>

<para>To facilitate different properties based on the output medium, the stylesheets
will also look for attributes in the
“<code>https://xsltng.docbook.org/ns/css#<parameter>output-media</parameter></code>”
namespace. For example, this paragraph:</para>

<programlisting xmlns:p-css="https://xsltng.docbook.org/ns/css#print"
                language="xml" p-css:page-break-inside="avoid"
><xi:include href="ch02.xml"
  parse="text" fragid="search=#e&#x78;mark1#;after,#/para#"/>
</programlisting>

<para>Will be rendered with a pinkish background online and with a grey
background in print:</para>

<!-- exmark1 -->
<para xmlns:p-css="https://xsltng.docbook.org/ns/css#print"
      xmlns:css="https://xsltng.docbook.org/ns/css"
      css:background-color="#ffaaaa"
      p-css:background-color="#bbbbbb">This paragraph
has a background color.
</para>

<para>By default, the stylesheets set
<parameter>output-media</parameter> to <literal>screen</literal> for
“ordinary output”, <literal>epub</literal> for EPUB, and
<literal>print</literal> for paged media.</para>

</section>
</chapter>
