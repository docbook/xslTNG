name: build-docbook
on: push

jobs:
  check_branch:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.check_step.outputs.branch }}
      reponame: ${{ steps.check_step.outputs.reponame }}
      tag: ${{ steps.check_step.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get branch name, etc.
        id: check_step
        run: |
          raw=${{ github.repository }}
          reponame=${raw##*/}
          echo "reponame=$reponame" >> $GITHUB_OUTPUT
          raw=$(git branch -r --contains ${{ github.ref }})
          branch=${raw##*/}
          echo "branch=$branch" >> $GITHUB_OUTPUT
          tag=""
          if [ ${{ github.ref_type }} = "tag" ]; then
            tag=${{ github.ref_name }}
            echo "Running in $reponame on $branch for $tag"
          else
            echo "Running in $reponame on $branch"
          fi
          echo "tag=$tag" >> $GITHUB_OUTPUT

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: check_branch
    env:
      HAVE_ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN != '' }}
      HAVE_GPGKEYURI: ${{ secrets.ACCESS_TOKEN != '' && secrets.GPGKEYURI != '' }}
      HAVE_SAXON_EE: ${{ secrets.SAXON_PASSPHRASE != '' }}
      CIWORKFLOW: yes
      CI_SHA1: ${{ github.sha }}
      CI_BUILD_NUM: ${{ github.run_number }}
      CI_PROJECT_USERNAME: ${{ github.repository_owner }}
      CI_PROJECT_REPONAME: ${{ needs.check_branch.outputs.reponame }}
      CI_BRANCH: ${{ needs.check_branch.outputs.branch }}
      CI_TAG: ${{ needs.check_branch.outputs.tag }}
    steps:
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install epubcheck rsync libxml2-dev libxslt-dev

      # lxml needed by html5-parser needs libxml2-dev and libxslt-dev, apparently
      - name: Setup python dependencies
        run: |
          python3 -m pip install pygments==2.6.1 click cython
          python3 -m pip install saxonche
          python3 -m pip install --no-binary lxml html5-parser

      - name: Download and install SASS
        run: |
          curl -o /tmp/dart.tar.gz -L https://github.com/sass/dart-sass/releases/download/1.56.0/dart-sass-1.56.0-linux-x64.tar.gz
          cd /tmp && tar zxf dart.tar.gz && sudo mv dart-sass/sass /usr/local/bin

      - name: Checkout the gh-pages branch
        uses: actions/checkout@v3
        with:
          ref: 'gh-pages'

      - name: Save EPUB and PDFs
        run: tar cf - epub pdf | gzip > /tmp/save-epub-pdf.tar.gz

      - name: Save the current version(s) of the guide
        run: |
          mkdir /tmp/guide
          rsync -var guide/ /tmp/guide/
          rm -f /tmp/guide/*.html /tmp/guide/validated.xml
          cp guide/index.html /tmp

      - name: Checkout the main branch
        uses: actions/checkout@v3

      - name: Setup SaxonEE
        if: ${{ env.HAVE_SAXON_EE == 'true' }}
        run: gpg --batch --yes --passphrase ${{ secrets.SAXON_PASSPHRASE }} -d tools/saxon.enc | tar zxf -

      - name: Build
        run: |
          ./gradlew -PrequireCompileSuccess=true dist

      - name: Cleanup SaxonEE
        if: ${{ env.HAVE_SAXON_EE == 'true' }}
        run: rm -rf lib

      - name: Restore EPUB and PDFs
        run: cd build/website && tar zxf /tmp/save-epub-pdf.tar.gz

      - name: Restore previous version(s) of the guide
        run: |
          rsync -var /tmp/guide/ build/website/guide/
          if [ ! -f build/website/guide/index.html ]; then \
            mv /tmp/index.html build/website/guide/; \
          fi

      - name: Deploy main to gh-pages
        if: ${{ env.HAVE_ACCESS_TOKEN == 'true' && env.CI_BRANCH == 'main' }}
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: build/website
          token: ${{ secrets.ACCESS_TOKEN }}
          branch: gh-pages
          target-folder: /

      - name: Deploy tagged release to CDN as ${{ env.CI_TAG }}
        if: ${{ env.HAVE_ACCESS_TOKEN == 'true' && env.CI_BRANCH == 'main' && env.CI_TAG != '' }}
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: build/release
          token: ${{ secrets.ACCESS_TOKEN }}
          repository-name: ${{ github.repository_owner}}/cdn
          branch: master
          target-folder: /release/xsltng/${{ env.CI_TAG }}

      - name: Deploy tagged release to CDN as current
        if: ${{ env.HAVE_ACCESS_TOKEN == 'true' && env.CI_BRANCH == 'main' && env.CI_TAG != '' }}
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: build/release
          token: ${{ secrets.ACCESS_TOKEN }}
          repository-name: ${{ github.repository_owner}}/cdn
          branch: master
          target-folder: /release/xsltng/current

      - name: Publish release
        uses: softprops/action-gh-release@v1
        if: ${{ env.HAVE_ACCESS_TOKEN == 'true' && env.CI_BRANCH == 'main' && env.CI_TAG != '' }}
        with:
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          files: |
            build/distributions/docbook-xslTNG-${{ env.CI_TAG }}.zip

      - name: Publish to Sonatype
        if: ${{ env.HAVE_GPGKEYURI == 'true' && env.CI_BRANCH == 'main' && env.CI_TAG != '' }}
        run: |
          curl -s -o secret.gpg ${{ secrets.GPGKEYURI }}
          ./gradlew -PsonatypeUsername=${{ secrets.SONATYPEUSER }} \
                  -PsonatypePassword="${{ secrets.SONATYPEPASS }}" \
                  -Psigning.keyId="${{ secrets.SIGNKEY }}" \
                  -Psigning.password="${{ secrets.SIGNPSW }}" \
                  -Psigning.secretKeyRingFile=./secret.gpg \
                  publish
          rm -f secret.gpg

      - name: Checkout the CDN
        uses: actions/checkout@v3
        if: ${{ env.HAVE_ACCESS_TOKEN == 'true' && env.CI_BRANCH == 'main' && env.CI_TAG != '' }}
        with:
          repository: ${{ github.repository_owner}}/cdn
          token: ${{ secrets.ACCESS_TOKEN }}
          fetch-depth: 0
          ref: 'master'

      - name: Rebuild the CDN indexes
        if: ${{ env.HAVE_ACCESS_TOKEN == 'true' && env.CI_BRANCH == 'main' && env.CI_TAG != '' }}
        run: bin/git-index-html

      - name: Deploy the indexes back to the CDN
        uses: JamesIves/github-pages-deploy-action@v4
        if: ${{ env.HAVE_ACCESS_TOKEN == 'true' && env.CI_BRANCH == 'main' && env.CI_TAG != '' }}
        with:
          folder: .
          token: ${{ secrets.ACCESS_TOKEN }}
          repository-name: ${{ github.repository_owner}}/cdn
          branch: master
          target-folder: /
